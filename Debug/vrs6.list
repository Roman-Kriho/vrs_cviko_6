
vrs6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08005c88  08005c88  00015c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800603c  0800603c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800603c  0800603c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800603c  0800603c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08006044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201cc  2**0
                  CONTENTS
 10 .bss          00000244  200001cc  200001cc  000201cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000410  20000410  000201cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000063fc  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a19  00000000  00000000  0002663b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000848  00000000  00000000  00028058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005f8  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000175a1  00000000  00000000  00028e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007014  00000000  00000000  00040439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00077540  00000000  00000000  0004744d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003258  00000000  00000000  000be990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000c1be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c70 	.word	0x08005c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08005c70 	.word	0x08005c70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ffe3 	bl	8000cbc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cf6:	f7ff ff57 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffa7 	bl	8000c54 <NVIC_EncodePriority>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f7ff ff78 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d10:	200c      	movs	r0, #12
 8000d12:	f7ff ff57 	bl	8000bc4 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d16:	f7ff ff47 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff97 	bl	8000c54 <NVIC_EncodePriority>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	200d      	movs	r0, #13
 8000d2c:	f7ff ff68 	bl	8000c00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d30:	200d      	movs	r0, #13
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <LL_AHB1_GRP1_EnableClock>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	4907      	ldr	r1, [pc, #28]	; (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000da2:	f7ff ffcb 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000da6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000daa:	f7ff ffc7 	bl	8000d3c <LL_AHB1_GRP1_EnableClock>

  /**/
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8000dae:	2108      	movs	r1, #8
 8000db0:	480a      	ldr	r0, [pc, #40]	; (8000ddc <MX_GPIO_Init+0x54>)
 8000db2:	f7ff ffdb 	bl	8000d6c <LL_GPIO_ResetOutputPin>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000db6:	2308      	movs	r3, #8
 8000db8:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_GPIO_Init+0x54>)
 8000dd0:	f001 fc9a 	bl	8002708 <LL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	48000400 	.word	0x48000400

08000de0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LL_DMA_SetDataTransferDirection+0x48>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e00:	f023 0310 	bic.w	r3, r3, #16
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	3a01      	subs	r2, #1
 8000e08:	4907      	ldr	r1, [pc, #28]	; (8000e28 <LL_DMA_SetDataTransferDirection+0x48>)
 8000e0a:	5c8a      	ldrb	r2, [r1, r2]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	440a      	add	r2, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	08005c9c 	.word	0x08005c9c

08000e2c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <LL_DMA_SetMode+0x44>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	461a      	mov	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4413      	add	r3, r2
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 0220 	bic.w	r2, r3, #32
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <LL_DMA_SetMode+0x44>)
 8000e52:	5ccb      	ldrb	r3, [r1, r3]
 8000e54:	4619      	mov	r1, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	440b      	add	r3, r1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	08005c9c 	.word	0x08005c9c

08000e74 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e9a:	5ccb      	ldrb	r3, [r1, r3]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	440b      	add	r3, r1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	08005c9c 	.word	0x08005c9c

08000ebc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ee2:	5ccb      	ldrb	r3, [r1, r3]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	440b      	add	r3, r1
 8000eea:	4619      	mov	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	08005c9c 	.word	0x08005c9c

08000f04 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <LL_DMA_SetPeriphSize+0x44>)
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <LL_DMA_SetPeriphSize+0x44>)
 8000f2a:	5ccb      	ldrb	r3, [r1, r3]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	08005c9c 	.word	0x08005c9c

08000f4c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <LL_DMA_SetMemorySize+0x44>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <LL_DMA_SetMemorySize+0x44>)
 8000f72:	5ccb      	ldrb	r3, [r1, r3]
 8000f74:	4619      	mov	r1, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	440b      	add	r3, r1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08005c9c 	.word	0x08005c9c

08000f94 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fba:	5ccb      	ldrb	r3, [r1, r3]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	08005c9c 	.word	0x08005c9c

08000fdc <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001030:	f023 0306 	bic.w	r3, r3, #6
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	430a      	orrs	r2, r1
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	60da      	str	r2, [r3, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	60da      	str	r2, [r3, #12]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	605a      	str	r2, [r3, #4]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_AHB1_GRP1_EnableClock>:
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4013      	ands	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c6:	69da      	ldr	r2, [r3, #28]
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010d2:	69da      	ldr	r2, [r3, #28]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <LL_SYSCFG_SetRemapDMA_I2C>:
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH2
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH4
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_I2C(uint32_t Remap)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (Remap >> 16U), (Remap & 0x0000FFFF));
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 80010f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0c1b      	lsrs	r3, r3, #16
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4904      	ldr	r1, [pc, #16]	; (8001118 <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 8001106:	4313      	orrs	r3, r2
 8001108:	650b      	str	r3, [r1, #80]	; 0x50
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40010000 	.word	0x40010000

0800111c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001146:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800114a:	f7ff ff9f 	bl	800108c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800114e:	23c0      	movs	r3, #192	; 0xc0
 8001150:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001152:	2302      	movs	r3, #2
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800115a:	2301      	movs	r3, #1
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001162:	2304      	movs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	483e      	ldr	r0, [pc, #248]	; (8001264 <MX_I2C1_Init+0x148>)
 800116c:	f001 facc 	bl	8002708 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001170:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001174:	f7ff ffa2 	bl	80010bc <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001178:	2200      	movs	r2, #0
 800117a:	2103      	movs	r1, #3
 800117c:	483a      	ldr	r0, [pc, #232]	; (8001268 <MX_I2C1_Init+0x14c>)
 800117e:	f7ff fe2f 	bl	8000de0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8001182:	2200      	movs	r2, #0
 8001184:	2103      	movs	r1, #3
 8001186:	4838      	ldr	r0, [pc, #224]	; (8001268 <MX_I2C1_Init+0x14c>)
 8001188:	f7ff ff04 	bl	8000f94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800118c:	2200      	movs	r2, #0
 800118e:	2103      	movs	r1, #3
 8001190:	4835      	ldr	r0, [pc, #212]	; (8001268 <MX_I2C1_Init+0x14c>)
 8001192:	f7ff fe4b 	bl	8000e2c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8001196:	2200      	movs	r2, #0
 8001198:	2103      	movs	r1, #3
 800119a:	4833      	ldr	r0, [pc, #204]	; (8001268 <MX_I2C1_Init+0x14c>)
 800119c:	f7ff fe6a 	bl	8000e74 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	2103      	movs	r1, #3
 80011a4:	4830      	ldr	r0, [pc, #192]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011a6:	f7ff fe89 	bl	8000ebc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2103      	movs	r1, #3
 80011ae:	482e      	ldr	r0, [pc, #184]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011b0:	f7ff fea8 	bl	8000f04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2103      	movs	r1, #3
 80011b8:	482b      	ldr	r0, [pc, #172]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011ba:	f7ff fec7 	bl	8000f4c <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1RX_RMP_DMA1_CH3);
 80011be:	482b      	ldr	r0, [pc, #172]	; (800126c <MX_I2C1_Init+0x150>)
 80011c0:	f7ff ff94 	bl	80010ec <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80011c4:	2210      	movs	r2, #16
 80011c6:	2102      	movs	r1, #2
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011ca:	f7ff fe09 	bl	8000de0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	4825      	ldr	r0, [pc, #148]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011d4:	f7ff fede 	bl	8000f94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80011d8:	2200      	movs	r2, #0
 80011da:	2102      	movs	r1, #2
 80011dc:	4822      	ldr	r0, [pc, #136]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011de:	f7ff fe25 	bl	8000e2c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	4820      	ldr	r0, [pc, #128]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011e8:	f7ff fe44 	bl	8000e74 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	2102      	movs	r1, #2
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011f2:	f7ff fe63 	bl	8000ebc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2102      	movs	r1, #2
 80011fa:	481b      	ldr	r0, [pc, #108]	; (8001268 <MX_I2C1_Init+0x14c>)
 80011fc:	f7ff fe82 	bl	8000f04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001200:	2200      	movs	r2, #0
 8001202:	2102      	movs	r1, #2
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_I2C1_Init+0x14c>)
 8001206:	f7ff fea1 	bl	8000f4c <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1TX_RMP_DMA1_CH2);
 800120a:	4819      	ldr	r0, [pc, #100]	; (8001270 <MX_I2C1_Init+0x154>)
 800120c:	f7ff ff6e 	bl	80010ec <LL_SYSCFG_SetRemapDMA_I2C>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001210:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_I2C1_Init+0x158>)
 8001212:	f7ff ff2b 	bl	800106c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001216:	4817      	ldr	r0, [pc, #92]	; (8001274 <MX_I2C1_Init+0x158>)
 8001218:	f7ff ff18 	bl	800104c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_I2C1_Init+0x158>)
 800121e:	f7ff feed 	bl	8000ffc <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <MX_I2C1_Init+0x158>)
 8001224:	f7ff feda 	bl	8000fdc <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x15c>)
 800122e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <MX_I2C1_Init+0x158>)
 800124c:	f001 fb6f 	bl	800292e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_I2C1_Init+0x158>)
 8001256:	f7ff fee1 	bl	800101c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3738      	adds	r7, #56	; 0x38
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	48000400 	.word	0x48000400
 8001268:	40020000 	.word	0x40020000
 800126c:	00300010 	.word	0x00300010
 8001270:	00c00040 	.word	0x00c00040
 8001274:	40005400 	.word	0x40005400
 8001278:	2000090e 	.word	0x2000090e

0800127c <__NVIC_SetPriorityGrouping>:
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_SetPriority>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <LL_RCC_HSI_Enable+0x1c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <LL_RCC_HSI_Enable+0x1c>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <LL_RCC_HSI_IsReady+0x20>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000

080013e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4904      	ldr	r1, [pc, #16]	; (8001408 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <LL_RCC_SetSysClkSource+0x24>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 0203 	bic.w	r2, r3, #3
 800141c:	4904      	ldr	r1, [pc, #16]	; (8001430 <LL_RCC_SetSysClkSource+0x24>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000

08001434 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <LL_RCC_GetSysClkSource+0x18>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <LL_RCC_SetAHBPrescaler+0x24>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	4904      	ldr	r1, [pc, #16]	; (8001474 <LL_RCC_SetAHBPrescaler+0x24>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000

08001478 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001488:	4904      	ldr	r1, [pc, #16]	; (800149c <LL_RCC_SetAPB1Prescaler+0x24>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40021000 	.word	0x40021000

080014a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <LL_RCC_SetI2CClockSource+0x2c>)
 80014d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	0e1b      	lsrs	r3, r3, #24
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014e2:	4904      	ldr	r1, [pc, #16]	; (80014f4 <LL_RCC_SetI2CClockSource+0x2c>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	630b      	str	r3, [r1, #48]	; 0x30
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000

080014f8 <LL_APB1_GRP1_EnableClock>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000

08001528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800153e:	699a      	ldr	r2, [r3, #24]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4013      	ands	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000

08001558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <LL_FLASH_SetLatency+0x24>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 0207 	bic.w	r2, r3, #7
 8001568:	4904      	ldr	r1, [pc, #16]	; (800157c <LL_FLASH_SetLatency+0x24>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40022000 	.word	0x40022000

08001580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <LL_FLASH_GetLatency+0x18>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40022000 	.word	0x40022000

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff ffc1 	bl	8001528 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80015a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80015aa:	f7ff ffa5 	bl	80014f8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ae:	2003      	movs	r0, #3
 80015b0:	f7ff fe64 	bl	800127c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80015b4:	f7ff fe86 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2200      	movs	r2, #0
 80015bc:	210f      	movs	r1, #15
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff feb8 	bl	8001334 <NVIC_EncodePriority>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff fe88 	bl	80012e0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d0:	f000 f81a 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d4:	f7ff fbd8 	bl	8000d88 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d8:	f7ff fb88 	bl	8000cec <MX_DMA_Init>
  MX_I2C1_Init();
 80015dc:	f7ff fd9e 	bl	800111c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015e0:	f000 fdf8 	bl	80021d4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
//	  uint8_t used = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
//	  	  float per =(float) (used*100)/ DMA_USART2_BUFFER_SIZE;
	  	  sprintf((char*)tx_data,"skuska posielania");
 80015e4:	4906      	ldr	r1, [pc, #24]	; (8001600 <main+0x64>)
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <main+0x68>)
 80015e8:	f002 f9e6 	bl	80039b8 <siprintf>
	  //	  sprintf((char*)tx_data,"Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]: %.1f% \r\n", DMA_USART2_BUFFER_SIZE,used,per);
	  	  USART2_PutBuffer(tx_data, sizeof(tx_data));
 80015ec:	2150      	movs	r1, #80	; 0x50
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <main+0x68>)
 80015f0:	f000 fed2 	bl	8002398 <USART2_PutBuffer>
	  	  LL_mDelay(2000);
 80015f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015f8:	f001 fc80 	bl	8002efc <LL_mDelay>
	  	  sprintf((char*)tx_data,"skuska posielania");
 80015fc:	e7f2      	b.n	80015e4 <main+0x48>
 80015fe:	bf00      	nop
 8001600:	08005c88 	.word	0x08005c88
 8001604:	200001e8 	.word	0x200001e8

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ffa3 	bl	8001558 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001612:	bf00      	nop
 8001614:	f7ff ffb4 	bl	8001580 <LL_FLASH_GetLatency>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1fa      	bne.n	8001614 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800161e:	f7ff febd 	bl	800139c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001622:	bf00      	nop
 8001624:	f7ff feca 	bl	80013bc <LL_RCC_HSI_IsReady>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d1fa      	bne.n	8001624 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800162e:	2010      	movs	r0, #16
 8001630:	f7ff fed6 	bl	80013e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ff0b 	bl	8001450 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff ff1c 	bl	8001478 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ff2d 	bl	80014a0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fee0 	bl	800140c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800164c:	bf00      	nop
 800164e:	f7ff fef1 	bl	8001434 <LL_RCC_GetSysClkSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1fa      	bne.n	800164e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <SystemClock_Config+0x68>)
 800165a:	f001 fc41 	bl	8002ee0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <SystemClock_Config+0x68>)
 8001660:	f001 fc72 	bl	8002f48 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001664:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001668:	f7ff ff2e 	bl	80014c8 <LL_RCC_SetI2CClockSource>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	007a1200 	.word	0x007a1200

08001674 <LL_DMA_DisableChannel>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <LL_DMA_DisableChannel+0x3c>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	461a      	mov	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	3a01      	subs	r2, #1
 8001692:	4907      	ldr	r1, [pc, #28]	; (80016b0 <LL_DMA_DisableChannel+0x3c>)
 8001694:	5c8a      	ldrb	r2, [r1, r2]
 8001696:	4611      	mov	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	440a      	add	r2, r1
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6013      	str	r3, [r2, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	08005ca4 	.word	0x08005ca4

080016b4 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001718:	bf0c      	ite	eq
 800171a:	2301      	moveq	r3, #1
 800171c:	2300      	movne	r3, #0
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001756:	605a      	str	r2, [r3, #4]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001772:	605a      	str	r2, [r3, #4]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b10      	cmp	r3, #16
 8001792:	d101      	bne.n	8001798 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d101      	bne.n	80017be <LL_USART_IsActiveFlag_TC+0x18>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <LL_USART_IsActiveFlag_TC+0x1a>
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2210      	movs	r2, #16
 80017d8:	621a      	str	r2, [r3, #32]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <HardFault_Handler+0x4>

080017f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <BusFault_Handler+0x4>

080017fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <DMA1_Channel6_IRQHandler+0x38>)
 800185e:	f7ff ff29 	bl	80016b4 <LL_DMA_IsActiveFlag_TC6>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001868:	f000 fdb6 	bl	80023d8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 800186c:	4808      	ldr	r0, [pc, #32]	; (8001890 <DMA1_Channel6_IRQHandler+0x38>)
 800186e:	f7ff ff5d 	bl	800172c <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001872:	e00a      	b.n	800188a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001874:	4806      	ldr	r0, [pc, #24]	; (8001890 <DMA1_Channel6_IRQHandler+0x38>)
 8001876:	f7ff ff45 	bl	8001704 <LL_DMA_IsActiveFlag_HT6>
 800187a:	4603      	mov	r3, r0
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001880:	f000 fdaa 	bl	80023d8 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel6_IRQHandler+0x38>)
 8001886:	f7ff ff6d 	bl	8001764 <LL_DMA_ClearFlag_HT6>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020000 	.word	0x40020000

08001894 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <DMA1_Channel7_IRQHandler+0x30>)
 800189a:	f7ff ff1f 	bl	80016dc <LL_DMA_IsActiveFlag_TC7>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10d      	bne.n	80018c0 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <DMA1_Channel7_IRQHandler+0x30>)
 80018a6:	f7ff ff4f 	bl	8001748 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80018aa:	bf00      	nop
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <DMA1_Channel7_IRQHandler+0x34>)
 80018ae:	f7ff ff7a 	bl	80017a6 <LL_USART_IsActiveFlag_TC>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f9      	beq.n	80018ac <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80018b8:	2107      	movs	r1, #7
 80018ba:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA1_Channel7_IRQHandler+0x30>)
 80018bc:	f7ff feda 	bl	8001674 <LL_DMA_DisableChannel>
	}
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40004400 	.word	0x40004400

080018cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <USART2_IRQHandler+0x20>)
 80018d2:	f7ff ff55 	bl	8001780 <LL_USART_IsActiveFlag_IDLE>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80018dc:	f000 fd7c 	bl	80023d8 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USART2_IRQHandler+0x20>)
 80018e2:	f7ff ff73 	bl	80017cc <LL_USART_ClearFlag_IDLE>
	}
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40004400 	.word	0x40004400

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190a:	f002 f90b 	bl	8003b24 <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
  return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001932:	e7fe      	b.n	8001932 <_exit+0x12>

08001934 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e00a      	b.n	800195c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001946:	f3af 8000 	nop.w
 800194a:	4601      	mov	r1, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf0      	blt.n	8001946 <_read+0x12>
  }

  return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e009      	b.n	8001994 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf1      	blt.n	8001980 <_write+0x12>
  }
  return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f002 f870 	bl	8003b24 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20003000 	.word	0x20003000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20000238 	.word	0x20000238
 8001a78:	20000410 	.word	0x20000410

08001a7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <LL_DMA_EnableChannel>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LL_DMA_EnableChannel+0x3c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	3a01      	subs	r2, #1
 8001b4e:	4907      	ldr	r1, [pc, #28]	; (8001b6c <LL_DMA_EnableChannel+0x3c>)
 8001b50:	5c8a      	ldrb	r2, [r1, r2]
 8001b52:	4611      	mov	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	440a      	add	r2, r1
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	08005cc4 	.word	0x08005cc4

08001b70 <LL_DMA_DisableChannel>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LL_DMA_DisableChannel+0x3c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	4907      	ldr	r1, [pc, #28]	; (8001bac <LL_DMA_DisableChannel+0x3c>)
 8001b90:	5c8a      	ldrb	r2, [r1, r2]
 8001b92:	4611      	mov	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	440a      	add	r2, r1
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	08005cc4 	.word	0x08005cc4

08001bb0 <LL_DMA_SetDataTransferDirection>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd0:	f023 0310 	bic.w	r3, r3, #16
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <LL_DMA_SetDataTransferDirection+0x48>)
 8001bda:	5c8a      	ldrb	r2, [r1, r2]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	440a      	add	r2, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	08005cc4 	.word	0x08005cc4

08001bfc <LL_DMA_GetDataTransferDirection>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f244 0310 	movw	r3, #16400	; 0x4010
 8001c1a:	4013      	ands	r3, r2
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	08005cc4 	.word	0x08005cc4

08001c2c <LL_DMA_SetMode>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <LL_DMA_SetMode+0x44>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	461a      	mov	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 0220 	bic.w	r2, r3, #32
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <LL_DMA_SetMode+0x44>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	4619      	mov	r1, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	440b      	add	r3, r1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	08005cc4 	.word	0x08005cc4

08001c74 <LL_DMA_SetPeriphIncMode>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	08005cc4 	.word	0x08005cc4

08001cbc <LL_DMA_SetMemoryIncMode>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <LL_DMA_SetMemoryIncMode+0x44>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <LL_DMA_SetMemoryIncMode+0x44>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	440b      	add	r3, r1
 8001cea:	4619      	mov	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	08005cc4 	.word	0x08005cc4

08001d04 <LL_DMA_SetPeriphSize>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <LL_DMA_SetPeriphSize+0x44>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <LL_DMA_SetPeriphSize+0x44>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	440b      	add	r3, r1
 8001d32:	4619      	mov	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	08005cc4 	.word	0x08005cc4

08001d4c <LL_DMA_SetMemorySize>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <LL_DMA_SetMemorySize+0x44>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <LL_DMA_SetMemorySize+0x44>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	4619      	mov	r1, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	440b      	add	r3, r1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	08005cc4 	.word	0x08005cc4

08001d94 <LL_DMA_SetChannelPriorityLevel>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	461a      	mov	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	440b      	add	r3, r1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	08005cc4 	.word	0x08005cc4

08001ddc <LL_DMA_SetDataLength>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <LL_DMA_SetDataLength+0x44>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	461a      	mov	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	041b      	lsls	r3, r3, #16
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	3a01      	subs	r2, #1
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <LL_DMA_SetDataLength+0x44>)
 8001e02:	5c8a      	ldrb	r2, [r1, r2]
 8001e04:	4611      	mov	r1, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	440a      	add	r2, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	08005cc4 	.word	0x08005cc4

08001e24 <LL_DMA_GetDataLength>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <LL_DMA_GetDataLength+0x28>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	b29b      	uxth	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	08005cc4 	.word	0x08005cc4

08001e50 <LL_DMA_ConfigAddresses>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d114      	bne.n	8001e8e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <LL_DMA_ConfigAddresses+0x74>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <LL_DMA_ConfigAddresses+0x74>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	461a      	mov	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6093      	str	r3, [r2, #8]
}
 8001e8c:	e013      	b.n	8001eb6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <LL_DMA_ConfigAddresses+0x74>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <LL_DMA_ConfigAddresses+0x74>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	60d3      	str	r3, [r2, #12]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	08005cc4 	.word	0x08005cc4

08001ec8 <LL_DMA_SetMemoryAddress>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <LL_DMA_SetMemoryAddress+0x2c>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	461a      	mov	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	08005cc4 	.word	0x08005cc4

08001ef8 <LL_DMA_SetPeriphAddress>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <LL_DMA_SetPeriphAddress+0x2c>)
 8001f0a:	5cd3      	ldrb	r3, [r2, r3]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6093      	str	r3, [r2, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	08005cc4 	.word	0x08005cc4

08001f28 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LL_DMA_EnableIT_TC+0x3c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	3a01      	subs	r2, #1
 8001f46:	4907      	ldr	r1, [pc, #28]	; (8001f64 <LL_DMA_EnableIT_TC+0x3c>)
 8001f48:	5c8a      	ldrb	r2, [r1, r2]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	440a      	add	r2, r1
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	08005cc4 	.word	0x08005cc4

08001f68 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <LL_DMA_EnableIT_HT+0x3c>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	3a01      	subs	r2, #1
 8001f86:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <LL_DMA_EnableIT_HT+0x3c>)
 8001f88:	5c8a      	ldrb	r2, [r1, r2]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	440a      	add	r2, r1
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	08005cc4 	.word	0x08005cc4

08001fa8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LL_DMA_EnableIT_TE+0x3c>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <LL_DMA_EnableIT_TE+0x3c>)
 8001fc8:	5c8a      	ldrb	r2, [r1, r2]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	08005cc4 	.word	0x08005cc4

08001fe8 <LL_AHB1_GRP1_EnableClock>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000

08002018 <LL_APB1_GRP1_EnableClock>:
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <LL_APB1_GRP1_EnableClock+0x2c>)
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4013      	ands	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000

08002048 <LL_USART_Enable>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_USART_ConfigAsyncMode>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	e853 3f00 	ldrex	r3, [r3]
 80020a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	61ba      	str	r2, [r7, #24]
 80020b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	613b      	str	r3, [r7, #16]
   return(result);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e9      	bne.n	800209c <LL_USART_EnableIT_IDLE+0x8>
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b089      	sub	sp, #36	; 0x24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3308      	adds	r3, #8
 80020e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	e853 3f00 	ldrex	r3, [r3]
 80020ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3308      	adds	r3, #8
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	61ba      	str	r2, [r7, #24]
 80020fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	6979      	ldr	r1, [r7, #20]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	613b      	str	r3, [r7, #16]
   return(result);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e7      	bne.n	80020de <LL_USART_DisableIT_CTS+0x8>
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3724      	adds	r7, #36	; 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3308      	adds	r3, #8
 8002128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	e853 3f00 	ldrex	r3, [r3]
 8002130:	60bb      	str	r3, [r7, #8]
   return(result);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3308      	adds	r3, #8
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	61ba      	str	r2, [r7, #24]
 8002142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002144:	6979      	ldr	r1, [r7, #20]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	e841 2300 	strex	r3, r2, [r1]
 800214c:	613b      	str	r3, [r7, #16]
   return(result);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1e7      	bne.n	8002124 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002162:	b480      	push	{r7}
 8002164:	b089      	sub	sp, #36	; 0x24
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3308      	adds	r3, #8
 800216e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	e853 3f00 	ldrex	r3, [r3]
 8002176:	60bb      	str	r3, [r7, #8]
   return(result);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3308      	adds	r3, #8
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	61ba      	str	r2, [r7, #24]
 8002188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218a:	6979      	ldr	r1, [r7, #20]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	e841 2300 	strex	r3, r2, [r1]
 8002192:	613b      	str	r3, [r7, #16]
   return(result);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1e7      	bne.n	800216a <LL_USART_EnableDMAReq_TX+0x8>
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3724      	adds	r7, #36	; 0x24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d103      	bne.n	80021c0 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3328      	adds	r3, #40	; 0x28
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e002      	b.n	80021c6 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3324      	adds	r3, #36	; 0x24
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b090      	sub	sp, #64	; 0x40
 80021d8:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]
 80021ea:	615a      	str	r2, [r3, #20]
 80021ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80021fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002202:	f7ff ff09 	bl	8002018 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002206:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800220a:	f7ff feed 	bl	8001fe8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800220e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002212:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002214:	2302      	movs	r3, #2
 8002216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002224:	2307      	movs	r3, #7
 8002226:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	f000 fa6a 	bl	8002708 <LL_GPIO_Init>
   * For more information about DMA registers, refer to reference manual.
   */

  /* USART2_RX Init */

  	  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002234:	2200      	movs	r2, #0
 8002236:	2106      	movs	r1, #6
 8002238:	4854      	ldr	r0, [pc, #336]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800223a:	f7ff fcb9 	bl	8001bb0 <LL_DMA_SetDataTransferDirection>
      LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800223e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002242:	2106      	movs	r1, #6
 8002244:	4851      	ldr	r0, [pc, #324]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 8002246:	f7ff fda5 	bl	8001d94 <LL_DMA_SetChannelPriorityLevel>
      LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800224a:	2200      	movs	r2, #0
 800224c:	2106      	movs	r1, #6
 800224e:	484f      	ldr	r0, [pc, #316]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 8002250:	f7ff fcec 	bl	8001c2c <LL_DMA_SetMode>
      LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002254:	2200      	movs	r2, #0
 8002256:	2106      	movs	r1, #6
 8002258:	484c      	ldr	r0, [pc, #304]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800225a:	f7ff fd0b 	bl	8001c74 <LL_DMA_SetPeriphIncMode>
      LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	2106      	movs	r1, #6
 8002262:	484a      	ldr	r0, [pc, #296]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 8002264:	f7ff fd2a 	bl	8001cbc <LL_DMA_SetMemoryIncMode>
      LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002268:	2200      	movs	r2, #0
 800226a:	2106      	movs	r1, #6
 800226c:	4847      	ldr	r0, [pc, #284]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800226e:	f7ff fd49 	bl	8001d04 <LL_DMA_SetPeriphSize>
      LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002272:	2200      	movs	r2, #0
 8002274:	2106      	movs	r1, #6
 8002276:	4845      	ldr	r0, [pc, #276]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 8002278:	f7ff fd68 	bl	8001d4c <LL_DMA_SetMemorySize>

      LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 800227c:	2101      	movs	r1, #1
 800227e:	4844      	ldr	r0, [pc, #272]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 8002280:	f7ff ff92 	bl	80021a8 <LL_USART_DMA_GetRegAddr>
 8002284:	4604      	mov	r4, r0
 8002286:	4d43      	ldr	r5, [pc, #268]	; (8002394 <MX_USART2_UART_Init+0x1c0>)
 8002288:	2106      	movs	r1, #6
 800228a:	4840      	ldr	r0, [pc, #256]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800228c:	f7ff fcb6 	bl	8001bfc <LL_DMA_GetDataTransferDirection>
 8002290:	4603      	mov	r3, r0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	462b      	mov	r3, r5
 8002296:	4622      	mov	r2, r4
 8002298:	2106      	movs	r1, #6
 800229a:	483c      	ldr	r0, [pc, #240]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800229c:	f7ff fdd8 	bl	8001e50 <LL_DMA_ConfigAddresses>
    						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
    							(uint32_t)bufferUSART2dma,
    							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

      LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	2106      	movs	r1, #6
 80022a4:	4839      	ldr	r0, [pc, #228]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022a6:	f7ff fd99 	bl	8001ddc <LL_DMA_SetDataLength>
      LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80022aa:	2106      	movs	r1, #6
 80022ac:	4837      	ldr	r0, [pc, #220]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022ae:	f7ff fc3f 	bl	8001b30 <LL_DMA_EnableChannel>
      LL_USART_EnableDMAReq_RX(USART2);
 80022b2:	4837      	ldr	r0, [pc, #220]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 80022b4:	f7ff ff32 	bl	800211c <LL_USART_EnableDMAReq_RX>

      LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80022b8:	2106      	movs	r1, #6
 80022ba:	4834      	ldr	r0, [pc, #208]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022bc:	f7ff fe34 	bl	8001f28 <LL_DMA_EnableIT_TC>
      LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80022c0:	2106      	movs	r1, #6
 80022c2:	4832      	ldr	r0, [pc, #200]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022c4:	f7ff fe50 	bl	8001f68 <LL_DMA_EnableIT_HT>


  /* USART2_TX Init */

      LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80022c8:	2210      	movs	r2, #16
 80022ca:	2107      	movs	r1, #7
 80022cc:	482f      	ldr	r0, [pc, #188]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022ce:	f7ff fc6f 	bl	8001bb0 <LL_DMA_SetDataTransferDirection>
      LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80022d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022d6:	2107      	movs	r1, #7
 80022d8:	482c      	ldr	r0, [pc, #176]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022da:	f7ff fd5b 	bl	8001d94 <LL_DMA_SetChannelPriorityLevel>
      LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80022de:	2200      	movs	r2, #0
 80022e0:	2107      	movs	r1, #7
 80022e2:	482a      	ldr	r0, [pc, #168]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022e4:	f7ff fca2 	bl	8001c2c <LL_DMA_SetMode>
      LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2107      	movs	r1, #7
 80022ec:	4827      	ldr	r0, [pc, #156]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022ee:	f7ff fcc1 	bl	8001c74 <LL_DMA_SetPeriphIncMode>
      LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	2107      	movs	r1, #7
 80022f6:	4825      	ldr	r0, [pc, #148]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 80022f8:	f7ff fce0 	bl	8001cbc <LL_DMA_SetMemoryIncMode>
      LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2107      	movs	r1, #7
 8002300:	4822      	ldr	r0, [pc, #136]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 8002302:	f7ff fcff 	bl	8001d04 <LL_DMA_SetPeriphSize>
      LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002306:	2200      	movs	r2, #0
 8002308:	2107      	movs	r1, #7
 800230a:	4820      	ldr	r0, [pc, #128]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800230c:	f7ff fd1e 	bl	8001d4c <LL_DMA_SetMemorySize>

      LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002310:	2100      	movs	r1, #0
 8002312:	481f      	ldr	r0, [pc, #124]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 8002314:	f7ff ff48 	bl	80021a8 <LL_USART_DMA_GetRegAddr>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	2107      	movs	r1, #7
 800231e:	481b      	ldr	r0, [pc, #108]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 8002320:	f7ff fdea 	bl	8001ef8 <LL_DMA_SetPeriphAddress>
      LL_USART_EnableDMAReq_TX(USART2);
 8002324:	481a      	ldr	r0, [pc, #104]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 8002326:	f7ff ff1c 	bl	8002162 <LL_USART_EnableDMAReq_TX>

      LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800232a:	2107      	movs	r1, #7
 800232c:	4817      	ldr	r0, [pc, #92]	; (800238c <MX_USART2_UART_Init+0x1b8>)
 800232e:	f7ff fe3b 	bl	8001fa8 <LL_DMA_EnableIT_TE>


  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002332:	2100      	movs	r1, #0
 8002334:	2026      	movs	r0, #38	; 0x26
 8002336:	f7ff fbd1 	bl	8001adc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800233a:	2026      	movs	r0, #38	; 0x26
 800233c:	f7ff fbb0 	bl	8001aa0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002340:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002344:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002352:	230c      	movs	r3, #12
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002356:	2300      	movs	r3, #0
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	480a      	ldr	r0, [pc, #40]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 8002366:	f000 fd35 	bl	8002dd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800236a:	4809      	ldr	r0, [pc, #36]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 800236c:	f7ff fe7c 	bl	8002068 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002370:	4807      	ldr	r0, [pc, #28]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 8002372:	f7ff feb0 	bl	80020d6 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/

  LL_USART_EnableIT_IDLE(USART2);
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 8002378:	f7ff fe8c 	bl	8002094 <LL_USART_EnableIT_IDLE>

  LL_USART_Enable(USART2);
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_USART2_UART_Init+0x1bc>)
 800237e:	f7ff fe63 	bl	8002048 <LL_USART_Enable>
}
 8002382:	bf00      	nop
 8002384:	3738      	adds	r7, #56	; 0x38
 8002386:	46bd      	mov	sp, r7
 8002388:	bdb0      	pop	{r4, r5, r7, pc}
 800238a:	bf00      	nop
 800238c:	40020000 	.word	0x40020000
 8002390:	40004400 	.word	0x40004400
 8002394:	2000023c 	.word	0x2000023c

08002398 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	461a      	mov	r2, r3
 80023a8:	2107      	movs	r1, #7
 80023aa:	480a      	ldr	r0, [pc, #40]	; (80023d4 <USART2_PutBuffer+0x3c>)
 80023ac:	f7ff fd8c 	bl	8001ec8 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	461a      	mov	r2, r3
 80023b4:	2107      	movs	r1, #7
 80023b6:	4807      	ldr	r0, [pc, #28]	; (80023d4 <USART2_PutBuffer+0x3c>)
 80023b8:	f7ff fd10 	bl	8001ddc <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80023bc:	2107      	movs	r1, #7
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <USART2_PutBuffer+0x3c>)
 80023c0:	f7ff fdb2 	bl	8001f28 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80023c4:	2107      	movs	r1, #7
 80023c6:	4803      	ldr	r0, [pc, #12]	; (80023d4 <USART2_PutBuffer+0x3c>)
 80023c8:	f7ff fbb2 	bl	8001b30 <LL_DMA_EnableChannel>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40020000 	.word	0x40020000

080023d8 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
    if (USART2_ProcessData == NULL) return;
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <USART2_CheckDmaReception+0xc4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d056      	beq.n	8002494 <USART2_CheckDmaReception+0xbc>

    static uint16_t old_pos = 0;
    uint16_t buffer_size = DMA_USART2_BUFFER_SIZE;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	80fb      	strh	r3, [r7, #6]
    uint16_t pos = buffer_size - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80023ea:	2106      	movs	r1, #6
 80023ec:	482c      	ldr	r0, [pc, #176]	; (80024a0 <USART2_CheckDmaReception+0xc8>)
 80023ee:	f7ff fd19 	bl	8001e24 <LL_DMA_GetDataLength>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	80bb      	strh	r3, [r7, #4]

    if (pos != old_pos)
 80023fc:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	88ba      	ldrh	r2, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	d027      	beq.n	8002456 <USART2_CheckDmaReception+0x7e>
    {
        if (pos > old_pos)
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	88ba      	ldrh	r2, [r7, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d90e      	bls.n	800242e <USART2_CheckDmaReception+0x56>
        {
            // Nové údaje od old_pos po pos - 1
            USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <USART2_CheckDmaReception+0xc4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	4611      	mov	r1, r2
 800241a:	4a23      	ldr	r2, [pc, #140]	; (80024a8 <USART2_CheckDmaReception+0xd0>)
 800241c:	1888      	adds	r0, r1, r2
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	88b9      	ldrh	r1, [r7, #4]
 8002424:	1a8a      	subs	r2, r1, r2
 8002426:	b292      	uxth	r2, r2
 8002428:	4611      	mov	r1, r2
 800242a:	4798      	blx	r3
 800242c:	e013      	b.n	8002456 <USART2_CheckDmaReception+0x7e>
        }
        else
        {
            // Údaje od old_pos po koniec bufferu
            USART2_ProcessData(&bufferUSART2dma[old_pos], buffer_size - old_pos);
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <USART2_CheckDmaReception+0xc4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	4611      	mov	r1, r2
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <USART2_CheckDmaReception+0xd0>)
 800243a:	1888      	adds	r0, r1, r2
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 800243e:	8812      	ldrh	r2, [r2, #0]
 8002440:	88f9      	ldrh	r1, [r7, #6]
 8002442:	1a8a      	subs	r2, r1, r2
 8002444:	b292      	uxth	r2, r2
 8002446:	4611      	mov	r1, r2
 8002448:	4798      	blx	r3

            // Údaje od začiatku bufferu po pos - 1
            USART2_ProcessData(&bufferUSART2dma[0], pos);
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <USART2_CheckDmaReception+0xc4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	88ba      	ldrh	r2, [r7, #4]
 8002450:	4611      	mov	r1, r2
 8002452:	4815      	ldr	r0, [pc, #84]	; (80024a8 <USART2_CheckDmaReception+0xd0>)
 8002454:	4798      	blx	r3
        }
    }

    if (pos >= (buffer_size - 20))
 8002456:	88ba      	ldrh	r2, [r7, #4]
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	3b14      	subs	r3, #20
 800245c:	429a      	cmp	r2, r3
 800245e:	db0d      	blt.n	800247c <USART2_CheckDmaReception+0xa4>
    {

        LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002460:	2106      	movs	r1, #6
 8002462:	480f      	ldr	r0, [pc, #60]	; (80024a0 <USART2_CheckDmaReception+0xc8>)
 8002464:	f7ff fb84 	bl	8001b70 <LL_DMA_DisableChannel>
        LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, buffer_size);
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	461a      	mov	r2, r3
 800246c:	2106      	movs	r1, #6
 800246e:	480c      	ldr	r0, [pc, #48]	; (80024a0 <USART2_CheckDmaReception+0xc8>)
 8002470:	f7ff fcb4 	bl	8001ddc <LL_DMA_SetDataLength>
        LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002474:	2106      	movs	r1, #6
 8002476:	480a      	ldr	r0, [pc, #40]	; (80024a0 <USART2_CheckDmaReception+0xc8>)
 8002478:	f7ff fb5a 	bl	8001b30 <LL_DMA_EnableChannel>
    }

    old_pos = pos;
 800247c:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 800247e:	88bb      	ldrh	r3, [r7, #4]
 8002480:	8013      	strh	r3, [r2, #0]

    if (old_pos == buffer_size)
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	429a      	cmp	r2, r3
 800248a:	d104      	bne.n	8002496 <USART2_CheckDmaReception+0xbe>
    {
        old_pos = 0;  // Reset old_pos, ak sa dosiahla koncová pozícia buffera
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <USART2_CheckDmaReception+0xcc>)
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e000      	b.n	8002496 <USART2_CheckDmaReception+0xbe>
    if (USART2_ProcessData == NULL) return;
 8002494:	bf00      	nop
		{
			old_pos = 0;
		}
*/

}
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200002bc 	.word	0x200002bc
 80024a0:	40020000 	.word	0x40020000
 80024a4:	200002c0 	.word	0x200002c0
 80024a8:	2000023c 	.word	0x2000023c

080024ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024b0:	f7ff fae4 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	; (80024ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <LoopForever+0xe>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	; (80024f8 <LoopForever+0x16>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024da:	f001 fb29 	bl	8003b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024de:	f7ff f85d 	bl	800159c <main>

080024e2 <LoopForever>:

LoopForever:
    b LoopForever
 80024e2:	e7fe      	b.n	80024e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80024f0:	08006044 	.word	0x08006044
  ldr r2, =_sbss
 80024f4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80024f8:	20000410 	.word	0x20000410

080024fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC1_2_IRQHandler>

080024fe <LL_GPIO_SetPinMode>:
{
 80024fe:	b480      	push	{r7}
 8002500:	b089      	sub	sp, #36	; 0x24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	613b      	str	r3, [r7, #16]
  return result;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2103      	movs	r1, #3
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	61bb      	str	r3, [r7, #24]
  return result;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	431a      	orrs	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_GPIO_SetPinOutputType>:
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	431a      	orrs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_GPIO_SetPinSpeed>:
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	613b      	str	r3, [r7, #16]
  return result;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2103      	movs	r1, #3
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	401a      	ands	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	61bb      	str	r3, [r7, #24]
  return result;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	431a      	orrs	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	609a      	str	r2, [r3, #8]
}
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_GPIO_SetPinPull>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	b089      	sub	sp, #36	; 0x24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	613b      	str	r3, [r7, #16]
  return result;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2103      	movs	r1, #3
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	401a      	ands	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	61bb      	str	r3, [r7, #24]
  return result;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	60da      	str	r2, [r3, #12]
}
 800263c:	bf00      	nop
 800263e:	3724      	adds	r7, #36	; 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_GPIO_SetAFPin_0_7>:
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	613b      	str	r3, [r7, #16]
  return result;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	210f      	movs	r1, #15
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	61bb      	str	r3, [r7, #24]
  return result;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_GPIO_SetAFPin_8_15>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b089      	sub	sp, #36	; 0x24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	613b      	str	r3, [r7, #16]
  return result;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	210f      	movs	r1, #15
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	401a      	ands	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	61bb      	str	r3, [r7, #24]
  return result;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	431a      	orrs	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026fc:	bf00      	nop
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	613b      	str	r3, [r7, #16]
  return result;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800272a:	e051      	b.n	80027d0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d043      	beq.n	80027ca <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d003      	beq.n	8002752 <LL_GPIO_Init+0x4a>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d10e      	bne.n	8002770 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	461a      	mov	r2, r3
 8002758:	69b9      	ldr	r1, [r7, #24]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff16 	bl	800258c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	461a      	mov	r2, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fef6 	bl	800255c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	461a      	mov	r2, r3
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff36 	bl	80025ea <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d11a      	bne.n	80027bc <LL_GPIO_Init+0xb4>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	60bb      	str	r3, [r7, #8]
  return result;
 8002792:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b07      	cmp	r3, #7
 800279c:	d807      	bhi.n	80027ae <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	461a      	mov	r2, r3
 80027a4:	69b9      	ldr	r1, [r7, #24]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff4e 	bl	8002648 <LL_GPIO_SetAFPin_0_7>
 80027ac:	e006      	b.n	80027bc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	461a      	mov	r2, r3
 80027b4:	69b9      	ldr	r1, [r7, #24]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff75 	bl	80026a6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	461a      	mov	r2, r3
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fe9a 	bl	80024fe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1a6      	bne.n	800272c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LL_I2C_Enable>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_I2C_Disable>:
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 0201 	bic.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_I2C_ConfigFilters>:
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0219      	lsls	r1, r3, #8
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	430b      	orrs	r3, r1
 8002844:	431a      	orrs	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_I2C_SetOwnAddress1>:
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800286a:	f023 0307 	bic.w	r3, r3, #7
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	430a      	orrs	r2, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	609a      	str	r2, [r3, #8]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_I2C_EnableOwnAddress1>:
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_I2C_DisableOwnAddress1>:
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	609a      	str	r2, [r3, #8]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_I2C_SetTiming>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	611a      	str	r2, [r3, #16]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_I2C_SetMode>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff65 	bl	8002808 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	461a      	mov	r2, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff6d 	bl	8002828 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffb6 	bl	80028c6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ff44 	bl	80027e8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ffa0 	bl	80028a6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	461a      	mov	r2, r3
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff70 	bl	8002856 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff81 	bl	8002886 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa9 	bl	80028e2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffb6 	bl	8002908 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <LL_RCC_HSI_IsReady>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <LL_RCC_HSI_IsReady+0x20>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000

080029cc <LL_RCC_LSE_IsReady>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <LL_RCC_LSE_IsReady+0x20>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40021000 	.word	0x40021000

080029f0 <LL_RCC_GetSysClkSource>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <LL_RCC_GetSysClkSource+0x18>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000

08002a0c <LL_RCC_GetAHBPrescaler>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <LL_RCC_GetAHBPrescaler+0x18>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000

08002a28 <LL_RCC_GetAPB1Prescaler>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <LL_RCC_GetAPB2Prescaler>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <LL_RCC_GetUSARTClockSource+0x28>)
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	401a      	ands	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4313      	orrs	r3, r2
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40021000 	.word	0x40021000

08002a8c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <LL_RCC_PLL_GetMainSource+0x18>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <LL_RCC_PLL_GetPrediv+0x18>)
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 030f 	and.w	r3, r3, #15
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000

08002ae0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002ae8:	f000 f862 	bl	8002bb0 <RCC_GetSystemClockFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f880 	bl	8002bfc <RCC_GetHCLKClockFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f88e 	bl	8002c28 <RCC_GetPCLK1ClockFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f89a 	bl	8002c50 <RCC_GetPCLK2ClockFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60da      	str	r2, [r3, #12]
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d130      	bne.n	8002ba0 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff8e 	bl	8002a60 <LL_RCC_GetUSARTClockSource>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d00a      	beq.n	8002b60 <LL_RCC_GetUSARTClockFreq+0x34>
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d819      	bhi.n	8002b82 <LL_RCC_GetUSARTClockFreq+0x56>
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d002      	beq.n	8002b58 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d00c      	beq.n	8002b70 <LL_RCC_GetUSARTClockFreq+0x44>
 8002b56:	e014      	b.n	8002b82 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002b58:	f000 f82a 	bl	8002bb0 <RCC_GetSystemClockFreq>
 8002b5c:	60f8      	str	r0, [r7, #12]
        break;
 8002b5e:	e01f      	b.n	8002ba0 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002b60:	f7ff ff22 	bl	80029a8 <LL_RCC_HSI_IsReady>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <LL_RCC_GetUSARTClockFreq+0x80>)
 8002b6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b6e:	e014      	b.n	8002b9a <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002b70:	f7ff ff2c 	bl	80029cc <LL_RCC_LSE_IsReady>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b80:	e00d      	b.n	8002b9e <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002b82:	f000 f815 	bl	8002bb0 <RCC_GetSystemClockFreq>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f837 	bl	8002bfc <RCC_GetHCLKClockFreq>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f849 	bl	8002c28 <RCC_GetPCLK1ClockFreq>
 8002b96:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002b98:	e002      	b.n	8002ba0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002b9e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	007a1200 	.word	0x007a1200

08002bb0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002bba:	f7ff ff19 	bl	80029f0 <LL_RCC_GetSysClkSource>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d00c      	beq.n	8002bde <RCC_GetSystemClockFreq+0x2e>
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d80e      	bhi.n	8002be6 <RCC_GetSystemClockFreq+0x36>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <RCC_GetSystemClockFreq+0x22>
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d003      	beq.n	8002bd8 <RCC_GetSystemClockFreq+0x28>
 8002bd0:	e009      	b.n	8002be6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <RCC_GetSystemClockFreq+0x48>)
 8002bd4:	607b      	str	r3, [r7, #4]
      break;
 8002bd6:	e009      	b.n	8002bec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <RCC_GetSystemClockFreq+0x48>)
 8002bda:	607b      	str	r3, [r7, #4]
      break;
 8002bdc:	e006      	b.n	8002bec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002bde:	f000 f84b 	bl	8002c78 <RCC_PLL_GetFreqDomain_SYS>
 8002be2:	6078      	str	r0, [r7, #4]
      break;
 8002be4:	e002      	b.n	8002bec <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <RCC_GetSystemClockFreq+0x48>)
 8002be8:	607b      	str	r3, [r7, #4]
      break;
 8002bea:	bf00      	nop
  }

  return frequency;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	007a1200 	.word	0x007a1200

08002bfc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c04:	f7ff ff02 	bl	8002a0c <LL_RCC_GetAHBPrescaler>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <RCC_GetHCLKClockFreq+0x28>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	40d3      	lsrs	r3, r2
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	08005cac 	.word	0x08005cac

08002c28 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c30:	f7ff fefa 	bl	8002a28 <LL_RCC_GetAPB1Prescaler>
 8002c34:	4603      	mov	r3, r0
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <RCC_GetPCLK1ClockFreq+0x24>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	40d3      	lsrs	r3, r2
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	08005cbc 	.word	0x08005cbc

08002c50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002c58:	f7ff fef4 	bl	8002a44 <LL_RCC_GetAPB2Prescaler>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	0adb      	lsrs	r3, r3, #11
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <RCC_GetPCLK2ClockFreq+0x24>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	40d3      	lsrs	r3, r2
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	08005cbc 	.word	0x08005cbc

08002c78 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002c86:	f7ff ff01 	bl	8002a8c <LL_RCC_PLL_GetMainSource>
 8002c8a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d003      	beq.n	8002ca2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002c9a:	e005      	b.n	8002ca8 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002c9e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002ca0:	e005      	b.n	8002cae <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002ca4:	60fb      	str	r3, [r7, #12]
      break;
 8002ca6:	e002      	b.n	8002cae <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002caa:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002cac:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002cae:	f7ff ff09 	bl	8002ac4 <LL_RCC_PLL_GetPrediv>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	fbb2 f4f3 	udiv	r4, r2, r3
 8002cbc:	f7ff fef4 	bl	8002aa8 <LL_RCC_PLL_GetMultiplicator>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cc6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cca:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	fa92 f2a2 	rbit	r2, r2
 8002cd2:	603a      	str	r2, [r7, #0]
  return result;
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	fab2 f282 	clz	r2, r2
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	40d3      	lsrs	r3, r2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd90      	pop	{r4, r7, pc}
 8002cec:	003d0900 	.word	0x003d0900
 8002cf0:	007a1200 	.word	0x007a1200

08002cf4 <LL_USART_IsEnabled>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <LL_USART_IsEnabled+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_USART_IsEnabled+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_USART_SetStopBitsLength>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	605a      	str	r2, [r3, #4]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_USART_SetHWFlowCtrl>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_USART_SetBaudRate>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d7a:	d11a      	bne.n	8002db2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	005a      	lsls	r2, r3, #1
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	441a      	add	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	60da      	str	r2, [r3, #12]
}
 8002db0:	e00a      	b.n	8002dc8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	085a      	lsrs	r2, r3, #1
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	441a      	add	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	60da      	str	r2, [r3, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff84 	bl	8002cf4 <LL_USART_IsEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d14e      	bne.n	8002e90 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <LL_USART_Init+0xc8>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	6851      	ldr	r1, [r2, #4]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	4311      	orrs	r1, r2
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	6912      	ldr	r2, [r2, #16]
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	6992      	ldr	r2, [r2, #24]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff ff7c 	bl	8002d1a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff89 	bl	8002d40 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <LL_USART_Init+0xcc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d104      	bne.n	8002e40 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7ff fe78 	bl	8002b2c <LL_RCC_GetUSARTClockFreq>
 8002e3c:	61b8      	str	r0, [r7, #24]
 8002e3e:	e016      	b.n	8002e6e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <LL_USART_Init+0xd0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d107      	bne.n	8002e58 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe47 	bl	8002ae0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e00a      	b.n	8002e6e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <LL_USART_Init+0xd4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d106      	bne.n	8002e6e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fe3b 	bl	8002ae0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002e88:	69b9      	ldr	r1, [r7, #24]
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff6b 	bl	8002d66 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002e90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	efff69f3 	.word	0xefff69f3
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40004400 	.word	0x40004400
 8002ea8:	40004800 	.word	0x40004800

08002eac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <LL_InitTick+0x30>)
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <LL_InitTick+0x30>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <LL_InitTick+0x30>)
 8002ecc:	2205      	movs	r2, #5
 8002ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002ee8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffdd 	bl	8002eac <LL_InitTick>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <LL_mDelay+0x48>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002f0a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d00c      	beq.n	8002f2e <LL_mDelay+0x32>
  {
    Delay++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002f1a:	e008      	b.n	8002f2e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <LL_mDelay+0x48>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <LL_mDelay+0x32>
    {
      Delay--;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f3      	bne.n	8002f1c <LL_mDelay+0x20>
    }
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <LL_SetSystemCoreClock+0x1c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <__cvt>:
 8002f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	ec55 4b10 	vmov	r4, r5, d0
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	460e      	mov	r6, r1
 8002f74:	4619      	mov	r1, r3
 8002f76:	462b      	mov	r3, r5
 8002f78:	bfbb      	ittet	lt
 8002f7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002f7e:	461d      	movlt	r5, r3
 8002f80:	2300      	movge	r3, #0
 8002f82:	232d      	movlt	r3, #45	; 0x2d
 8002f84:	700b      	strb	r3, [r1, #0]
 8002f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002f8c:	4691      	mov	r9, r2
 8002f8e:	f023 0820 	bic.w	r8, r3, #32
 8002f92:	bfbc      	itt	lt
 8002f94:	4622      	movlt	r2, r4
 8002f96:	4614      	movlt	r4, r2
 8002f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f9c:	d005      	beq.n	8002faa <__cvt+0x42>
 8002f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002fa2:	d100      	bne.n	8002fa6 <__cvt+0x3e>
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	e000      	b.n	8002fac <__cvt+0x44>
 8002faa:	2103      	movs	r1, #3
 8002fac:	ab03      	add	r3, sp, #12
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	ab02      	add	r3, sp, #8
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	ec45 4b10 	vmov	d0, r4, r5
 8002fb8:	4653      	mov	r3, sl
 8002fba:	4632      	mov	r2, r6
 8002fbc:	f000 fe68 	bl	8003c90 <_dtoa_r>
 8002fc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002fc4:	4607      	mov	r7, r0
 8002fc6:	d102      	bne.n	8002fce <__cvt+0x66>
 8002fc8:	f019 0f01 	tst.w	r9, #1
 8002fcc:	d022      	beq.n	8003014 <__cvt+0xac>
 8002fce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002fd2:	eb07 0906 	add.w	r9, r7, r6
 8002fd6:	d110      	bne.n	8002ffa <__cvt+0x92>
 8002fd8:	783b      	ldrb	r3, [r7, #0]
 8002fda:	2b30      	cmp	r3, #48	; 0x30
 8002fdc:	d10a      	bne.n	8002ff4 <__cvt+0x8c>
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7fd fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002fea:	b918      	cbnz	r0, 8002ff4 <__cvt+0x8c>
 8002fec:	f1c6 0601 	rsb	r6, r6, #1
 8002ff0:	f8ca 6000 	str.w	r6, [sl]
 8002ff4:	f8da 3000 	ldr.w	r3, [sl]
 8002ff8:	4499      	add	r9, r3
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8003006:	b108      	cbz	r0, 800300c <__cvt+0xa4>
 8003008:	f8cd 900c 	str.w	r9, [sp, #12]
 800300c:	2230      	movs	r2, #48	; 0x30
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	454b      	cmp	r3, r9
 8003012:	d307      	bcc.n	8003024 <__cvt+0xbc>
 8003014:	9b03      	ldr	r3, [sp, #12]
 8003016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003018:	1bdb      	subs	r3, r3, r7
 800301a:	4638      	mov	r0, r7
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	b004      	add	sp, #16
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	1c59      	adds	r1, r3, #1
 8003026:	9103      	str	r1, [sp, #12]
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e7f0      	b.n	800300e <__cvt+0xa6>

0800302c <__exponent>:
 800302c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800302e:	4603      	mov	r3, r0
 8003030:	2900      	cmp	r1, #0
 8003032:	bfb8      	it	lt
 8003034:	4249      	neglt	r1, r1
 8003036:	f803 2b02 	strb.w	r2, [r3], #2
 800303a:	bfb4      	ite	lt
 800303c:	222d      	movlt	r2, #45	; 0x2d
 800303e:	222b      	movge	r2, #43	; 0x2b
 8003040:	2909      	cmp	r1, #9
 8003042:	7042      	strb	r2, [r0, #1]
 8003044:	dd2a      	ble.n	800309c <__exponent+0x70>
 8003046:	f10d 0207 	add.w	r2, sp, #7
 800304a:	4617      	mov	r7, r2
 800304c:	260a      	movs	r6, #10
 800304e:	4694      	mov	ip, r2
 8003050:	fb91 f5f6 	sdiv	r5, r1, r6
 8003054:	fb06 1415 	mls	r4, r6, r5, r1
 8003058:	3430      	adds	r4, #48	; 0x30
 800305a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800305e:	460c      	mov	r4, r1
 8003060:	2c63      	cmp	r4, #99	; 0x63
 8003062:	f102 32ff 	add.w	r2, r2, #4294967295
 8003066:	4629      	mov	r1, r5
 8003068:	dcf1      	bgt.n	800304e <__exponent+0x22>
 800306a:	3130      	adds	r1, #48	; 0x30
 800306c:	f1ac 0402 	sub.w	r4, ip, #2
 8003070:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003074:	1c41      	adds	r1, r0, #1
 8003076:	4622      	mov	r2, r4
 8003078:	42ba      	cmp	r2, r7
 800307a:	d30a      	bcc.n	8003092 <__exponent+0x66>
 800307c:	f10d 0209 	add.w	r2, sp, #9
 8003080:	eba2 020c 	sub.w	r2, r2, ip
 8003084:	42bc      	cmp	r4, r7
 8003086:	bf88      	it	hi
 8003088:	2200      	movhi	r2, #0
 800308a:	4413      	add	r3, r2
 800308c:	1a18      	subs	r0, r3, r0
 800308e:	b003      	add	sp, #12
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003092:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003096:	f801 5f01 	strb.w	r5, [r1, #1]!
 800309a:	e7ed      	b.n	8003078 <__exponent+0x4c>
 800309c:	2330      	movs	r3, #48	; 0x30
 800309e:	3130      	adds	r1, #48	; 0x30
 80030a0:	7083      	strb	r3, [r0, #2]
 80030a2:	70c1      	strb	r1, [r0, #3]
 80030a4:	1d03      	adds	r3, r0, #4
 80030a6:	e7f1      	b.n	800308c <__exponent+0x60>

080030a8 <_printf_float>:
 80030a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	ed2d 8b02 	vpush	{d8}
 80030b0:	b08d      	sub	sp, #52	; 0x34
 80030b2:	460c      	mov	r4, r1
 80030b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80030b8:	4616      	mov	r6, r2
 80030ba:	461f      	mov	r7, r3
 80030bc:	4605      	mov	r5, r0
 80030be:	f000 fce7 	bl	8003a90 <_localeconv_r>
 80030c2:	f8d0 a000 	ldr.w	sl, [r0]
 80030c6:	4650      	mov	r0, sl
 80030c8:	f7fd f8d2 	bl	8000270 <strlen>
 80030cc:	2300      	movs	r3, #0
 80030ce:	930a      	str	r3, [sp, #40]	; 0x28
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	9305      	str	r3, [sp, #20]
 80030d4:	f8d8 3000 	ldr.w	r3, [r8]
 80030d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80030dc:	3307      	adds	r3, #7
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	f103 0208 	add.w	r2, r3, #8
 80030e6:	f8c8 2000 	str.w	r2, [r8]
 80030ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80030f2:	9307      	str	r3, [sp, #28]
 80030f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80030f8:	ee08 0a10 	vmov	s16, r0
 80030fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003104:	4b9e      	ldr	r3, [pc, #632]	; (8003380 <_printf_float+0x2d8>)
 8003106:	f04f 32ff 	mov.w	r2, #4294967295
 800310a:	f7fd fd0f 	bl	8000b2c <__aeabi_dcmpun>
 800310e:	bb88      	cbnz	r0, 8003174 <_printf_float+0xcc>
 8003110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003114:	4b9a      	ldr	r3, [pc, #616]	; (8003380 <_printf_float+0x2d8>)
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	f7fd fce9 	bl	8000af0 <__aeabi_dcmple>
 800311e:	bb48      	cbnz	r0, 8003174 <_printf_float+0xcc>
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	4640      	mov	r0, r8
 8003126:	4649      	mov	r1, r9
 8003128:	f7fd fcd8 	bl	8000adc <__aeabi_dcmplt>
 800312c:	b110      	cbz	r0, 8003134 <_printf_float+0x8c>
 800312e:	232d      	movs	r3, #45	; 0x2d
 8003130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003134:	4a93      	ldr	r2, [pc, #588]	; (8003384 <_printf_float+0x2dc>)
 8003136:	4b94      	ldr	r3, [pc, #592]	; (8003388 <_printf_float+0x2e0>)
 8003138:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800313c:	bf94      	ite	ls
 800313e:	4690      	movls	r8, r2
 8003140:	4698      	movhi	r8, r3
 8003142:	2303      	movs	r3, #3
 8003144:	6123      	str	r3, [r4, #16]
 8003146:	9b05      	ldr	r3, [sp, #20]
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	f04f 0900 	mov.w	r9, #0
 8003152:	9700      	str	r7, [sp, #0]
 8003154:	4633      	mov	r3, r6
 8003156:	aa0b      	add	r2, sp, #44	; 0x2c
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f9da 	bl	8003514 <_printf_common>
 8003160:	3001      	adds	r0, #1
 8003162:	f040 8090 	bne.w	8003286 <_printf_float+0x1de>
 8003166:	f04f 30ff 	mov.w	r0, #4294967295
 800316a:	b00d      	add	sp, #52	; 0x34
 800316c:	ecbd 8b02 	vpop	{d8}
 8003170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	4640      	mov	r0, r8
 800317a:	4649      	mov	r1, r9
 800317c:	f7fd fcd6 	bl	8000b2c <__aeabi_dcmpun>
 8003180:	b140      	cbz	r0, 8003194 <_printf_float+0xec>
 8003182:	464b      	mov	r3, r9
 8003184:	2b00      	cmp	r3, #0
 8003186:	bfbc      	itt	lt
 8003188:	232d      	movlt	r3, #45	; 0x2d
 800318a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800318e:	4a7f      	ldr	r2, [pc, #508]	; (800338c <_printf_float+0x2e4>)
 8003190:	4b7f      	ldr	r3, [pc, #508]	; (8003390 <_printf_float+0x2e8>)
 8003192:	e7d1      	b.n	8003138 <_printf_float+0x90>
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800319a:	9206      	str	r2, [sp, #24]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	d13f      	bne.n	8003220 <_printf_float+0x178>
 80031a0:	2306      	movs	r3, #6
 80031a2:	6063      	str	r3, [r4, #4]
 80031a4:	9b05      	ldr	r3, [sp, #20]
 80031a6:	6861      	ldr	r1, [r4, #4]
 80031a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80031ac:	2300      	movs	r3, #0
 80031ae:	9303      	str	r3, [sp, #12]
 80031b0:	ab0a      	add	r3, sp, #40	; 0x28
 80031b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80031b6:	ab09      	add	r3, sp, #36	; 0x24
 80031b8:	ec49 8b10 	vmov	d0, r8, r9
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6022      	str	r2, [r4, #0]
 80031c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80031c4:	4628      	mov	r0, r5
 80031c6:	f7ff fecf 	bl	8002f68 <__cvt>
 80031ca:	9b06      	ldr	r3, [sp, #24]
 80031cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80031ce:	2b47      	cmp	r3, #71	; 0x47
 80031d0:	4680      	mov	r8, r0
 80031d2:	d108      	bne.n	80031e6 <_printf_float+0x13e>
 80031d4:	1cc8      	adds	r0, r1, #3
 80031d6:	db02      	blt.n	80031de <_printf_float+0x136>
 80031d8:	6863      	ldr	r3, [r4, #4]
 80031da:	4299      	cmp	r1, r3
 80031dc:	dd41      	ble.n	8003262 <_printf_float+0x1ba>
 80031de:	f1ab 0302 	sub.w	r3, fp, #2
 80031e2:	fa5f fb83 	uxtb.w	fp, r3
 80031e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80031ea:	d820      	bhi.n	800322e <_printf_float+0x186>
 80031ec:	3901      	subs	r1, #1
 80031ee:	465a      	mov	r2, fp
 80031f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031f4:	9109      	str	r1, [sp, #36]	; 0x24
 80031f6:	f7ff ff19 	bl	800302c <__exponent>
 80031fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031fc:	1813      	adds	r3, r2, r0
 80031fe:	2a01      	cmp	r2, #1
 8003200:	4681      	mov	r9, r0
 8003202:	6123      	str	r3, [r4, #16]
 8003204:	dc02      	bgt.n	800320c <_printf_float+0x164>
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	07d2      	lsls	r2, r2, #31
 800320a:	d501      	bpl.n	8003210 <_printf_float+0x168>
 800320c:	3301      	adds	r3, #1
 800320e:	6123      	str	r3, [r4, #16]
 8003210:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003214:	2b00      	cmp	r3, #0
 8003216:	d09c      	beq.n	8003152 <_printf_float+0xaa>
 8003218:	232d      	movs	r3, #45	; 0x2d
 800321a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800321e:	e798      	b.n	8003152 <_printf_float+0xaa>
 8003220:	9a06      	ldr	r2, [sp, #24]
 8003222:	2a47      	cmp	r2, #71	; 0x47
 8003224:	d1be      	bne.n	80031a4 <_printf_float+0xfc>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1bc      	bne.n	80031a4 <_printf_float+0xfc>
 800322a:	2301      	movs	r3, #1
 800322c:	e7b9      	b.n	80031a2 <_printf_float+0xfa>
 800322e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003232:	d118      	bne.n	8003266 <_printf_float+0x1be>
 8003234:	2900      	cmp	r1, #0
 8003236:	6863      	ldr	r3, [r4, #4]
 8003238:	dd0b      	ble.n	8003252 <_printf_float+0x1aa>
 800323a:	6121      	str	r1, [r4, #16]
 800323c:	b913      	cbnz	r3, 8003244 <_printf_float+0x19c>
 800323e:	6822      	ldr	r2, [r4, #0]
 8003240:	07d0      	lsls	r0, r2, #31
 8003242:	d502      	bpl.n	800324a <_printf_float+0x1a2>
 8003244:	3301      	adds	r3, #1
 8003246:	440b      	add	r3, r1
 8003248:	6123      	str	r3, [r4, #16]
 800324a:	65a1      	str	r1, [r4, #88]	; 0x58
 800324c:	f04f 0900 	mov.w	r9, #0
 8003250:	e7de      	b.n	8003210 <_printf_float+0x168>
 8003252:	b913      	cbnz	r3, 800325a <_printf_float+0x1b2>
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	07d2      	lsls	r2, r2, #31
 8003258:	d501      	bpl.n	800325e <_printf_float+0x1b6>
 800325a:	3302      	adds	r3, #2
 800325c:	e7f4      	b.n	8003248 <_printf_float+0x1a0>
 800325e:	2301      	movs	r3, #1
 8003260:	e7f2      	b.n	8003248 <_printf_float+0x1a0>
 8003262:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003268:	4299      	cmp	r1, r3
 800326a:	db05      	blt.n	8003278 <_printf_float+0x1d0>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	6121      	str	r1, [r4, #16]
 8003270:	07d8      	lsls	r0, r3, #31
 8003272:	d5ea      	bpl.n	800324a <_printf_float+0x1a2>
 8003274:	1c4b      	adds	r3, r1, #1
 8003276:	e7e7      	b.n	8003248 <_printf_float+0x1a0>
 8003278:	2900      	cmp	r1, #0
 800327a:	bfd4      	ite	le
 800327c:	f1c1 0202 	rsble	r2, r1, #2
 8003280:	2201      	movgt	r2, #1
 8003282:	4413      	add	r3, r2
 8003284:	e7e0      	b.n	8003248 <_printf_float+0x1a0>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	055a      	lsls	r2, r3, #21
 800328a:	d407      	bmi.n	800329c <_printf_float+0x1f4>
 800328c:	6923      	ldr	r3, [r4, #16]
 800328e:	4642      	mov	r2, r8
 8003290:	4631      	mov	r1, r6
 8003292:	4628      	mov	r0, r5
 8003294:	47b8      	blx	r7
 8003296:	3001      	adds	r0, #1
 8003298:	d12c      	bne.n	80032f4 <_printf_float+0x24c>
 800329a:	e764      	b.n	8003166 <_printf_float+0xbe>
 800329c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032a0:	f240 80e0 	bls.w	8003464 <_printf_float+0x3bc>
 80032a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032a8:	2200      	movs	r2, #0
 80032aa:	2300      	movs	r3, #0
 80032ac:	f7fd fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d034      	beq.n	800331e <_printf_float+0x276>
 80032b4:	4a37      	ldr	r2, [pc, #220]	; (8003394 <_printf_float+0x2ec>)
 80032b6:	2301      	movs	r3, #1
 80032b8:	4631      	mov	r1, r6
 80032ba:	4628      	mov	r0, r5
 80032bc:	47b8      	blx	r7
 80032be:	3001      	adds	r0, #1
 80032c0:	f43f af51 	beq.w	8003166 <_printf_float+0xbe>
 80032c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032c8:	429a      	cmp	r2, r3
 80032ca:	db02      	blt.n	80032d2 <_printf_float+0x22a>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	07d8      	lsls	r0, r3, #31
 80032d0:	d510      	bpl.n	80032f4 <_printf_float+0x24c>
 80032d2:	ee18 3a10 	vmov	r3, s16
 80032d6:	4652      	mov	r2, sl
 80032d8:	4631      	mov	r1, r6
 80032da:	4628      	mov	r0, r5
 80032dc:	47b8      	blx	r7
 80032de:	3001      	adds	r0, #1
 80032e0:	f43f af41 	beq.w	8003166 <_printf_float+0xbe>
 80032e4:	f04f 0800 	mov.w	r8, #0
 80032e8:	f104 091a 	add.w	r9, r4, #26
 80032ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	4543      	cmp	r3, r8
 80032f2:	dc09      	bgt.n	8003308 <_printf_float+0x260>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	079b      	lsls	r3, r3, #30
 80032f8:	f100 8107 	bmi.w	800350a <_printf_float+0x462>
 80032fc:	68e0      	ldr	r0, [r4, #12]
 80032fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003300:	4298      	cmp	r0, r3
 8003302:	bfb8      	it	lt
 8003304:	4618      	movlt	r0, r3
 8003306:	e730      	b.n	800316a <_printf_float+0xc2>
 8003308:	2301      	movs	r3, #1
 800330a:	464a      	mov	r2, r9
 800330c:	4631      	mov	r1, r6
 800330e:	4628      	mov	r0, r5
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	f43f af27 	beq.w	8003166 <_printf_float+0xbe>
 8003318:	f108 0801 	add.w	r8, r8, #1
 800331c:	e7e6      	b.n	80032ec <_printf_float+0x244>
 800331e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	dc39      	bgt.n	8003398 <_printf_float+0x2f0>
 8003324:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <_printf_float+0x2ec>)
 8003326:	2301      	movs	r3, #1
 8003328:	4631      	mov	r1, r6
 800332a:	4628      	mov	r0, r5
 800332c:	47b8      	blx	r7
 800332e:	3001      	adds	r0, #1
 8003330:	f43f af19 	beq.w	8003166 <_printf_float+0xbe>
 8003334:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003338:	4313      	orrs	r3, r2
 800333a:	d102      	bne.n	8003342 <_printf_float+0x29a>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	07d9      	lsls	r1, r3, #31
 8003340:	d5d8      	bpl.n	80032f4 <_printf_float+0x24c>
 8003342:	ee18 3a10 	vmov	r3, s16
 8003346:	4652      	mov	r2, sl
 8003348:	4631      	mov	r1, r6
 800334a:	4628      	mov	r0, r5
 800334c:	47b8      	blx	r7
 800334e:	3001      	adds	r0, #1
 8003350:	f43f af09 	beq.w	8003166 <_printf_float+0xbe>
 8003354:	f04f 0900 	mov.w	r9, #0
 8003358:	f104 0a1a 	add.w	sl, r4, #26
 800335c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800335e:	425b      	negs	r3, r3
 8003360:	454b      	cmp	r3, r9
 8003362:	dc01      	bgt.n	8003368 <_printf_float+0x2c0>
 8003364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003366:	e792      	b.n	800328e <_printf_float+0x1e6>
 8003368:	2301      	movs	r3, #1
 800336a:	4652      	mov	r2, sl
 800336c:	4631      	mov	r1, r6
 800336e:	4628      	mov	r0, r5
 8003370:	47b8      	blx	r7
 8003372:	3001      	adds	r0, #1
 8003374:	f43f aef7 	beq.w	8003166 <_printf_float+0xbe>
 8003378:	f109 0901 	add.w	r9, r9, #1
 800337c:	e7ee      	b.n	800335c <_printf_float+0x2b4>
 800337e:	bf00      	nop
 8003380:	7fefffff 	.word	0x7fefffff
 8003384:	08005ccb 	.word	0x08005ccb
 8003388:	08005ccf 	.word	0x08005ccf
 800338c:	08005cd3 	.word	0x08005cd3
 8003390:	08005cd7 	.word	0x08005cd7
 8003394:	08005cdb 	.word	0x08005cdb
 8003398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800339a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800339c:	429a      	cmp	r2, r3
 800339e:	bfa8      	it	ge
 80033a0:	461a      	movge	r2, r3
 80033a2:	2a00      	cmp	r2, #0
 80033a4:	4691      	mov	r9, r2
 80033a6:	dc37      	bgt.n	8003418 <_printf_float+0x370>
 80033a8:	f04f 0b00 	mov.w	fp, #0
 80033ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033b0:	f104 021a 	add.w	r2, r4, #26
 80033b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b6:	9305      	str	r3, [sp, #20]
 80033b8:	eba3 0309 	sub.w	r3, r3, r9
 80033bc:	455b      	cmp	r3, fp
 80033be:	dc33      	bgt.n	8003428 <_printf_float+0x380>
 80033c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033c4:	429a      	cmp	r2, r3
 80033c6:	db3b      	blt.n	8003440 <_printf_float+0x398>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	07da      	lsls	r2, r3, #31
 80033cc:	d438      	bmi.n	8003440 <_printf_float+0x398>
 80033ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80033d2:	eba2 0903 	sub.w	r9, r2, r3
 80033d6:	9b05      	ldr	r3, [sp, #20]
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	4591      	cmp	r9, r2
 80033dc:	bfa8      	it	ge
 80033de:	4691      	movge	r9, r2
 80033e0:	f1b9 0f00 	cmp.w	r9, #0
 80033e4:	dc35      	bgt.n	8003452 <_printf_float+0x3aa>
 80033e6:	f04f 0800 	mov.w	r8, #0
 80033ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033ee:	f104 0a1a 	add.w	sl, r4, #26
 80033f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	eba3 0309 	sub.w	r3, r3, r9
 80033fc:	4543      	cmp	r3, r8
 80033fe:	f77f af79 	ble.w	80032f4 <_printf_float+0x24c>
 8003402:	2301      	movs	r3, #1
 8003404:	4652      	mov	r2, sl
 8003406:	4631      	mov	r1, r6
 8003408:	4628      	mov	r0, r5
 800340a:	47b8      	blx	r7
 800340c:	3001      	adds	r0, #1
 800340e:	f43f aeaa 	beq.w	8003166 <_printf_float+0xbe>
 8003412:	f108 0801 	add.w	r8, r8, #1
 8003416:	e7ec      	b.n	80033f2 <_printf_float+0x34a>
 8003418:	4613      	mov	r3, r2
 800341a:	4631      	mov	r1, r6
 800341c:	4642      	mov	r2, r8
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	d1c0      	bne.n	80033a8 <_printf_float+0x300>
 8003426:	e69e      	b.n	8003166 <_printf_float+0xbe>
 8003428:	2301      	movs	r3, #1
 800342a:	4631      	mov	r1, r6
 800342c:	4628      	mov	r0, r5
 800342e:	9205      	str	r2, [sp, #20]
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f ae97 	beq.w	8003166 <_printf_float+0xbe>
 8003438:	9a05      	ldr	r2, [sp, #20]
 800343a:	f10b 0b01 	add.w	fp, fp, #1
 800343e:	e7b9      	b.n	80033b4 <_printf_float+0x30c>
 8003440:	ee18 3a10 	vmov	r3, s16
 8003444:	4652      	mov	r2, sl
 8003446:	4631      	mov	r1, r6
 8003448:	4628      	mov	r0, r5
 800344a:	47b8      	blx	r7
 800344c:	3001      	adds	r0, #1
 800344e:	d1be      	bne.n	80033ce <_printf_float+0x326>
 8003450:	e689      	b.n	8003166 <_printf_float+0xbe>
 8003452:	9a05      	ldr	r2, [sp, #20]
 8003454:	464b      	mov	r3, r9
 8003456:	4442      	add	r2, r8
 8003458:	4631      	mov	r1, r6
 800345a:	4628      	mov	r0, r5
 800345c:	47b8      	blx	r7
 800345e:	3001      	adds	r0, #1
 8003460:	d1c1      	bne.n	80033e6 <_printf_float+0x33e>
 8003462:	e680      	b.n	8003166 <_printf_float+0xbe>
 8003464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003466:	2a01      	cmp	r2, #1
 8003468:	dc01      	bgt.n	800346e <_printf_float+0x3c6>
 800346a:	07db      	lsls	r3, r3, #31
 800346c:	d53a      	bpl.n	80034e4 <_printf_float+0x43c>
 800346e:	2301      	movs	r3, #1
 8003470:	4642      	mov	r2, r8
 8003472:	4631      	mov	r1, r6
 8003474:	4628      	mov	r0, r5
 8003476:	47b8      	blx	r7
 8003478:	3001      	adds	r0, #1
 800347a:	f43f ae74 	beq.w	8003166 <_printf_float+0xbe>
 800347e:	ee18 3a10 	vmov	r3, s16
 8003482:	4652      	mov	r2, sl
 8003484:	4631      	mov	r1, r6
 8003486:	4628      	mov	r0, r5
 8003488:	47b8      	blx	r7
 800348a:	3001      	adds	r0, #1
 800348c:	f43f ae6b 	beq.w	8003166 <_printf_float+0xbe>
 8003490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003494:	2200      	movs	r2, #0
 8003496:	2300      	movs	r3, #0
 8003498:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800349c:	f7fd fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80034a0:	b9d8      	cbnz	r0, 80034da <_printf_float+0x432>
 80034a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80034a6:	f108 0201 	add.w	r2, r8, #1
 80034aa:	4631      	mov	r1, r6
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b8      	blx	r7
 80034b0:	3001      	adds	r0, #1
 80034b2:	d10e      	bne.n	80034d2 <_printf_float+0x42a>
 80034b4:	e657      	b.n	8003166 <_printf_float+0xbe>
 80034b6:	2301      	movs	r3, #1
 80034b8:	4652      	mov	r2, sl
 80034ba:	4631      	mov	r1, r6
 80034bc:	4628      	mov	r0, r5
 80034be:	47b8      	blx	r7
 80034c0:	3001      	adds	r0, #1
 80034c2:	f43f ae50 	beq.w	8003166 <_printf_float+0xbe>
 80034c6:	f108 0801 	add.w	r8, r8, #1
 80034ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	4543      	cmp	r3, r8
 80034d0:	dcf1      	bgt.n	80034b6 <_printf_float+0x40e>
 80034d2:	464b      	mov	r3, r9
 80034d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80034d8:	e6da      	b.n	8003290 <_printf_float+0x1e8>
 80034da:	f04f 0800 	mov.w	r8, #0
 80034de:	f104 0a1a 	add.w	sl, r4, #26
 80034e2:	e7f2      	b.n	80034ca <_printf_float+0x422>
 80034e4:	2301      	movs	r3, #1
 80034e6:	4642      	mov	r2, r8
 80034e8:	e7df      	b.n	80034aa <_printf_float+0x402>
 80034ea:	2301      	movs	r3, #1
 80034ec:	464a      	mov	r2, r9
 80034ee:	4631      	mov	r1, r6
 80034f0:	4628      	mov	r0, r5
 80034f2:	47b8      	blx	r7
 80034f4:	3001      	adds	r0, #1
 80034f6:	f43f ae36 	beq.w	8003166 <_printf_float+0xbe>
 80034fa:	f108 0801 	add.w	r8, r8, #1
 80034fe:	68e3      	ldr	r3, [r4, #12]
 8003500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003502:	1a5b      	subs	r3, r3, r1
 8003504:	4543      	cmp	r3, r8
 8003506:	dcf0      	bgt.n	80034ea <_printf_float+0x442>
 8003508:	e6f8      	b.n	80032fc <_printf_float+0x254>
 800350a:	f04f 0800 	mov.w	r8, #0
 800350e:	f104 0919 	add.w	r9, r4, #25
 8003512:	e7f4      	b.n	80034fe <_printf_float+0x456>

08003514 <_printf_common>:
 8003514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	4616      	mov	r6, r2
 800351a:	4699      	mov	r9, r3
 800351c:	688a      	ldr	r2, [r1, #8]
 800351e:	690b      	ldr	r3, [r1, #16]
 8003520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003524:	4293      	cmp	r3, r2
 8003526:	bfb8      	it	lt
 8003528:	4613      	movlt	r3, r2
 800352a:	6033      	str	r3, [r6, #0]
 800352c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003530:	4607      	mov	r7, r0
 8003532:	460c      	mov	r4, r1
 8003534:	b10a      	cbz	r2, 800353a <_printf_common+0x26>
 8003536:	3301      	adds	r3, #1
 8003538:	6033      	str	r3, [r6, #0]
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	0699      	lsls	r1, r3, #26
 800353e:	bf42      	ittt	mi
 8003540:	6833      	ldrmi	r3, [r6, #0]
 8003542:	3302      	addmi	r3, #2
 8003544:	6033      	strmi	r3, [r6, #0]
 8003546:	6825      	ldr	r5, [r4, #0]
 8003548:	f015 0506 	ands.w	r5, r5, #6
 800354c:	d106      	bne.n	800355c <_printf_common+0x48>
 800354e:	f104 0a19 	add.w	sl, r4, #25
 8003552:	68e3      	ldr	r3, [r4, #12]
 8003554:	6832      	ldr	r2, [r6, #0]
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	42ab      	cmp	r3, r5
 800355a:	dc26      	bgt.n	80035aa <_printf_common+0x96>
 800355c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003560:	1e13      	subs	r3, r2, #0
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	bf18      	it	ne
 8003566:	2301      	movne	r3, #1
 8003568:	0692      	lsls	r2, r2, #26
 800356a:	d42b      	bmi.n	80035c4 <_printf_common+0xb0>
 800356c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003570:	4649      	mov	r1, r9
 8003572:	4638      	mov	r0, r7
 8003574:	47c0      	blx	r8
 8003576:	3001      	adds	r0, #1
 8003578:	d01e      	beq.n	80035b8 <_printf_common+0xa4>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	6922      	ldr	r2, [r4, #16]
 800357e:	f003 0306 	and.w	r3, r3, #6
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf02      	ittt	eq
 8003586:	68e5      	ldreq	r5, [r4, #12]
 8003588:	6833      	ldreq	r3, [r6, #0]
 800358a:	1aed      	subeq	r5, r5, r3
 800358c:	68a3      	ldr	r3, [r4, #8]
 800358e:	bf0c      	ite	eq
 8003590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003594:	2500      	movne	r5, #0
 8003596:	4293      	cmp	r3, r2
 8003598:	bfc4      	itt	gt
 800359a:	1a9b      	subgt	r3, r3, r2
 800359c:	18ed      	addgt	r5, r5, r3
 800359e:	2600      	movs	r6, #0
 80035a0:	341a      	adds	r4, #26
 80035a2:	42b5      	cmp	r5, r6
 80035a4:	d11a      	bne.n	80035dc <_printf_common+0xc8>
 80035a6:	2000      	movs	r0, #0
 80035a8:	e008      	b.n	80035bc <_printf_common+0xa8>
 80035aa:	2301      	movs	r3, #1
 80035ac:	4652      	mov	r2, sl
 80035ae:	4649      	mov	r1, r9
 80035b0:	4638      	mov	r0, r7
 80035b2:	47c0      	blx	r8
 80035b4:	3001      	adds	r0, #1
 80035b6:	d103      	bne.n	80035c0 <_printf_common+0xac>
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c0:	3501      	adds	r5, #1
 80035c2:	e7c6      	b.n	8003552 <_printf_common+0x3e>
 80035c4:	18e1      	adds	r1, r4, r3
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	2030      	movs	r0, #48	; 0x30
 80035ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035ce:	4422      	add	r2, r4
 80035d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035d8:	3302      	adds	r3, #2
 80035da:	e7c7      	b.n	800356c <_printf_common+0x58>
 80035dc:	2301      	movs	r3, #1
 80035de:	4622      	mov	r2, r4
 80035e0:	4649      	mov	r1, r9
 80035e2:	4638      	mov	r0, r7
 80035e4:	47c0      	blx	r8
 80035e6:	3001      	adds	r0, #1
 80035e8:	d0e6      	beq.n	80035b8 <_printf_common+0xa4>
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7d9      	b.n	80035a2 <_printf_common+0x8e>
	...

080035f0 <_printf_i>:
 80035f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035f4:	7e0f      	ldrb	r7, [r1, #24]
 80035f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035f8:	2f78      	cmp	r7, #120	; 0x78
 80035fa:	4691      	mov	r9, r2
 80035fc:	4680      	mov	r8, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	469a      	mov	sl, r3
 8003602:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003606:	d807      	bhi.n	8003618 <_printf_i+0x28>
 8003608:	2f62      	cmp	r7, #98	; 0x62
 800360a:	d80a      	bhi.n	8003622 <_printf_i+0x32>
 800360c:	2f00      	cmp	r7, #0
 800360e:	f000 80d4 	beq.w	80037ba <_printf_i+0x1ca>
 8003612:	2f58      	cmp	r7, #88	; 0x58
 8003614:	f000 80c0 	beq.w	8003798 <_printf_i+0x1a8>
 8003618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800361c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003620:	e03a      	b.n	8003698 <_printf_i+0xa8>
 8003622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003626:	2b15      	cmp	r3, #21
 8003628:	d8f6      	bhi.n	8003618 <_printf_i+0x28>
 800362a:	a101      	add	r1, pc, #4	; (adr r1, 8003630 <_printf_i+0x40>)
 800362c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003630:	08003689 	.word	0x08003689
 8003634:	0800369d 	.word	0x0800369d
 8003638:	08003619 	.word	0x08003619
 800363c:	08003619 	.word	0x08003619
 8003640:	08003619 	.word	0x08003619
 8003644:	08003619 	.word	0x08003619
 8003648:	0800369d 	.word	0x0800369d
 800364c:	08003619 	.word	0x08003619
 8003650:	08003619 	.word	0x08003619
 8003654:	08003619 	.word	0x08003619
 8003658:	08003619 	.word	0x08003619
 800365c:	080037a1 	.word	0x080037a1
 8003660:	080036c9 	.word	0x080036c9
 8003664:	0800375b 	.word	0x0800375b
 8003668:	08003619 	.word	0x08003619
 800366c:	08003619 	.word	0x08003619
 8003670:	080037c3 	.word	0x080037c3
 8003674:	08003619 	.word	0x08003619
 8003678:	080036c9 	.word	0x080036c9
 800367c:	08003619 	.word	0x08003619
 8003680:	08003619 	.word	0x08003619
 8003684:	08003763 	.word	0x08003763
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	1d1a      	adds	r2, r3, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	602a      	str	r2, [r5, #0]
 8003690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003698:	2301      	movs	r3, #1
 800369a:	e09f      	b.n	80037dc <_printf_i+0x1ec>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	0607      	lsls	r7, r0, #24
 80036a2:	f103 0104 	add.w	r1, r3, #4
 80036a6:	6029      	str	r1, [r5, #0]
 80036a8:	d501      	bpl.n	80036ae <_printf_i+0xbe>
 80036aa:	681e      	ldr	r6, [r3, #0]
 80036ac:	e003      	b.n	80036b6 <_printf_i+0xc6>
 80036ae:	0646      	lsls	r6, r0, #25
 80036b0:	d5fb      	bpl.n	80036aa <_printf_i+0xba>
 80036b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	da03      	bge.n	80036c2 <_printf_i+0xd2>
 80036ba:	232d      	movs	r3, #45	; 0x2d
 80036bc:	4276      	negs	r6, r6
 80036be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c2:	485a      	ldr	r0, [pc, #360]	; (800382c <_printf_i+0x23c>)
 80036c4:	230a      	movs	r3, #10
 80036c6:	e012      	b.n	80036ee <_printf_i+0xfe>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	1d19      	adds	r1, r3, #4
 80036ce:	6029      	str	r1, [r5, #0]
 80036d0:	0605      	lsls	r5, r0, #24
 80036d2:	d501      	bpl.n	80036d8 <_printf_i+0xe8>
 80036d4:	681e      	ldr	r6, [r3, #0]
 80036d6:	e002      	b.n	80036de <_printf_i+0xee>
 80036d8:	0641      	lsls	r1, r0, #25
 80036da:	d5fb      	bpl.n	80036d4 <_printf_i+0xe4>
 80036dc:	881e      	ldrh	r6, [r3, #0]
 80036de:	4853      	ldr	r0, [pc, #332]	; (800382c <_printf_i+0x23c>)
 80036e0:	2f6f      	cmp	r7, #111	; 0x6f
 80036e2:	bf0c      	ite	eq
 80036e4:	2308      	moveq	r3, #8
 80036e6:	230a      	movne	r3, #10
 80036e8:	2100      	movs	r1, #0
 80036ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036ee:	6865      	ldr	r5, [r4, #4]
 80036f0:	60a5      	str	r5, [r4, #8]
 80036f2:	2d00      	cmp	r5, #0
 80036f4:	bfa2      	ittt	ge
 80036f6:	6821      	ldrge	r1, [r4, #0]
 80036f8:	f021 0104 	bicge.w	r1, r1, #4
 80036fc:	6021      	strge	r1, [r4, #0]
 80036fe:	b90e      	cbnz	r6, 8003704 <_printf_i+0x114>
 8003700:	2d00      	cmp	r5, #0
 8003702:	d04b      	beq.n	800379c <_printf_i+0x1ac>
 8003704:	4615      	mov	r5, r2
 8003706:	fbb6 f1f3 	udiv	r1, r6, r3
 800370a:	fb03 6711 	mls	r7, r3, r1, r6
 800370e:	5dc7      	ldrb	r7, [r0, r7]
 8003710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003714:	4637      	mov	r7, r6
 8003716:	42bb      	cmp	r3, r7
 8003718:	460e      	mov	r6, r1
 800371a:	d9f4      	bls.n	8003706 <_printf_i+0x116>
 800371c:	2b08      	cmp	r3, #8
 800371e:	d10b      	bne.n	8003738 <_printf_i+0x148>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	07de      	lsls	r6, r3, #31
 8003724:	d508      	bpl.n	8003738 <_printf_i+0x148>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	6861      	ldr	r1, [r4, #4]
 800372a:	4299      	cmp	r1, r3
 800372c:	bfde      	ittt	le
 800372e:	2330      	movle	r3, #48	; 0x30
 8003730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003734:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003738:	1b52      	subs	r2, r2, r5
 800373a:	6122      	str	r2, [r4, #16]
 800373c:	f8cd a000 	str.w	sl, [sp]
 8003740:	464b      	mov	r3, r9
 8003742:	aa03      	add	r2, sp, #12
 8003744:	4621      	mov	r1, r4
 8003746:	4640      	mov	r0, r8
 8003748:	f7ff fee4 	bl	8003514 <_printf_common>
 800374c:	3001      	adds	r0, #1
 800374e:	d14a      	bne.n	80037e6 <_printf_i+0x1f6>
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	b004      	add	sp, #16
 8003756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	f043 0320 	orr.w	r3, r3, #32
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	4833      	ldr	r0, [pc, #204]	; (8003830 <_printf_i+0x240>)
 8003764:	2778      	movs	r7, #120	; 0x78
 8003766:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	6829      	ldr	r1, [r5, #0]
 800376e:	061f      	lsls	r7, r3, #24
 8003770:	f851 6b04 	ldr.w	r6, [r1], #4
 8003774:	d402      	bmi.n	800377c <_printf_i+0x18c>
 8003776:	065f      	lsls	r7, r3, #25
 8003778:	bf48      	it	mi
 800377a:	b2b6      	uxthmi	r6, r6
 800377c:	07df      	lsls	r7, r3, #31
 800377e:	bf48      	it	mi
 8003780:	f043 0320 	orrmi.w	r3, r3, #32
 8003784:	6029      	str	r1, [r5, #0]
 8003786:	bf48      	it	mi
 8003788:	6023      	strmi	r3, [r4, #0]
 800378a:	b91e      	cbnz	r6, 8003794 <_printf_i+0x1a4>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	2310      	movs	r3, #16
 8003796:	e7a7      	b.n	80036e8 <_printf_i+0xf8>
 8003798:	4824      	ldr	r0, [pc, #144]	; (800382c <_printf_i+0x23c>)
 800379a:	e7e4      	b.n	8003766 <_printf_i+0x176>
 800379c:	4615      	mov	r5, r2
 800379e:	e7bd      	b.n	800371c <_printf_i+0x12c>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	6826      	ldr	r6, [r4, #0]
 80037a4:	6961      	ldr	r1, [r4, #20]
 80037a6:	1d18      	adds	r0, r3, #4
 80037a8:	6028      	str	r0, [r5, #0]
 80037aa:	0635      	lsls	r5, r6, #24
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	d501      	bpl.n	80037b4 <_printf_i+0x1c4>
 80037b0:	6019      	str	r1, [r3, #0]
 80037b2:	e002      	b.n	80037ba <_printf_i+0x1ca>
 80037b4:	0670      	lsls	r0, r6, #25
 80037b6:	d5fb      	bpl.n	80037b0 <_printf_i+0x1c0>
 80037b8:	8019      	strh	r1, [r3, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	6123      	str	r3, [r4, #16]
 80037be:	4615      	mov	r5, r2
 80037c0:	e7bc      	b.n	800373c <_printf_i+0x14c>
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	1d1a      	adds	r2, r3, #4
 80037c6:	602a      	str	r2, [r5, #0]
 80037c8:	681d      	ldr	r5, [r3, #0]
 80037ca:	6862      	ldr	r2, [r4, #4]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4628      	mov	r0, r5
 80037d0:	f7fc fcfe 	bl	80001d0 <memchr>
 80037d4:	b108      	cbz	r0, 80037da <_printf_i+0x1ea>
 80037d6:	1b40      	subs	r0, r0, r5
 80037d8:	6060      	str	r0, [r4, #4]
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	2300      	movs	r3, #0
 80037e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e4:	e7aa      	b.n	800373c <_printf_i+0x14c>
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	462a      	mov	r2, r5
 80037ea:	4649      	mov	r1, r9
 80037ec:	4640      	mov	r0, r8
 80037ee:	47d0      	blx	sl
 80037f0:	3001      	adds	r0, #1
 80037f2:	d0ad      	beq.n	8003750 <_printf_i+0x160>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	079b      	lsls	r3, r3, #30
 80037f8:	d413      	bmi.n	8003822 <_printf_i+0x232>
 80037fa:	68e0      	ldr	r0, [r4, #12]
 80037fc:	9b03      	ldr	r3, [sp, #12]
 80037fe:	4298      	cmp	r0, r3
 8003800:	bfb8      	it	lt
 8003802:	4618      	movlt	r0, r3
 8003804:	e7a6      	b.n	8003754 <_printf_i+0x164>
 8003806:	2301      	movs	r3, #1
 8003808:	4632      	mov	r2, r6
 800380a:	4649      	mov	r1, r9
 800380c:	4640      	mov	r0, r8
 800380e:	47d0      	blx	sl
 8003810:	3001      	adds	r0, #1
 8003812:	d09d      	beq.n	8003750 <_printf_i+0x160>
 8003814:	3501      	adds	r5, #1
 8003816:	68e3      	ldr	r3, [r4, #12]
 8003818:	9903      	ldr	r1, [sp, #12]
 800381a:	1a5b      	subs	r3, r3, r1
 800381c:	42ab      	cmp	r3, r5
 800381e:	dcf2      	bgt.n	8003806 <_printf_i+0x216>
 8003820:	e7eb      	b.n	80037fa <_printf_i+0x20a>
 8003822:	2500      	movs	r5, #0
 8003824:	f104 0619 	add.w	r6, r4, #25
 8003828:	e7f5      	b.n	8003816 <_printf_i+0x226>
 800382a:	bf00      	nop
 800382c:	08005cdd 	.word	0x08005cdd
 8003830:	08005cee 	.word	0x08005cee

08003834 <std>:
 8003834:	2300      	movs	r3, #0
 8003836:	b510      	push	{r4, lr}
 8003838:	4604      	mov	r4, r0
 800383a:	e9c0 3300 	strd	r3, r3, [r0]
 800383e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003842:	6083      	str	r3, [r0, #8]
 8003844:	8181      	strh	r1, [r0, #12]
 8003846:	6643      	str	r3, [r0, #100]	; 0x64
 8003848:	81c2      	strh	r2, [r0, #14]
 800384a:	6183      	str	r3, [r0, #24]
 800384c:	4619      	mov	r1, r3
 800384e:	2208      	movs	r2, #8
 8003850:	305c      	adds	r0, #92	; 0x5c
 8003852:	f000 f914 	bl	8003a7e <memset>
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <std+0x58>)
 8003858:	6263      	str	r3, [r4, #36]	; 0x24
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <std+0x5c>)
 800385c:	62a3      	str	r3, [r4, #40]	; 0x28
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <std+0x60>)
 8003860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <std+0x64>)
 8003864:	6323      	str	r3, [r4, #48]	; 0x30
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <std+0x68>)
 8003868:	6224      	str	r4, [r4, #32]
 800386a:	429c      	cmp	r4, r3
 800386c:	d006      	beq.n	800387c <std+0x48>
 800386e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003872:	4294      	cmp	r4, r2
 8003874:	d002      	beq.n	800387c <std+0x48>
 8003876:	33d0      	adds	r3, #208	; 0xd0
 8003878:	429c      	cmp	r4, r3
 800387a:	d105      	bne.n	8003888 <std+0x54>
 800387c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003884:	f000 b978 	b.w	8003b78 <__retarget_lock_init_recursive>
 8003888:	bd10      	pop	{r4, pc}
 800388a:	bf00      	nop
 800388c:	080039f9 	.word	0x080039f9
 8003890:	08003a1b 	.word	0x08003a1b
 8003894:	08003a53 	.word	0x08003a53
 8003898:	08003a77 	.word	0x08003a77
 800389c:	200002c4 	.word	0x200002c4

080038a0 <stdio_exit_handler>:
 80038a0:	4a02      	ldr	r2, [pc, #8]	; (80038ac <stdio_exit_handler+0xc>)
 80038a2:	4903      	ldr	r1, [pc, #12]	; (80038b0 <stdio_exit_handler+0x10>)
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <stdio_exit_handler+0x14>)
 80038a6:	f000 b869 	b.w	800397c <_fwalk_sglue>
 80038aa:	bf00      	nop
 80038ac:	20000004 	.word	0x20000004
 80038b0:	08005529 	.word	0x08005529
 80038b4:	20000010 	.word	0x20000010

080038b8 <cleanup_stdio>:
 80038b8:	6841      	ldr	r1, [r0, #4]
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <cleanup_stdio+0x34>)
 80038bc:	4299      	cmp	r1, r3
 80038be:	b510      	push	{r4, lr}
 80038c0:	4604      	mov	r4, r0
 80038c2:	d001      	beq.n	80038c8 <cleanup_stdio+0x10>
 80038c4:	f001 fe30 	bl	8005528 <_fflush_r>
 80038c8:	68a1      	ldr	r1, [r4, #8]
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <cleanup_stdio+0x38>)
 80038cc:	4299      	cmp	r1, r3
 80038ce:	d002      	beq.n	80038d6 <cleanup_stdio+0x1e>
 80038d0:	4620      	mov	r0, r4
 80038d2:	f001 fe29 	bl	8005528 <_fflush_r>
 80038d6:	68e1      	ldr	r1, [r4, #12]
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <cleanup_stdio+0x3c>)
 80038da:	4299      	cmp	r1, r3
 80038dc:	d004      	beq.n	80038e8 <cleanup_stdio+0x30>
 80038de:	4620      	mov	r0, r4
 80038e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e4:	f001 be20 	b.w	8005528 <_fflush_r>
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	bf00      	nop
 80038ec:	200002c4 	.word	0x200002c4
 80038f0:	2000032c 	.word	0x2000032c
 80038f4:	20000394 	.word	0x20000394

080038f8 <global_stdio_init.part.0>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <global_stdio_init.part.0+0x30>)
 80038fc:	4c0b      	ldr	r4, [pc, #44]	; (800392c <global_stdio_init.part.0+0x34>)
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <global_stdio_init.part.0+0x38>)
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	4620      	mov	r0, r4
 8003904:	2200      	movs	r2, #0
 8003906:	2104      	movs	r1, #4
 8003908:	f7ff ff94 	bl	8003834 <std>
 800390c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003910:	2201      	movs	r2, #1
 8003912:	2109      	movs	r1, #9
 8003914:	f7ff ff8e 	bl	8003834 <std>
 8003918:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800391c:	2202      	movs	r2, #2
 800391e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003922:	2112      	movs	r1, #18
 8003924:	f7ff bf86 	b.w	8003834 <std>
 8003928:	200003fc 	.word	0x200003fc
 800392c:	200002c4 	.word	0x200002c4
 8003930:	080038a1 	.word	0x080038a1

08003934 <__sfp_lock_acquire>:
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <__sfp_lock_acquire+0x8>)
 8003936:	f000 b920 	b.w	8003b7a <__retarget_lock_acquire_recursive>
 800393a:	bf00      	nop
 800393c:	20000405 	.word	0x20000405

08003940 <__sfp_lock_release>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__sfp_lock_release+0x8>)
 8003942:	f000 b91b 	b.w	8003b7c <__retarget_lock_release_recursive>
 8003946:	bf00      	nop
 8003948:	20000405 	.word	0x20000405

0800394c <__sinit>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	f7ff fff0 	bl	8003934 <__sfp_lock_acquire>
 8003954:	6a23      	ldr	r3, [r4, #32]
 8003956:	b11b      	cbz	r3, 8003960 <__sinit+0x14>
 8003958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800395c:	f7ff bff0 	b.w	8003940 <__sfp_lock_release>
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <__sinit+0x28>)
 8003962:	6223      	str	r3, [r4, #32]
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <__sinit+0x2c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f5      	bne.n	8003958 <__sinit+0xc>
 800396c:	f7ff ffc4 	bl	80038f8 <global_stdio_init.part.0>
 8003970:	e7f2      	b.n	8003958 <__sinit+0xc>
 8003972:	bf00      	nop
 8003974:	080038b9 	.word	0x080038b9
 8003978:	200003fc 	.word	0x200003fc

0800397c <_fwalk_sglue>:
 800397c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003980:	4607      	mov	r7, r0
 8003982:	4688      	mov	r8, r1
 8003984:	4614      	mov	r4, r2
 8003986:	2600      	movs	r6, #0
 8003988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800398c:	f1b9 0901 	subs.w	r9, r9, #1
 8003990:	d505      	bpl.n	800399e <_fwalk_sglue+0x22>
 8003992:	6824      	ldr	r4, [r4, #0]
 8003994:	2c00      	cmp	r4, #0
 8003996:	d1f7      	bne.n	8003988 <_fwalk_sglue+0xc>
 8003998:	4630      	mov	r0, r6
 800399a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d907      	bls.n	80039b4 <_fwalk_sglue+0x38>
 80039a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039a8:	3301      	adds	r3, #1
 80039aa:	d003      	beq.n	80039b4 <_fwalk_sglue+0x38>
 80039ac:	4629      	mov	r1, r5
 80039ae:	4638      	mov	r0, r7
 80039b0:	47c0      	blx	r8
 80039b2:	4306      	orrs	r6, r0
 80039b4:	3568      	adds	r5, #104	; 0x68
 80039b6:	e7e9      	b.n	800398c <_fwalk_sglue+0x10>

080039b8 <siprintf>:
 80039b8:	b40e      	push	{r1, r2, r3}
 80039ba:	b500      	push	{lr}
 80039bc:	b09c      	sub	sp, #112	; 0x70
 80039be:	ab1d      	add	r3, sp, #116	; 0x74
 80039c0:	9002      	str	r0, [sp, #8]
 80039c2:	9006      	str	r0, [sp, #24]
 80039c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039c8:	4809      	ldr	r0, [pc, #36]	; (80039f0 <siprintf+0x38>)
 80039ca:	9107      	str	r1, [sp, #28]
 80039cc:	9104      	str	r1, [sp, #16]
 80039ce:	4909      	ldr	r1, [pc, #36]	; (80039f4 <siprintf+0x3c>)
 80039d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d4:	9105      	str	r1, [sp, #20]
 80039d6:	6800      	ldr	r0, [r0, #0]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	a902      	add	r1, sp, #8
 80039dc:	f001 fc20 	bl	8005220 <_svfiprintf_r>
 80039e0:	9b02      	ldr	r3, [sp, #8]
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	b01c      	add	sp, #112	; 0x70
 80039e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039ec:	b003      	add	sp, #12
 80039ee:	4770      	bx	lr
 80039f0:	2000005c 	.word	0x2000005c
 80039f4:	ffff0208 	.word	0xffff0208

080039f8 <__sread>:
 80039f8:	b510      	push	{r4, lr}
 80039fa:	460c      	mov	r4, r1
 80039fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a00:	f000 f86c 	bl	8003adc <_read_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	bfab      	itete	ge
 8003a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a0c:	181b      	addge	r3, r3, r0
 8003a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a12:	bfac      	ite	ge
 8003a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a16:	81a3      	strhlt	r3, [r4, #12]
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <__swrite>:
 8003a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	461f      	mov	r7, r3
 8003a20:	898b      	ldrh	r3, [r1, #12]
 8003a22:	05db      	lsls	r3, r3, #23
 8003a24:	4605      	mov	r5, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4616      	mov	r6, r2
 8003a2a:	d505      	bpl.n	8003a38 <__swrite+0x1e>
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	2302      	movs	r3, #2
 8003a32:	2200      	movs	r2, #0
 8003a34:	f000 f840 	bl	8003ab8 <_lseek_r>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	4632      	mov	r2, r6
 8003a46:	463b      	mov	r3, r7
 8003a48:	4628      	mov	r0, r5
 8003a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	f000 b857 	b.w	8003b00 <_write_r>

08003a52 <__sseek>:
 8003a52:	b510      	push	{r4, lr}
 8003a54:	460c      	mov	r4, r1
 8003a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5a:	f000 f82d 	bl	8003ab8 <_lseek_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	bf15      	itete	ne
 8003a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a6e:	81a3      	strheq	r3, [r4, #12]
 8003a70:	bf18      	it	ne
 8003a72:	81a3      	strhne	r3, [r4, #12]
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <__sclose>:
 8003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7a:	f000 b80d 	b.w	8003a98 <_close_r>

08003a7e <memset>:
 8003a7e:	4402      	add	r2, r0
 8003a80:	4603      	mov	r3, r0
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d100      	bne.n	8003a88 <memset+0xa>
 8003a86:	4770      	bx	lr
 8003a88:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8c:	e7f9      	b.n	8003a82 <memset+0x4>
	...

08003a90 <_localeconv_r>:
 8003a90:	4800      	ldr	r0, [pc, #0]	; (8003a94 <_localeconv_r+0x4>)
 8003a92:	4770      	bx	lr
 8003a94:	20000150 	.word	0x20000150

08003a98 <_close_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4d06      	ldr	r5, [pc, #24]	; (8003ab4 <_close_r+0x1c>)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	f7fd ff7f 	bl	80019a6 <_close>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_close_r+0x1a>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_close_r+0x1a>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	20000400 	.word	0x20000400

08003ab8 <_lseek_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4d07      	ldr	r5, [pc, #28]	; (8003ad8 <_lseek_r+0x20>)
 8003abc:	4604      	mov	r4, r0
 8003abe:	4608      	mov	r0, r1
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	602a      	str	r2, [r5, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f7fd ff94 	bl	80019f4 <_lseek>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_lseek_r+0x1e>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_lseek_r+0x1e>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	20000400 	.word	0x20000400

08003adc <_read_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	; (8003afc <_read_r+0x20>)
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fd ff22 	bl	8001934 <_read>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_read_r+0x1e>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_read_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	20000400 	.word	0x20000400

08003b00 <_write_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	; (8003b20 <_write_r+0x20>)
 8003b04:	4604      	mov	r4, r0
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fd ff2d 	bl	800196e <_write>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_write_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_write_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000400 	.word	0x20000400

08003b24 <__errno>:
 8003b24:	4b01      	ldr	r3, [pc, #4]	; (8003b2c <__errno+0x8>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	2000005c 	.word	0x2000005c

08003b30 <__libc_init_array>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	4d0d      	ldr	r5, [pc, #52]	; (8003b68 <__libc_init_array+0x38>)
 8003b34:	4c0d      	ldr	r4, [pc, #52]	; (8003b6c <__libc_init_array+0x3c>)
 8003b36:	1b64      	subs	r4, r4, r5
 8003b38:	10a4      	asrs	r4, r4, #2
 8003b3a:	2600      	movs	r6, #0
 8003b3c:	42a6      	cmp	r6, r4
 8003b3e:	d109      	bne.n	8003b54 <__libc_init_array+0x24>
 8003b40:	4d0b      	ldr	r5, [pc, #44]	; (8003b70 <__libc_init_array+0x40>)
 8003b42:	4c0c      	ldr	r4, [pc, #48]	; (8003b74 <__libc_init_array+0x44>)
 8003b44:	f002 f894 	bl	8005c70 <_init>
 8003b48:	1b64      	subs	r4, r4, r5
 8003b4a:	10a4      	asrs	r4, r4, #2
 8003b4c:	2600      	movs	r6, #0
 8003b4e:	42a6      	cmp	r6, r4
 8003b50:	d105      	bne.n	8003b5e <__libc_init_array+0x2e>
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b58:	4798      	blx	r3
 8003b5a:	3601      	adds	r6, #1
 8003b5c:	e7ee      	b.n	8003b3c <__libc_init_array+0xc>
 8003b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b62:	4798      	blx	r3
 8003b64:	3601      	adds	r6, #1
 8003b66:	e7f2      	b.n	8003b4e <__libc_init_array+0x1e>
 8003b68:	0800603c 	.word	0x0800603c
 8003b6c:	0800603c 	.word	0x0800603c
 8003b70:	0800603c 	.word	0x0800603c
 8003b74:	08006040 	.word	0x08006040

08003b78 <__retarget_lock_init_recursive>:
 8003b78:	4770      	bx	lr

08003b7a <__retarget_lock_acquire_recursive>:
 8003b7a:	4770      	bx	lr

08003b7c <__retarget_lock_release_recursive>:
 8003b7c:	4770      	bx	lr

08003b7e <quorem>:
 8003b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b82:	6903      	ldr	r3, [r0, #16]
 8003b84:	690c      	ldr	r4, [r1, #16]
 8003b86:	42a3      	cmp	r3, r4
 8003b88:	4607      	mov	r7, r0
 8003b8a:	db7e      	blt.n	8003c8a <quorem+0x10c>
 8003b8c:	3c01      	subs	r4, #1
 8003b8e:	f101 0814 	add.w	r8, r1, #20
 8003b92:	f100 0514 	add.w	r5, r0, #20
 8003b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bb4:	d331      	bcc.n	8003c1a <quorem+0x9c>
 8003bb6:	f04f 0e00 	mov.w	lr, #0
 8003bba:	4640      	mov	r0, r8
 8003bbc:	46ac      	mov	ip, r5
 8003bbe:	46f2      	mov	sl, lr
 8003bc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bc4:	b293      	uxth	r3, r2
 8003bc6:	fb06 e303 	mla	r3, r6, r3, lr
 8003bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bce:	0c1a      	lsrs	r2, r3, #16
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8003bd6:	f8dc a000 	ldr.w	sl, [ip]
 8003bda:	fa13 f38a 	uxtah	r3, r3, sl
 8003bde:	fb06 220e 	mla	r2, r6, lr, r2
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	9b00      	ldr	r3, [sp, #0]
 8003be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bea:	b292      	uxth	r2, r2
 8003bec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bf4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003bf8:	4581      	cmp	r9, r0
 8003bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bfe:	f84c 3b04 	str.w	r3, [ip], #4
 8003c02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c06:	d2db      	bcs.n	8003bc0 <quorem+0x42>
 8003c08:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c0c:	b92b      	cbnz	r3, 8003c1a <quorem+0x9c>
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	3b04      	subs	r3, #4
 8003c12:	429d      	cmp	r5, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	d32c      	bcc.n	8003c72 <quorem+0xf4>
 8003c18:	613c      	str	r4, [r7, #16]
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f001 f9a6 	bl	8004f6c <__mcmp>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	db22      	blt.n	8003c6a <quorem+0xec>
 8003c24:	3601      	adds	r6, #1
 8003c26:	4629      	mov	r1, r5
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c2e:	f8d1 c000 	ldr.w	ip, [r1]
 8003c32:	b293      	uxth	r3, r2
 8003c34:	1ac3      	subs	r3, r0, r3
 8003c36:	0c12      	lsrs	r2, r2, #16
 8003c38:	fa13 f38c 	uxtah	r3, r3, ip
 8003c3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c4a:	45c1      	cmp	r9, r8
 8003c4c:	f841 3b04 	str.w	r3, [r1], #4
 8003c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c54:	d2e9      	bcs.n	8003c2a <quorem+0xac>
 8003c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c5e:	b922      	cbnz	r2, 8003c6a <quorem+0xec>
 8003c60:	3b04      	subs	r3, #4
 8003c62:	429d      	cmp	r5, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	d30a      	bcc.n	8003c7e <quorem+0x100>
 8003c68:	613c      	str	r4, [r7, #16]
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	b003      	add	sp, #12
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	3b04      	subs	r3, #4
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	d1ce      	bne.n	8003c18 <quorem+0x9a>
 8003c7a:	3c01      	subs	r4, #1
 8003c7c:	e7c9      	b.n	8003c12 <quorem+0x94>
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	3b04      	subs	r3, #4
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d1f0      	bne.n	8003c68 <quorem+0xea>
 8003c86:	3c01      	subs	r4, #1
 8003c88:	e7eb      	b.n	8003c62 <quorem+0xe4>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e7ee      	b.n	8003c6c <quorem+0xee>
	...

08003c90 <_dtoa_r>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	ed2d 8b04 	vpush	{d8-d9}
 8003c98:	69c5      	ldr	r5, [r0, #28]
 8003c9a:	b093      	sub	sp, #76	; 0x4c
 8003c9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003ca0:	ec57 6b10 	vmov	r6, r7, d0
 8003ca4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003ca8:	9107      	str	r1, [sp, #28]
 8003caa:	4604      	mov	r4, r0
 8003cac:	920a      	str	r2, [sp, #40]	; 0x28
 8003cae:	930d      	str	r3, [sp, #52]	; 0x34
 8003cb0:	b975      	cbnz	r5, 8003cd0 <_dtoa_r+0x40>
 8003cb2:	2010      	movs	r0, #16
 8003cb4:	f000 fe2a 	bl	800490c <malloc>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	61e0      	str	r0, [r4, #28]
 8003cbc:	b920      	cbnz	r0, 8003cc8 <_dtoa_r+0x38>
 8003cbe:	4bae      	ldr	r3, [pc, #696]	; (8003f78 <_dtoa_r+0x2e8>)
 8003cc0:	21ef      	movs	r1, #239	; 0xef
 8003cc2:	48ae      	ldr	r0, [pc, #696]	; (8003f7c <_dtoa_r+0x2ec>)
 8003cc4:	f001 fc90 	bl	80055e8 <__assert_func>
 8003cc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ccc:	6005      	str	r5, [r0, #0]
 8003cce:	60c5      	str	r5, [r0, #12]
 8003cd0:	69e3      	ldr	r3, [r4, #28]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	b151      	cbz	r1, 8003cec <_dtoa_r+0x5c>
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	604a      	str	r2, [r1, #4]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f000 ff07 	bl	8004af4 <_Bfree>
 8003ce6:	69e3      	ldr	r3, [r4, #28]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	1e3b      	subs	r3, r7, #0
 8003cee:	bfbb      	ittet	lt
 8003cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cf4:	9303      	strlt	r3, [sp, #12]
 8003cf6:	2300      	movge	r3, #0
 8003cf8:	2201      	movlt	r2, #1
 8003cfa:	bfac      	ite	ge
 8003cfc:	f8c8 3000 	strge.w	r3, [r8]
 8003d00:	f8c8 2000 	strlt.w	r2, [r8]
 8003d04:	4b9e      	ldr	r3, [pc, #632]	; (8003f80 <_dtoa_r+0x2f0>)
 8003d06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003d0a:	ea33 0308 	bics.w	r3, r3, r8
 8003d0e:	d11b      	bne.n	8003d48 <_dtoa_r+0xb8>
 8003d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d12:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d1c:	4333      	orrs	r3, r6
 8003d1e:	f000 8593 	beq.w	8004848 <_dtoa_r+0xbb8>
 8003d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d24:	b963      	cbnz	r3, 8003d40 <_dtoa_r+0xb0>
 8003d26:	4b97      	ldr	r3, [pc, #604]	; (8003f84 <_dtoa_r+0x2f4>)
 8003d28:	e027      	b.n	8003d7a <_dtoa_r+0xea>
 8003d2a:	4b97      	ldr	r3, [pc, #604]	; (8003f88 <_dtoa_r+0x2f8>)
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	9800      	ldr	r0, [sp, #0]
 8003d36:	b013      	add	sp, #76	; 0x4c
 8003d38:	ecbd 8b04 	vpop	{d8-d9}
 8003d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d40:	4b90      	ldr	r3, [pc, #576]	; (8003f84 <_dtoa_r+0x2f4>)
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	3303      	adds	r3, #3
 8003d46:	e7f3      	b.n	8003d30 <_dtoa_r+0xa0>
 8003d48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	ec51 0b17 	vmov	r0, r1, d7
 8003d52:	eeb0 8a47 	vmov.f32	s16, s14
 8003d56:	eef0 8a67 	vmov.f32	s17, s15
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f7fc feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d60:	4681      	mov	r9, r0
 8003d62:	b160      	cbz	r0, 8003d7e <_dtoa_r+0xee>
 8003d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d66:	2301      	movs	r3, #1
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8568 	beq.w	8004842 <_dtoa_r+0xbb2>
 8003d72:	4b86      	ldr	r3, [pc, #536]	; (8003f8c <_dtoa_r+0x2fc>)
 8003d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	e7da      	b.n	8003d34 <_dtoa_r+0xa4>
 8003d7e:	aa10      	add	r2, sp, #64	; 0x40
 8003d80:	a911      	add	r1, sp, #68	; 0x44
 8003d82:	4620      	mov	r0, r4
 8003d84:	eeb0 0a48 	vmov.f32	s0, s16
 8003d88:	eef0 0a68 	vmov.f32	s1, s17
 8003d8c:	f001 f994 	bl	80050b8 <__d2b>
 8003d90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003d94:	4682      	mov	sl, r0
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	d07f      	beq.n	8003e9a <_dtoa_r+0x20a>
 8003d9a:	ee18 3a90 	vmov	r3, s17
 8003d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003da6:	ec51 0b18 	vmov	r0, r1, d8
 8003daa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003db2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003db6:	4619      	mov	r1, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	4b75      	ldr	r3, [pc, #468]	; (8003f90 <_dtoa_r+0x300>)
 8003dbc:	f7fc fa64 	bl	8000288 <__aeabi_dsub>
 8003dc0:	a367      	add	r3, pc, #412	; (adr r3, 8003f60 <_dtoa_r+0x2d0>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fc17 	bl	80005f8 <__aeabi_dmul>
 8003dca:	a367      	add	r3, pc, #412	; (adr r3, 8003f68 <_dtoa_r+0x2d8>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fa5c 	bl	800028c <__adddf3>
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	460f      	mov	r7, r1
 8003dda:	f7fc fba3 	bl	8000524 <__aeabi_i2d>
 8003dde:	a364      	add	r3, pc, #400	; (adr r3, 8003f70 <_dtoa_r+0x2e0>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4630      	mov	r0, r6
 8003dee:	4639      	mov	r1, r7
 8003df0:	f7fc fa4c 	bl	800028c <__adddf3>
 8003df4:	4606      	mov	r6, r0
 8003df6:	460f      	mov	r7, r1
 8003df8:	f7fc feae 	bl	8000b58 <__aeabi_d2iz>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4683      	mov	fp, r0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4630      	mov	r0, r6
 8003e04:	4639      	mov	r1, r7
 8003e06:	f7fc fe69 	bl	8000adc <__aeabi_dcmplt>
 8003e0a:	b148      	cbz	r0, 8003e20 <_dtoa_r+0x190>
 8003e0c:	4658      	mov	r0, fp
 8003e0e:	f7fc fb89 	bl	8000524 <__aeabi_i2d>
 8003e12:	4632      	mov	r2, r6
 8003e14:	463b      	mov	r3, r7
 8003e16:	f7fc fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e1a:	b908      	cbnz	r0, 8003e20 <_dtoa_r+0x190>
 8003e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e20:	f1bb 0f16 	cmp.w	fp, #22
 8003e24:	d857      	bhi.n	8003ed6 <_dtoa_r+0x246>
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <_dtoa_r+0x304>)
 8003e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	ec51 0b18 	vmov	r0, r1, d8
 8003e34:	f7fc fe52 	bl	8000adc <__aeabi_dcmplt>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d04e      	beq.n	8003eda <_dtoa_r+0x24a>
 8003e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e40:	2300      	movs	r3, #0
 8003e42:	930c      	str	r3, [sp, #48]	; 0x30
 8003e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e46:	1b5b      	subs	r3, r3, r5
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	bf45      	ittet	mi
 8003e4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e50:	9305      	strmi	r3, [sp, #20]
 8003e52:	2300      	movpl	r3, #0
 8003e54:	2300      	movmi	r3, #0
 8003e56:	9206      	str	r2, [sp, #24]
 8003e58:	bf54      	ite	pl
 8003e5a:	9305      	strpl	r3, [sp, #20]
 8003e5c:	9306      	strmi	r3, [sp, #24]
 8003e5e:	f1bb 0f00 	cmp.w	fp, #0
 8003e62:	db3c      	blt.n	8003ede <_dtoa_r+0x24e>
 8003e64:	9b06      	ldr	r3, [sp, #24]
 8003e66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003e6a:	445b      	add	r3, fp
 8003e6c:	9306      	str	r3, [sp, #24]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9308      	str	r3, [sp, #32]
 8003e72:	9b07      	ldr	r3, [sp, #28]
 8003e74:	2b09      	cmp	r3, #9
 8003e76:	d868      	bhi.n	8003f4a <_dtoa_r+0x2ba>
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	bfc4      	itt	gt
 8003e7c:	3b04      	subgt	r3, #4
 8003e7e:	9307      	strgt	r3, [sp, #28]
 8003e80:	9b07      	ldr	r3, [sp, #28]
 8003e82:	f1a3 0302 	sub.w	r3, r3, #2
 8003e86:	bfcc      	ite	gt
 8003e88:	2500      	movgt	r5, #0
 8003e8a:	2501      	movle	r5, #1
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	f200 8085 	bhi.w	8003f9c <_dtoa_r+0x30c>
 8003e92:	e8df f003 	tbb	[pc, r3]
 8003e96:	3b2e      	.short	0x3b2e
 8003e98:	5839      	.short	0x5839
 8003e9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003e9e:	441d      	add	r5, r3
 8003ea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	bfc1      	itttt	gt
 8003ea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003eac:	fa08 f803 	lslgt.w	r8, r8, r3
 8003eb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003eb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003eb8:	bfd6      	itet	le
 8003eba:	f1c3 0320 	rsble	r3, r3, #32
 8003ebe:	ea48 0003 	orrgt.w	r0, r8, r3
 8003ec2:	fa06 f003 	lslle.w	r0, r6, r3
 8003ec6:	f7fc fb1d 	bl	8000504 <__aeabi_ui2d>
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003ed0:	3d01      	subs	r5, #1
 8003ed2:	920e      	str	r2, [sp, #56]	; 0x38
 8003ed4:	e76f      	b.n	8003db6 <_dtoa_r+0x126>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e7b3      	b.n	8003e42 <_dtoa_r+0x1b2>
 8003eda:	900c      	str	r0, [sp, #48]	; 0x30
 8003edc:	e7b2      	b.n	8003e44 <_dtoa_r+0x1b4>
 8003ede:	9b05      	ldr	r3, [sp, #20]
 8003ee0:	eba3 030b 	sub.w	r3, r3, fp
 8003ee4:	9305      	str	r3, [sp, #20]
 8003ee6:	f1cb 0300 	rsb	r3, fp, #0
 8003eea:	9308      	str	r3, [sp, #32]
 8003eec:	2300      	movs	r3, #0
 8003eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ef0:	e7bf      	b.n	8003e72 <_dtoa_r+0x1e2>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dc52      	bgt.n	8003fa2 <_dtoa_r+0x312>
 8003efc:	2301      	movs	r3, #1
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	9304      	str	r3, [sp, #16]
 8003f02:	461a      	mov	r2, r3
 8003f04:	920a      	str	r2, [sp, #40]	; 0x28
 8003f06:	e00b      	b.n	8003f20 <_dtoa_r+0x290>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e7f3      	b.n	8003ef4 <_dtoa_r+0x264>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f12:	445b      	add	r3, fp
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	3301      	adds	r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	9304      	str	r3, [sp, #16]
 8003f1c:	bfb8      	it	lt
 8003f1e:	2301      	movlt	r3, #1
 8003f20:	69e0      	ldr	r0, [r4, #28]
 8003f22:	2100      	movs	r1, #0
 8003f24:	2204      	movs	r2, #4
 8003f26:	f102 0614 	add.w	r6, r2, #20
 8003f2a:	429e      	cmp	r6, r3
 8003f2c:	d93d      	bls.n	8003faa <_dtoa_r+0x31a>
 8003f2e:	6041      	str	r1, [r0, #4]
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 fd9f 	bl	8004a74 <_Balloc>
 8003f36:	9000      	str	r0, [sp, #0]
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d139      	bne.n	8003fb0 <_dtoa_r+0x320>
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <_dtoa_r+0x308>)
 8003f3e:	4602      	mov	r2, r0
 8003f40:	f240 11af 	movw	r1, #431	; 0x1af
 8003f44:	e6bd      	b.n	8003cc2 <_dtoa_r+0x32>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7e1      	b.n	8003f0e <_dtoa_r+0x27e>
 8003f4a:	2501      	movs	r5, #1
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9307      	str	r3, [sp, #28]
 8003f50:	9509      	str	r5, [sp, #36]	; 0x24
 8003f52:	f04f 33ff 	mov.w	r3, #4294967295
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2312      	movs	r3, #18
 8003f5e:	e7d1      	b.n	8003f04 <_dtoa_r+0x274>
 8003f60:	636f4361 	.word	0x636f4361
 8003f64:	3fd287a7 	.word	0x3fd287a7
 8003f68:	8b60c8b3 	.word	0x8b60c8b3
 8003f6c:	3fc68a28 	.word	0x3fc68a28
 8003f70:	509f79fb 	.word	0x509f79fb
 8003f74:	3fd34413 	.word	0x3fd34413
 8003f78:	08005d0c 	.word	0x08005d0c
 8003f7c:	08005d23 	.word	0x08005d23
 8003f80:	7ff00000 	.word	0x7ff00000
 8003f84:	08005d08 	.word	0x08005d08
 8003f88:	08005cff 	.word	0x08005cff
 8003f8c:	08005cdc 	.word	0x08005cdc
 8003f90:	3ff80000 	.word	0x3ff80000
 8003f94:	08005e10 	.word	0x08005e10
 8003f98:	08005d7b 	.word	0x08005d7b
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa0:	e7d7      	b.n	8003f52 <_dtoa_r+0x2c2>
 8003fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	e7ba      	b.n	8003f20 <_dtoa_r+0x290>
 8003faa:	3101      	adds	r1, #1
 8003fac:	0052      	lsls	r2, r2, #1
 8003fae:	e7ba      	b.n	8003f26 <_dtoa_r+0x296>
 8003fb0:	69e3      	ldr	r3, [r4, #28]
 8003fb2:	9a00      	ldr	r2, [sp, #0]
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	9b04      	ldr	r3, [sp, #16]
 8003fb8:	2b0e      	cmp	r3, #14
 8003fba:	f200 80a8 	bhi.w	800410e <_dtoa_r+0x47e>
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	f000 80a5 	beq.w	800410e <_dtoa_r+0x47e>
 8003fc4:	f1bb 0f00 	cmp.w	fp, #0
 8003fc8:	dd38      	ble.n	800403c <_dtoa_r+0x3ac>
 8003fca:	4bc0      	ldr	r3, [pc, #768]	; (80042cc <_dtoa_r+0x63c>)
 8003fcc:	f00b 020f 	and.w	r2, fp, #15
 8003fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003fd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003fdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003fe0:	d019      	beq.n	8004016 <_dtoa_r+0x386>
 8003fe2:	4bbb      	ldr	r3, [pc, #748]	; (80042d0 <_dtoa_r+0x640>)
 8003fe4:	ec51 0b18 	vmov	r0, r1, d8
 8003fe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fec:	f7fc fc2e 	bl	800084c <__aeabi_ddiv>
 8003ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ff4:	f008 080f 	and.w	r8, r8, #15
 8003ff8:	2503      	movs	r5, #3
 8003ffa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80042d0 <_dtoa_r+0x640>
 8003ffe:	f1b8 0f00 	cmp.w	r8, #0
 8004002:	d10a      	bne.n	800401a <_dtoa_r+0x38a>
 8004004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004008:	4632      	mov	r2, r6
 800400a:	463b      	mov	r3, r7
 800400c:	f7fc fc1e 	bl	800084c <__aeabi_ddiv>
 8004010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004014:	e02b      	b.n	800406e <_dtoa_r+0x3de>
 8004016:	2502      	movs	r5, #2
 8004018:	e7ef      	b.n	8003ffa <_dtoa_r+0x36a>
 800401a:	f018 0f01 	tst.w	r8, #1
 800401e:	d008      	beq.n	8004032 <_dtoa_r+0x3a2>
 8004020:	4630      	mov	r0, r6
 8004022:	4639      	mov	r1, r7
 8004024:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004028:	f7fc fae6 	bl	80005f8 <__aeabi_dmul>
 800402c:	3501      	adds	r5, #1
 800402e:	4606      	mov	r6, r0
 8004030:	460f      	mov	r7, r1
 8004032:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004036:	f109 0908 	add.w	r9, r9, #8
 800403a:	e7e0      	b.n	8003ffe <_dtoa_r+0x36e>
 800403c:	f000 809f 	beq.w	800417e <_dtoa_r+0x4ee>
 8004040:	f1cb 0600 	rsb	r6, fp, #0
 8004044:	4ba1      	ldr	r3, [pc, #644]	; (80042cc <_dtoa_r+0x63c>)
 8004046:	4fa2      	ldr	r7, [pc, #648]	; (80042d0 <_dtoa_r+0x640>)
 8004048:	f006 020f 	and.w	r2, r6, #15
 800404c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	ec51 0b18 	vmov	r0, r1, d8
 8004058:	f7fc face 	bl	80005f8 <__aeabi_dmul>
 800405c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004060:	1136      	asrs	r6, r6, #4
 8004062:	2300      	movs	r3, #0
 8004064:	2502      	movs	r5, #2
 8004066:	2e00      	cmp	r6, #0
 8004068:	d17e      	bne.n	8004168 <_dtoa_r+0x4d8>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1d0      	bne.n	8004010 <_dtoa_r+0x380>
 800406e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004070:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8084 	beq.w	8004182 <_dtoa_r+0x4f2>
 800407a:	4b96      	ldr	r3, [pc, #600]	; (80042d4 <_dtoa_r+0x644>)
 800407c:	2200      	movs	r2, #0
 800407e:	4640      	mov	r0, r8
 8004080:	4649      	mov	r1, r9
 8004082:	f7fc fd2b 	bl	8000adc <__aeabi_dcmplt>
 8004086:	2800      	cmp	r0, #0
 8004088:	d07b      	beq.n	8004182 <_dtoa_r+0x4f2>
 800408a:	9b04      	ldr	r3, [sp, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d078      	beq.n	8004182 <_dtoa_r+0x4f2>
 8004090:	9b01      	ldr	r3, [sp, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	dd39      	ble.n	800410a <_dtoa_r+0x47a>
 8004096:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <_dtoa_r+0x648>)
 8004098:	2200      	movs	r2, #0
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	f7fc faab 	bl	80005f8 <__aeabi_dmul>
 80040a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040a6:	9e01      	ldr	r6, [sp, #4]
 80040a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80040ac:	3501      	adds	r5, #1
 80040ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7fc fa36 	bl	8000524 <__aeabi_i2d>
 80040b8:	4642      	mov	r2, r8
 80040ba:	464b      	mov	r3, r9
 80040bc:	f7fc fa9c 	bl	80005f8 <__aeabi_dmul>
 80040c0:	4b86      	ldr	r3, [pc, #536]	; (80042dc <_dtoa_r+0x64c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	f7fc f8e2 	bl	800028c <__adddf3>
 80040c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80040cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	d158      	bne.n	8004188 <_dtoa_r+0x4f8>
 80040d6:	4b82      	ldr	r3, [pc, #520]	; (80042e0 <_dtoa_r+0x650>)
 80040d8:	2200      	movs	r2, #0
 80040da:	4640      	mov	r0, r8
 80040dc:	4649      	mov	r1, r9
 80040de:	f7fc f8d3 	bl	8000288 <__aeabi_dsub>
 80040e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040e6:	4680      	mov	r8, r0
 80040e8:	4689      	mov	r9, r1
 80040ea:	f7fc fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	f040 8296 	bne.w	8004620 <_dtoa_r+0x990>
 80040f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80040f8:	4640      	mov	r0, r8
 80040fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040fe:	4649      	mov	r1, r9
 8004100:	f7fc fcec 	bl	8000adc <__aeabi_dcmplt>
 8004104:	2800      	cmp	r0, #0
 8004106:	f040 8289 	bne.w	800461c <_dtoa_r+0x98c>
 800410a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800410e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004110:	2b00      	cmp	r3, #0
 8004112:	f2c0 814e 	blt.w	80043b2 <_dtoa_r+0x722>
 8004116:	f1bb 0f0e 	cmp.w	fp, #14
 800411a:	f300 814a 	bgt.w	80043b2 <_dtoa_r+0x722>
 800411e:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <_dtoa_r+0x63c>)
 8004120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	f280 80dc 	bge.w	80042e8 <_dtoa_r+0x658>
 8004130:	9b04      	ldr	r3, [sp, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f300 80d8 	bgt.w	80042e8 <_dtoa_r+0x658>
 8004138:	f040 826f 	bne.w	800461a <_dtoa_r+0x98a>
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <_dtoa_r+0x650>)
 800413e:	2200      	movs	r2, #0
 8004140:	4640      	mov	r0, r8
 8004142:	4649      	mov	r1, r9
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800414c:	f7fc fcda 	bl	8000b04 <__aeabi_dcmpge>
 8004150:	9e04      	ldr	r6, [sp, #16]
 8004152:	4637      	mov	r7, r6
 8004154:	2800      	cmp	r0, #0
 8004156:	f040 8245 	bne.w	80045e4 <_dtoa_r+0x954>
 800415a:	9d00      	ldr	r5, [sp, #0]
 800415c:	2331      	movs	r3, #49	; 0x31
 800415e:	f805 3b01 	strb.w	r3, [r5], #1
 8004162:	f10b 0b01 	add.w	fp, fp, #1
 8004166:	e241      	b.n	80045ec <_dtoa_r+0x95c>
 8004168:	07f2      	lsls	r2, r6, #31
 800416a:	d505      	bpl.n	8004178 <_dtoa_r+0x4e8>
 800416c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004170:	f7fc fa42 	bl	80005f8 <__aeabi_dmul>
 8004174:	3501      	adds	r5, #1
 8004176:	2301      	movs	r3, #1
 8004178:	1076      	asrs	r6, r6, #1
 800417a:	3708      	adds	r7, #8
 800417c:	e773      	b.n	8004066 <_dtoa_r+0x3d6>
 800417e:	2502      	movs	r5, #2
 8004180:	e775      	b.n	800406e <_dtoa_r+0x3de>
 8004182:	9e04      	ldr	r6, [sp, #16]
 8004184:	465f      	mov	r7, fp
 8004186:	e792      	b.n	80040ae <_dtoa_r+0x41e>
 8004188:	9900      	ldr	r1, [sp, #0]
 800418a:	4b50      	ldr	r3, [pc, #320]	; (80042cc <_dtoa_r+0x63c>)
 800418c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004190:	4431      	add	r1, r6
 8004192:	9102      	str	r1, [sp, #8]
 8004194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004196:	eeb0 9a47 	vmov.f32	s18, s14
 800419a:	eef0 9a67 	vmov.f32	s19, s15
 800419e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041a6:	2900      	cmp	r1, #0
 80041a8:	d044      	beq.n	8004234 <_dtoa_r+0x5a4>
 80041aa:	494e      	ldr	r1, [pc, #312]	; (80042e4 <_dtoa_r+0x654>)
 80041ac:	2000      	movs	r0, #0
 80041ae:	f7fc fb4d 	bl	800084c <__aeabi_ddiv>
 80041b2:	ec53 2b19 	vmov	r2, r3, d9
 80041b6:	f7fc f867 	bl	8000288 <__aeabi_dsub>
 80041ba:	9d00      	ldr	r5, [sp, #0]
 80041bc:	ec41 0b19 	vmov	d9, r0, r1
 80041c0:	4649      	mov	r1, r9
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7fc fcc8 	bl	8000b58 <__aeabi_d2iz>
 80041c8:	4606      	mov	r6, r0
 80041ca:	f7fc f9ab 	bl	8000524 <__aeabi_i2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4640      	mov	r0, r8
 80041d4:	4649      	mov	r1, r9
 80041d6:	f7fc f857 	bl	8000288 <__aeabi_dsub>
 80041da:	3630      	adds	r6, #48	; 0x30
 80041dc:	f805 6b01 	strb.w	r6, [r5], #1
 80041e0:	ec53 2b19 	vmov	r2, r3, d9
 80041e4:	4680      	mov	r8, r0
 80041e6:	4689      	mov	r9, r1
 80041e8:	f7fc fc78 	bl	8000adc <__aeabi_dcmplt>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d164      	bne.n	80042ba <_dtoa_r+0x62a>
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	4937      	ldr	r1, [pc, #220]	; (80042d4 <_dtoa_r+0x644>)
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fc f846 	bl	8000288 <__aeabi_dsub>
 80041fc:	ec53 2b19 	vmov	r2, r3, d9
 8004200:	f7fc fc6c 	bl	8000adc <__aeabi_dcmplt>
 8004204:	2800      	cmp	r0, #0
 8004206:	f040 80b6 	bne.w	8004376 <_dtoa_r+0x6e6>
 800420a:	9b02      	ldr	r3, [sp, #8]
 800420c:	429d      	cmp	r5, r3
 800420e:	f43f af7c 	beq.w	800410a <_dtoa_r+0x47a>
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <_dtoa_r+0x648>)
 8004214:	ec51 0b19 	vmov	r0, r1, d9
 8004218:	2200      	movs	r2, #0
 800421a:	f7fc f9ed 	bl	80005f8 <__aeabi_dmul>
 800421e:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <_dtoa_r+0x648>)
 8004220:	ec41 0b19 	vmov	d9, r0, r1
 8004224:	2200      	movs	r2, #0
 8004226:	4640      	mov	r0, r8
 8004228:	4649      	mov	r1, r9
 800422a:	f7fc f9e5 	bl	80005f8 <__aeabi_dmul>
 800422e:	4680      	mov	r8, r0
 8004230:	4689      	mov	r9, r1
 8004232:	e7c5      	b.n	80041c0 <_dtoa_r+0x530>
 8004234:	ec51 0b17 	vmov	r0, r1, d7
 8004238:	f7fc f9de 	bl	80005f8 <__aeabi_dmul>
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	9d00      	ldr	r5, [sp, #0]
 8004240:	930f      	str	r3, [sp, #60]	; 0x3c
 8004242:	ec41 0b19 	vmov	d9, r0, r1
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	f7fc fc85 	bl	8000b58 <__aeabi_d2iz>
 800424e:	4606      	mov	r6, r0
 8004250:	f7fc f968 	bl	8000524 <__aeabi_i2d>
 8004254:	3630      	adds	r6, #48	; 0x30
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4640      	mov	r0, r8
 800425c:	4649      	mov	r1, r9
 800425e:	f7fc f813 	bl	8000288 <__aeabi_dsub>
 8004262:	f805 6b01 	strb.w	r6, [r5], #1
 8004266:	9b02      	ldr	r3, [sp, #8]
 8004268:	429d      	cmp	r5, r3
 800426a:	4680      	mov	r8, r0
 800426c:	4689      	mov	r9, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	d124      	bne.n	80042be <_dtoa_r+0x62e>
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <_dtoa_r+0x654>)
 8004276:	ec51 0b19 	vmov	r0, r1, d9
 800427a:	f7fc f807 	bl	800028c <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fc fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800428a:	2800      	cmp	r0, #0
 800428c:	d173      	bne.n	8004376 <_dtoa_r+0x6e6>
 800428e:	ec53 2b19 	vmov	r2, r3, d9
 8004292:	4914      	ldr	r1, [pc, #80]	; (80042e4 <_dtoa_r+0x654>)
 8004294:	2000      	movs	r0, #0
 8004296:	f7fb fff7 	bl	8000288 <__aeabi_dsub>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4640      	mov	r0, r8
 80042a0:	4649      	mov	r1, r9
 80042a2:	f7fc fc1b 	bl	8000adc <__aeabi_dcmplt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	f43f af2f 	beq.w	800410a <_dtoa_r+0x47a>
 80042ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80042ae:	1e6b      	subs	r3, r5, #1
 80042b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80042b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d0f8      	beq.n	80042ac <_dtoa_r+0x61c>
 80042ba:	46bb      	mov	fp, r7
 80042bc:	e04a      	b.n	8004354 <_dtoa_r+0x6c4>
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <_dtoa_r+0x648>)
 80042c0:	f7fc f99a 	bl	80005f8 <__aeabi_dmul>
 80042c4:	4680      	mov	r8, r0
 80042c6:	4689      	mov	r9, r1
 80042c8:	e7bd      	b.n	8004246 <_dtoa_r+0x5b6>
 80042ca:	bf00      	nop
 80042cc:	08005e10 	.word	0x08005e10
 80042d0:	08005de8 	.word	0x08005de8
 80042d4:	3ff00000 	.word	0x3ff00000
 80042d8:	40240000 	.word	0x40240000
 80042dc:	401c0000 	.word	0x401c0000
 80042e0:	40140000 	.word	0x40140000
 80042e4:	3fe00000 	.word	0x3fe00000
 80042e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80042ec:	9d00      	ldr	r5, [sp, #0]
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	4630      	mov	r0, r6
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fc faa9 	bl	800084c <__aeabi_ddiv>
 80042fa:	f7fc fc2d 	bl	8000b58 <__aeabi_d2iz>
 80042fe:	9001      	str	r0, [sp, #4]
 8004300:	f7fc f910 	bl	8000524 <__aeabi_i2d>
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	f7fc f976 	bl	80005f8 <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	f7fb ffb8 	bl	8000288 <__aeabi_dsub>
 8004318:	9e01      	ldr	r6, [sp, #4]
 800431a:	9f04      	ldr	r7, [sp, #16]
 800431c:	3630      	adds	r6, #48	; 0x30
 800431e:	f805 6b01 	strb.w	r6, [r5], #1
 8004322:	9e00      	ldr	r6, [sp, #0]
 8004324:	1bae      	subs	r6, r5, r6
 8004326:	42b7      	cmp	r7, r6
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	d134      	bne.n	8004398 <_dtoa_r+0x708>
 800432e:	f7fb ffad 	bl	800028c <__adddf3>
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	4606      	mov	r6, r0
 8004338:	460f      	mov	r7, r1
 800433a:	f7fc fbed 	bl	8000b18 <__aeabi_dcmpgt>
 800433e:	b9c8      	cbnz	r0, 8004374 <_dtoa_r+0x6e4>
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	4630      	mov	r0, r6
 8004346:	4639      	mov	r1, r7
 8004348:	f7fc fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800434c:	b110      	cbz	r0, 8004354 <_dtoa_r+0x6c4>
 800434e:	9b01      	ldr	r3, [sp, #4]
 8004350:	07db      	lsls	r3, r3, #31
 8004352:	d40f      	bmi.n	8004374 <_dtoa_r+0x6e4>
 8004354:	4651      	mov	r1, sl
 8004356:	4620      	mov	r0, r4
 8004358:	f000 fbcc 	bl	8004af4 <_Bfree>
 800435c:	2300      	movs	r3, #0
 800435e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004360:	702b      	strb	r3, [r5, #0]
 8004362:	f10b 0301 	add.w	r3, fp, #1
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800436a:	2b00      	cmp	r3, #0
 800436c:	f43f ace2 	beq.w	8003d34 <_dtoa_r+0xa4>
 8004370:	601d      	str	r5, [r3, #0]
 8004372:	e4df      	b.n	8003d34 <_dtoa_r+0xa4>
 8004374:	465f      	mov	r7, fp
 8004376:	462b      	mov	r3, r5
 8004378:	461d      	mov	r5, r3
 800437a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800437e:	2a39      	cmp	r2, #57	; 0x39
 8004380:	d106      	bne.n	8004390 <_dtoa_r+0x700>
 8004382:	9a00      	ldr	r2, [sp, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d1f7      	bne.n	8004378 <_dtoa_r+0x6e8>
 8004388:	9900      	ldr	r1, [sp, #0]
 800438a:	2230      	movs	r2, #48	; 0x30
 800438c:	3701      	adds	r7, #1
 800438e:	700a      	strb	r2, [r1, #0]
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	3201      	adds	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e790      	b.n	80042ba <_dtoa_r+0x62a>
 8004398:	4ba3      	ldr	r3, [pc, #652]	; (8004628 <_dtoa_r+0x998>)
 800439a:	2200      	movs	r2, #0
 800439c:	f7fc f92c 	bl	80005f8 <__aeabi_dmul>
 80043a0:	2200      	movs	r2, #0
 80043a2:	2300      	movs	r3, #0
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	f7fc fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d09e      	beq.n	80042ee <_dtoa_r+0x65e>
 80043b0:	e7d0      	b.n	8004354 <_dtoa_r+0x6c4>
 80043b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	f000 80ca 	beq.w	800454e <_dtoa_r+0x8be>
 80043ba:	9a07      	ldr	r2, [sp, #28]
 80043bc:	2a01      	cmp	r2, #1
 80043be:	f300 80ad 	bgt.w	800451c <_dtoa_r+0x88c>
 80043c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	f000 80a5 	beq.w	8004514 <_dtoa_r+0x884>
 80043ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043ce:	9e08      	ldr	r6, [sp, #32]
 80043d0:	9d05      	ldr	r5, [sp, #20]
 80043d2:	9a05      	ldr	r2, [sp, #20]
 80043d4:	441a      	add	r2, r3
 80043d6:	9205      	str	r2, [sp, #20]
 80043d8:	9a06      	ldr	r2, [sp, #24]
 80043da:	2101      	movs	r1, #1
 80043dc:	441a      	add	r2, r3
 80043de:	4620      	mov	r0, r4
 80043e0:	9206      	str	r2, [sp, #24]
 80043e2:	f000 fc3d 	bl	8004c60 <__i2b>
 80043e6:	4607      	mov	r7, r0
 80043e8:	b165      	cbz	r5, 8004404 <_dtoa_r+0x774>
 80043ea:	9b06      	ldr	r3, [sp, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dd09      	ble.n	8004404 <_dtoa_r+0x774>
 80043f0:	42ab      	cmp	r3, r5
 80043f2:	9a05      	ldr	r2, [sp, #20]
 80043f4:	bfa8      	it	ge
 80043f6:	462b      	movge	r3, r5
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	9205      	str	r2, [sp, #20]
 80043fc:	9a06      	ldr	r2, [sp, #24]
 80043fe:	1aed      	subs	r5, r5, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	9306      	str	r3, [sp, #24]
 8004404:	9b08      	ldr	r3, [sp, #32]
 8004406:	b1f3      	cbz	r3, 8004446 <_dtoa_r+0x7b6>
 8004408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80a3 	beq.w	8004556 <_dtoa_r+0x8c6>
 8004410:	2e00      	cmp	r6, #0
 8004412:	dd10      	ble.n	8004436 <_dtoa_r+0x7a6>
 8004414:	4639      	mov	r1, r7
 8004416:	4632      	mov	r2, r6
 8004418:	4620      	mov	r0, r4
 800441a:	f000 fce1 	bl	8004de0 <__pow5mult>
 800441e:	4652      	mov	r2, sl
 8004420:	4601      	mov	r1, r0
 8004422:	4607      	mov	r7, r0
 8004424:	4620      	mov	r0, r4
 8004426:	f000 fc31 	bl	8004c8c <__multiply>
 800442a:	4651      	mov	r1, sl
 800442c:	4680      	mov	r8, r0
 800442e:	4620      	mov	r0, r4
 8004430:	f000 fb60 	bl	8004af4 <_Bfree>
 8004434:	46c2      	mov	sl, r8
 8004436:	9b08      	ldr	r3, [sp, #32]
 8004438:	1b9a      	subs	r2, r3, r6
 800443a:	d004      	beq.n	8004446 <_dtoa_r+0x7b6>
 800443c:	4651      	mov	r1, sl
 800443e:	4620      	mov	r0, r4
 8004440:	f000 fcce 	bl	8004de0 <__pow5mult>
 8004444:	4682      	mov	sl, r0
 8004446:	2101      	movs	r1, #1
 8004448:	4620      	mov	r0, r4
 800444a:	f000 fc09 	bl	8004c60 <__i2b>
 800444e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	4606      	mov	r6, r0
 8004454:	f340 8081 	ble.w	800455a <_dtoa_r+0x8ca>
 8004458:	461a      	mov	r2, r3
 800445a:	4601      	mov	r1, r0
 800445c:	4620      	mov	r0, r4
 800445e:	f000 fcbf 	bl	8004de0 <__pow5mult>
 8004462:	9b07      	ldr	r3, [sp, #28]
 8004464:	2b01      	cmp	r3, #1
 8004466:	4606      	mov	r6, r0
 8004468:	dd7a      	ble.n	8004560 <_dtoa_r+0x8d0>
 800446a:	f04f 0800 	mov.w	r8, #0
 800446e:	6933      	ldr	r3, [r6, #16]
 8004470:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004474:	6918      	ldr	r0, [r3, #16]
 8004476:	f000 fba5 	bl	8004bc4 <__hi0bits>
 800447a:	f1c0 0020 	rsb	r0, r0, #32
 800447e:	9b06      	ldr	r3, [sp, #24]
 8004480:	4418      	add	r0, r3
 8004482:	f010 001f 	ands.w	r0, r0, #31
 8004486:	f000 8094 	beq.w	80045b2 <_dtoa_r+0x922>
 800448a:	f1c0 0320 	rsb	r3, r0, #32
 800448e:	2b04      	cmp	r3, #4
 8004490:	f340 8085 	ble.w	800459e <_dtoa_r+0x90e>
 8004494:	9b05      	ldr	r3, [sp, #20]
 8004496:	f1c0 001c 	rsb	r0, r0, #28
 800449a:	4403      	add	r3, r0
 800449c:	9305      	str	r3, [sp, #20]
 800449e:	9b06      	ldr	r3, [sp, #24]
 80044a0:	4403      	add	r3, r0
 80044a2:	4405      	add	r5, r0
 80044a4:	9306      	str	r3, [sp, #24]
 80044a6:	9b05      	ldr	r3, [sp, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dd05      	ble.n	80044b8 <_dtoa_r+0x828>
 80044ac:	4651      	mov	r1, sl
 80044ae:	461a      	mov	r2, r3
 80044b0:	4620      	mov	r0, r4
 80044b2:	f000 fcef 	bl	8004e94 <__lshift>
 80044b6:	4682      	mov	sl, r0
 80044b8:	9b06      	ldr	r3, [sp, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	dd05      	ble.n	80044ca <_dtoa_r+0x83a>
 80044be:	4631      	mov	r1, r6
 80044c0:	461a      	mov	r2, r3
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 fce6 	bl	8004e94 <__lshift>
 80044c8:	4606      	mov	r6, r0
 80044ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d072      	beq.n	80045b6 <_dtoa_r+0x926>
 80044d0:	4631      	mov	r1, r6
 80044d2:	4650      	mov	r0, sl
 80044d4:	f000 fd4a 	bl	8004f6c <__mcmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	da6c      	bge.n	80045b6 <_dtoa_r+0x926>
 80044dc:	2300      	movs	r3, #0
 80044de:	4651      	mov	r1, sl
 80044e0:	220a      	movs	r2, #10
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 fb28 	bl	8004b38 <__multadd>
 80044e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044ee:	4682      	mov	sl, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 81b0 	beq.w	8004856 <_dtoa_r+0xbc6>
 80044f6:	2300      	movs	r3, #0
 80044f8:	4639      	mov	r1, r7
 80044fa:	220a      	movs	r2, #10
 80044fc:	4620      	mov	r0, r4
 80044fe:	f000 fb1b 	bl	8004b38 <__multadd>
 8004502:	9b01      	ldr	r3, [sp, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	4607      	mov	r7, r0
 8004508:	f300 8096 	bgt.w	8004638 <_dtoa_r+0x9a8>
 800450c:	9b07      	ldr	r3, [sp, #28]
 800450e:	2b02      	cmp	r3, #2
 8004510:	dc59      	bgt.n	80045c6 <_dtoa_r+0x936>
 8004512:	e091      	b.n	8004638 <_dtoa_r+0x9a8>
 8004514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800451a:	e758      	b.n	80043ce <_dtoa_r+0x73e>
 800451c:	9b04      	ldr	r3, [sp, #16]
 800451e:	1e5e      	subs	r6, r3, #1
 8004520:	9b08      	ldr	r3, [sp, #32]
 8004522:	42b3      	cmp	r3, r6
 8004524:	bfbf      	itttt	lt
 8004526:	9b08      	ldrlt	r3, [sp, #32]
 8004528:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800452a:	9608      	strlt	r6, [sp, #32]
 800452c:	1af3      	sublt	r3, r6, r3
 800452e:	bfb4      	ite	lt
 8004530:	18d2      	addlt	r2, r2, r3
 8004532:	1b9e      	subge	r6, r3, r6
 8004534:	9b04      	ldr	r3, [sp, #16]
 8004536:	bfbc      	itt	lt
 8004538:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800453a:	2600      	movlt	r6, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfb7      	itett	lt
 8004540:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004544:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004548:	1a9d      	sublt	r5, r3, r2
 800454a:	2300      	movlt	r3, #0
 800454c:	e741      	b.n	80043d2 <_dtoa_r+0x742>
 800454e:	9e08      	ldr	r6, [sp, #32]
 8004550:	9d05      	ldr	r5, [sp, #20]
 8004552:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004554:	e748      	b.n	80043e8 <_dtoa_r+0x758>
 8004556:	9a08      	ldr	r2, [sp, #32]
 8004558:	e770      	b.n	800443c <_dtoa_r+0x7ac>
 800455a:	9b07      	ldr	r3, [sp, #28]
 800455c:	2b01      	cmp	r3, #1
 800455e:	dc19      	bgt.n	8004594 <_dtoa_r+0x904>
 8004560:	9b02      	ldr	r3, [sp, #8]
 8004562:	b9bb      	cbnz	r3, 8004594 <_dtoa_r+0x904>
 8004564:	9b03      	ldr	r3, [sp, #12]
 8004566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456a:	b99b      	cbnz	r3, 8004594 <_dtoa_r+0x904>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004572:	0d1b      	lsrs	r3, r3, #20
 8004574:	051b      	lsls	r3, r3, #20
 8004576:	b183      	cbz	r3, 800459a <_dtoa_r+0x90a>
 8004578:	9b05      	ldr	r3, [sp, #20]
 800457a:	3301      	adds	r3, #1
 800457c:	9305      	str	r3, [sp, #20]
 800457e:	9b06      	ldr	r3, [sp, #24]
 8004580:	3301      	adds	r3, #1
 8004582:	9306      	str	r3, [sp, #24]
 8004584:	f04f 0801 	mov.w	r8, #1
 8004588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f af6f 	bne.w	800446e <_dtoa_r+0x7de>
 8004590:	2001      	movs	r0, #1
 8004592:	e774      	b.n	800447e <_dtoa_r+0x7ee>
 8004594:	f04f 0800 	mov.w	r8, #0
 8004598:	e7f6      	b.n	8004588 <_dtoa_r+0x8f8>
 800459a:	4698      	mov	r8, r3
 800459c:	e7f4      	b.n	8004588 <_dtoa_r+0x8f8>
 800459e:	d082      	beq.n	80044a6 <_dtoa_r+0x816>
 80045a0:	9a05      	ldr	r2, [sp, #20]
 80045a2:	331c      	adds	r3, #28
 80045a4:	441a      	add	r2, r3
 80045a6:	9205      	str	r2, [sp, #20]
 80045a8:	9a06      	ldr	r2, [sp, #24]
 80045aa:	441a      	add	r2, r3
 80045ac:	441d      	add	r5, r3
 80045ae:	9206      	str	r2, [sp, #24]
 80045b0:	e779      	b.n	80044a6 <_dtoa_r+0x816>
 80045b2:	4603      	mov	r3, r0
 80045b4:	e7f4      	b.n	80045a0 <_dtoa_r+0x910>
 80045b6:	9b04      	ldr	r3, [sp, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dc37      	bgt.n	800462c <_dtoa_r+0x99c>
 80045bc:	9b07      	ldr	r3, [sp, #28]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	dd34      	ble.n	800462c <_dtoa_r+0x99c>
 80045c2:	9b04      	ldr	r3, [sp, #16]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	b963      	cbnz	r3, 80045e4 <_dtoa_r+0x954>
 80045ca:	4631      	mov	r1, r6
 80045cc:	2205      	movs	r2, #5
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 fab2 	bl	8004b38 <__multadd>
 80045d4:	4601      	mov	r1, r0
 80045d6:	4606      	mov	r6, r0
 80045d8:	4650      	mov	r0, sl
 80045da:	f000 fcc7 	bl	8004f6c <__mcmp>
 80045de:	2800      	cmp	r0, #0
 80045e0:	f73f adbb 	bgt.w	800415a <_dtoa_r+0x4ca>
 80045e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e6:	9d00      	ldr	r5, [sp, #0]
 80045e8:	ea6f 0b03 	mvn.w	fp, r3
 80045ec:	f04f 0800 	mov.w	r8, #0
 80045f0:	4631      	mov	r1, r6
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 fa7e 	bl	8004af4 <_Bfree>
 80045f8:	2f00      	cmp	r7, #0
 80045fa:	f43f aeab 	beq.w	8004354 <_dtoa_r+0x6c4>
 80045fe:	f1b8 0f00 	cmp.w	r8, #0
 8004602:	d005      	beq.n	8004610 <_dtoa_r+0x980>
 8004604:	45b8      	cmp	r8, r7
 8004606:	d003      	beq.n	8004610 <_dtoa_r+0x980>
 8004608:	4641      	mov	r1, r8
 800460a:	4620      	mov	r0, r4
 800460c:	f000 fa72 	bl	8004af4 <_Bfree>
 8004610:	4639      	mov	r1, r7
 8004612:	4620      	mov	r0, r4
 8004614:	f000 fa6e 	bl	8004af4 <_Bfree>
 8004618:	e69c      	b.n	8004354 <_dtoa_r+0x6c4>
 800461a:	2600      	movs	r6, #0
 800461c:	4637      	mov	r7, r6
 800461e:	e7e1      	b.n	80045e4 <_dtoa_r+0x954>
 8004620:	46bb      	mov	fp, r7
 8004622:	4637      	mov	r7, r6
 8004624:	e599      	b.n	800415a <_dtoa_r+0x4ca>
 8004626:	bf00      	nop
 8004628:	40240000 	.word	0x40240000
 800462c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80c8 	beq.w	80047c4 <_dtoa_r+0xb34>
 8004634:	9b04      	ldr	r3, [sp, #16]
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	2d00      	cmp	r5, #0
 800463a:	dd05      	ble.n	8004648 <_dtoa_r+0x9b8>
 800463c:	4639      	mov	r1, r7
 800463e:	462a      	mov	r2, r5
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fc27 	bl	8004e94 <__lshift>
 8004646:	4607      	mov	r7, r0
 8004648:	f1b8 0f00 	cmp.w	r8, #0
 800464c:	d05b      	beq.n	8004706 <_dtoa_r+0xa76>
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4620      	mov	r0, r4
 8004652:	f000 fa0f 	bl	8004a74 <_Balloc>
 8004656:	4605      	mov	r5, r0
 8004658:	b928      	cbnz	r0, 8004666 <_dtoa_r+0x9d6>
 800465a:	4b83      	ldr	r3, [pc, #524]	; (8004868 <_dtoa_r+0xbd8>)
 800465c:	4602      	mov	r2, r0
 800465e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004662:	f7ff bb2e 	b.w	8003cc2 <_dtoa_r+0x32>
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	3202      	adds	r2, #2
 800466a:	0092      	lsls	r2, r2, #2
 800466c:	f107 010c 	add.w	r1, r7, #12
 8004670:	300c      	adds	r0, #12
 8004672:	f000 ffab 	bl	80055cc <memcpy>
 8004676:	2201      	movs	r2, #1
 8004678:	4629      	mov	r1, r5
 800467a:	4620      	mov	r0, r4
 800467c:	f000 fc0a 	bl	8004e94 <__lshift>
 8004680:	9b00      	ldr	r3, [sp, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800468a:	4413      	add	r3, r2
 800468c:	9308      	str	r3, [sp, #32]
 800468e:	9b02      	ldr	r3, [sp, #8]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	46b8      	mov	r8, r7
 8004696:	9306      	str	r3, [sp, #24]
 8004698:	4607      	mov	r7, r0
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	4631      	mov	r1, r6
 800469e:	3b01      	subs	r3, #1
 80046a0:	4650      	mov	r0, sl
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	f7ff fa6b 	bl	8003b7e <quorem>
 80046a8:	4641      	mov	r1, r8
 80046aa:	9002      	str	r0, [sp, #8]
 80046ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80046b0:	4650      	mov	r0, sl
 80046b2:	f000 fc5b 	bl	8004f6c <__mcmp>
 80046b6:	463a      	mov	r2, r7
 80046b8:	9005      	str	r0, [sp, #20]
 80046ba:	4631      	mov	r1, r6
 80046bc:	4620      	mov	r0, r4
 80046be:	f000 fc71 	bl	8004fa4 <__mdiff>
 80046c2:	68c2      	ldr	r2, [r0, #12]
 80046c4:	4605      	mov	r5, r0
 80046c6:	bb02      	cbnz	r2, 800470a <_dtoa_r+0xa7a>
 80046c8:	4601      	mov	r1, r0
 80046ca:	4650      	mov	r0, sl
 80046cc:	f000 fc4e 	bl	8004f6c <__mcmp>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4629      	mov	r1, r5
 80046d4:	4620      	mov	r0, r4
 80046d6:	9209      	str	r2, [sp, #36]	; 0x24
 80046d8:	f000 fa0c 	bl	8004af4 <_Bfree>
 80046dc:	9b07      	ldr	r3, [sp, #28]
 80046de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e0:	9d04      	ldr	r5, [sp, #16]
 80046e2:	ea43 0102 	orr.w	r1, r3, r2
 80046e6:	9b06      	ldr	r3, [sp, #24]
 80046e8:	4319      	orrs	r1, r3
 80046ea:	d110      	bne.n	800470e <_dtoa_r+0xa7e>
 80046ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80046f0:	d029      	beq.n	8004746 <_dtoa_r+0xab6>
 80046f2:	9b05      	ldr	r3, [sp, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	dd02      	ble.n	80046fe <_dtoa_r+0xa6e>
 80046f8:	9b02      	ldr	r3, [sp, #8]
 80046fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80046fe:	9b01      	ldr	r3, [sp, #4]
 8004700:	f883 9000 	strb.w	r9, [r3]
 8004704:	e774      	b.n	80045f0 <_dtoa_r+0x960>
 8004706:	4638      	mov	r0, r7
 8004708:	e7ba      	b.n	8004680 <_dtoa_r+0x9f0>
 800470a:	2201      	movs	r2, #1
 800470c:	e7e1      	b.n	80046d2 <_dtoa_r+0xa42>
 800470e:	9b05      	ldr	r3, [sp, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	db04      	blt.n	800471e <_dtoa_r+0xa8e>
 8004714:	9907      	ldr	r1, [sp, #28]
 8004716:	430b      	orrs	r3, r1
 8004718:	9906      	ldr	r1, [sp, #24]
 800471a:	430b      	orrs	r3, r1
 800471c:	d120      	bne.n	8004760 <_dtoa_r+0xad0>
 800471e:	2a00      	cmp	r2, #0
 8004720:	dded      	ble.n	80046fe <_dtoa_r+0xa6e>
 8004722:	4651      	mov	r1, sl
 8004724:	2201      	movs	r2, #1
 8004726:	4620      	mov	r0, r4
 8004728:	f000 fbb4 	bl	8004e94 <__lshift>
 800472c:	4631      	mov	r1, r6
 800472e:	4682      	mov	sl, r0
 8004730:	f000 fc1c 	bl	8004f6c <__mcmp>
 8004734:	2800      	cmp	r0, #0
 8004736:	dc03      	bgt.n	8004740 <_dtoa_r+0xab0>
 8004738:	d1e1      	bne.n	80046fe <_dtoa_r+0xa6e>
 800473a:	f019 0f01 	tst.w	r9, #1
 800473e:	d0de      	beq.n	80046fe <_dtoa_r+0xa6e>
 8004740:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004744:	d1d8      	bne.n	80046f8 <_dtoa_r+0xa68>
 8004746:	9a01      	ldr	r2, [sp, #4]
 8004748:	2339      	movs	r3, #57	; 0x39
 800474a:	7013      	strb	r3, [r2, #0]
 800474c:	462b      	mov	r3, r5
 800474e:	461d      	mov	r5, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004756:	2a39      	cmp	r2, #57	; 0x39
 8004758:	d06c      	beq.n	8004834 <_dtoa_r+0xba4>
 800475a:	3201      	adds	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e747      	b.n	80045f0 <_dtoa_r+0x960>
 8004760:	2a00      	cmp	r2, #0
 8004762:	dd07      	ble.n	8004774 <_dtoa_r+0xae4>
 8004764:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004768:	d0ed      	beq.n	8004746 <_dtoa_r+0xab6>
 800476a:	9a01      	ldr	r2, [sp, #4]
 800476c:	f109 0301 	add.w	r3, r9, #1
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	e73d      	b.n	80045f0 <_dtoa_r+0x960>
 8004774:	9b04      	ldr	r3, [sp, #16]
 8004776:	9a08      	ldr	r2, [sp, #32]
 8004778:	f803 9c01 	strb.w	r9, [r3, #-1]
 800477c:	4293      	cmp	r3, r2
 800477e:	d043      	beq.n	8004808 <_dtoa_r+0xb78>
 8004780:	4651      	mov	r1, sl
 8004782:	2300      	movs	r3, #0
 8004784:	220a      	movs	r2, #10
 8004786:	4620      	mov	r0, r4
 8004788:	f000 f9d6 	bl	8004b38 <__multadd>
 800478c:	45b8      	cmp	r8, r7
 800478e:	4682      	mov	sl, r0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f04f 020a 	mov.w	r2, #10
 8004798:	4641      	mov	r1, r8
 800479a:	4620      	mov	r0, r4
 800479c:	d107      	bne.n	80047ae <_dtoa_r+0xb1e>
 800479e:	f000 f9cb 	bl	8004b38 <__multadd>
 80047a2:	4680      	mov	r8, r0
 80047a4:	4607      	mov	r7, r0
 80047a6:	9b04      	ldr	r3, [sp, #16]
 80047a8:	3301      	adds	r3, #1
 80047aa:	9304      	str	r3, [sp, #16]
 80047ac:	e775      	b.n	800469a <_dtoa_r+0xa0a>
 80047ae:	f000 f9c3 	bl	8004b38 <__multadd>
 80047b2:	4639      	mov	r1, r7
 80047b4:	4680      	mov	r8, r0
 80047b6:	2300      	movs	r3, #0
 80047b8:	220a      	movs	r2, #10
 80047ba:	4620      	mov	r0, r4
 80047bc:	f000 f9bc 	bl	8004b38 <__multadd>
 80047c0:	4607      	mov	r7, r0
 80047c2:	e7f0      	b.n	80047a6 <_dtoa_r+0xb16>
 80047c4:	9b04      	ldr	r3, [sp, #16]
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	9d00      	ldr	r5, [sp, #0]
 80047ca:	4631      	mov	r1, r6
 80047cc:	4650      	mov	r0, sl
 80047ce:	f7ff f9d6 	bl	8003b7e <quorem>
 80047d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	f805 9b01 	strb.w	r9, [r5], #1
 80047dc:	1aea      	subs	r2, r5, r3
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	dd07      	ble.n	80047f4 <_dtoa_r+0xb64>
 80047e4:	4651      	mov	r1, sl
 80047e6:	2300      	movs	r3, #0
 80047e8:	220a      	movs	r2, #10
 80047ea:	4620      	mov	r0, r4
 80047ec:	f000 f9a4 	bl	8004b38 <__multadd>
 80047f0:	4682      	mov	sl, r0
 80047f2:	e7ea      	b.n	80047ca <_dtoa_r+0xb3a>
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfc8      	it	gt
 80047fa:	461d      	movgt	r5, r3
 80047fc:	9b00      	ldr	r3, [sp, #0]
 80047fe:	bfd8      	it	le
 8004800:	2501      	movle	r5, #1
 8004802:	441d      	add	r5, r3
 8004804:	f04f 0800 	mov.w	r8, #0
 8004808:	4651      	mov	r1, sl
 800480a:	2201      	movs	r2, #1
 800480c:	4620      	mov	r0, r4
 800480e:	f000 fb41 	bl	8004e94 <__lshift>
 8004812:	4631      	mov	r1, r6
 8004814:	4682      	mov	sl, r0
 8004816:	f000 fba9 	bl	8004f6c <__mcmp>
 800481a:	2800      	cmp	r0, #0
 800481c:	dc96      	bgt.n	800474c <_dtoa_r+0xabc>
 800481e:	d102      	bne.n	8004826 <_dtoa_r+0xb96>
 8004820:	f019 0f01 	tst.w	r9, #1
 8004824:	d192      	bne.n	800474c <_dtoa_r+0xabc>
 8004826:	462b      	mov	r3, r5
 8004828:	461d      	mov	r5, r3
 800482a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800482e:	2a30      	cmp	r2, #48	; 0x30
 8004830:	d0fa      	beq.n	8004828 <_dtoa_r+0xb98>
 8004832:	e6dd      	b.n	80045f0 <_dtoa_r+0x960>
 8004834:	9a00      	ldr	r2, [sp, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d189      	bne.n	800474e <_dtoa_r+0xabe>
 800483a:	f10b 0b01 	add.w	fp, fp, #1
 800483e:	2331      	movs	r3, #49	; 0x31
 8004840:	e796      	b.n	8004770 <_dtoa_r+0xae0>
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <_dtoa_r+0xbdc>)
 8004844:	f7ff ba99 	b.w	8003d7a <_dtoa_r+0xea>
 8004848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f aa6d 	bne.w	8003d2a <_dtoa_r+0x9a>
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <_dtoa_r+0xbe0>)
 8004852:	f7ff ba92 	b.w	8003d7a <_dtoa_r+0xea>
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	dcb5      	bgt.n	80047c8 <_dtoa_r+0xb38>
 800485c:	9b07      	ldr	r3, [sp, #28]
 800485e:	2b02      	cmp	r3, #2
 8004860:	f73f aeb1 	bgt.w	80045c6 <_dtoa_r+0x936>
 8004864:	e7b0      	b.n	80047c8 <_dtoa_r+0xb38>
 8004866:	bf00      	nop
 8004868:	08005d7b 	.word	0x08005d7b
 800486c:	08005cdb 	.word	0x08005cdb
 8004870:	08005cff 	.word	0x08005cff

08004874 <_free_r>:
 8004874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004876:	2900      	cmp	r1, #0
 8004878:	d044      	beq.n	8004904 <_free_r+0x90>
 800487a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800487e:	9001      	str	r0, [sp, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f1a1 0404 	sub.w	r4, r1, #4
 8004886:	bfb8      	it	lt
 8004888:	18e4      	addlt	r4, r4, r3
 800488a:	f000 f8e7 	bl	8004a5c <__malloc_lock>
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <_free_r+0x94>)
 8004890:	9801      	ldr	r0, [sp, #4]
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	b933      	cbnz	r3, 80048a4 <_free_r+0x30>
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	6014      	str	r4, [r2, #0]
 800489a:	b003      	add	sp, #12
 800489c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048a0:	f000 b8e2 	b.w	8004a68 <__malloc_unlock>
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	d908      	bls.n	80048ba <_free_r+0x46>
 80048a8:	6825      	ldr	r5, [r4, #0]
 80048aa:	1961      	adds	r1, r4, r5
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf01      	itttt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	1949      	addeq	r1, r1, r5
 80048b6:	6021      	streq	r1, [r4, #0]
 80048b8:	e7ed      	b.n	8004896 <_free_r+0x22>
 80048ba:	461a      	mov	r2, r3
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b10b      	cbz	r3, 80048c4 <_free_r+0x50>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d9fa      	bls.n	80048ba <_free_r+0x46>
 80048c4:	6811      	ldr	r1, [r2, #0]
 80048c6:	1855      	adds	r5, r2, r1
 80048c8:	42a5      	cmp	r5, r4
 80048ca:	d10b      	bne.n	80048e4 <_free_r+0x70>
 80048cc:	6824      	ldr	r4, [r4, #0]
 80048ce:	4421      	add	r1, r4
 80048d0:	1854      	adds	r4, r2, r1
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	6011      	str	r1, [r2, #0]
 80048d6:	d1e0      	bne.n	800489a <_free_r+0x26>
 80048d8:	681c      	ldr	r4, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	6053      	str	r3, [r2, #4]
 80048de:	440c      	add	r4, r1
 80048e0:	6014      	str	r4, [r2, #0]
 80048e2:	e7da      	b.n	800489a <_free_r+0x26>
 80048e4:	d902      	bls.n	80048ec <_free_r+0x78>
 80048e6:	230c      	movs	r3, #12
 80048e8:	6003      	str	r3, [r0, #0]
 80048ea:	e7d6      	b.n	800489a <_free_r+0x26>
 80048ec:	6825      	ldr	r5, [r4, #0]
 80048ee:	1961      	adds	r1, r4, r5
 80048f0:	428b      	cmp	r3, r1
 80048f2:	bf04      	itt	eq
 80048f4:	6819      	ldreq	r1, [r3, #0]
 80048f6:	685b      	ldreq	r3, [r3, #4]
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	bf04      	itt	eq
 80048fc:	1949      	addeq	r1, r1, r5
 80048fe:	6021      	streq	r1, [r4, #0]
 8004900:	6054      	str	r4, [r2, #4]
 8004902:	e7ca      	b.n	800489a <_free_r+0x26>
 8004904:	b003      	add	sp, #12
 8004906:	bd30      	pop	{r4, r5, pc}
 8004908:	20000408 	.word	0x20000408

0800490c <malloc>:
 800490c:	4b02      	ldr	r3, [pc, #8]	; (8004918 <malloc+0xc>)
 800490e:	4601      	mov	r1, r0
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	f000 b823 	b.w	800495c <_malloc_r>
 8004916:	bf00      	nop
 8004918:	2000005c 	.word	0x2000005c

0800491c <sbrk_aligned>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4e0e      	ldr	r6, [pc, #56]	; (8004958 <sbrk_aligned+0x3c>)
 8004920:	460c      	mov	r4, r1
 8004922:	6831      	ldr	r1, [r6, #0]
 8004924:	4605      	mov	r5, r0
 8004926:	b911      	cbnz	r1, 800492e <sbrk_aligned+0x12>
 8004928:	f000 fe40 	bl	80055ac <_sbrk_r>
 800492c:	6030      	str	r0, [r6, #0]
 800492e:	4621      	mov	r1, r4
 8004930:	4628      	mov	r0, r5
 8004932:	f000 fe3b 	bl	80055ac <_sbrk_r>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	d00a      	beq.n	8004950 <sbrk_aligned+0x34>
 800493a:	1cc4      	adds	r4, r0, #3
 800493c:	f024 0403 	bic.w	r4, r4, #3
 8004940:	42a0      	cmp	r0, r4
 8004942:	d007      	beq.n	8004954 <sbrk_aligned+0x38>
 8004944:	1a21      	subs	r1, r4, r0
 8004946:	4628      	mov	r0, r5
 8004948:	f000 fe30 	bl	80055ac <_sbrk_r>
 800494c:	3001      	adds	r0, #1
 800494e:	d101      	bne.n	8004954 <sbrk_aligned+0x38>
 8004950:	f04f 34ff 	mov.w	r4, #4294967295
 8004954:	4620      	mov	r0, r4
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	2000040c 	.word	0x2000040c

0800495c <_malloc_r>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	1ccd      	adds	r5, r1, #3
 8004962:	f025 0503 	bic.w	r5, r5, #3
 8004966:	3508      	adds	r5, #8
 8004968:	2d0c      	cmp	r5, #12
 800496a:	bf38      	it	cc
 800496c:	250c      	movcc	r5, #12
 800496e:	2d00      	cmp	r5, #0
 8004970:	4607      	mov	r7, r0
 8004972:	db01      	blt.n	8004978 <_malloc_r+0x1c>
 8004974:	42a9      	cmp	r1, r5
 8004976:	d905      	bls.n	8004984 <_malloc_r+0x28>
 8004978:	230c      	movs	r3, #12
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	2600      	movs	r6, #0
 800497e:	4630      	mov	r0, r6
 8004980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004984:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a58 <_malloc_r+0xfc>
 8004988:	f000 f868 	bl	8004a5c <__malloc_lock>
 800498c:	f8d8 3000 	ldr.w	r3, [r8]
 8004990:	461c      	mov	r4, r3
 8004992:	bb5c      	cbnz	r4, 80049ec <_malloc_r+0x90>
 8004994:	4629      	mov	r1, r5
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff ffc0 	bl	800491c <sbrk_aligned>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	4604      	mov	r4, r0
 80049a0:	d155      	bne.n	8004a4e <_malloc_r+0xf2>
 80049a2:	f8d8 4000 	ldr.w	r4, [r8]
 80049a6:	4626      	mov	r6, r4
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d145      	bne.n	8004a38 <_malloc_r+0xdc>
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	d048      	beq.n	8004a42 <_malloc_r+0xe6>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	4631      	mov	r1, r6
 80049b4:	4638      	mov	r0, r7
 80049b6:	eb04 0903 	add.w	r9, r4, r3
 80049ba:	f000 fdf7 	bl	80055ac <_sbrk_r>
 80049be:	4581      	cmp	r9, r0
 80049c0:	d13f      	bne.n	8004a42 <_malloc_r+0xe6>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	1a6d      	subs	r5, r5, r1
 80049c6:	4629      	mov	r1, r5
 80049c8:	4638      	mov	r0, r7
 80049ca:	f7ff ffa7 	bl	800491c <sbrk_aligned>
 80049ce:	3001      	adds	r0, #1
 80049d0:	d037      	beq.n	8004a42 <_malloc_r+0xe6>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	442b      	add	r3, r5
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	f8d8 3000 	ldr.w	r3, [r8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d038      	beq.n	8004a52 <_malloc_r+0xf6>
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	42a2      	cmp	r2, r4
 80049e4:	d12b      	bne.n	8004a3e <_malloc_r+0xe2>
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e00f      	b.n	8004a0c <_malloc_r+0xb0>
 80049ec:	6822      	ldr	r2, [r4, #0]
 80049ee:	1b52      	subs	r2, r2, r5
 80049f0:	d41f      	bmi.n	8004a32 <_malloc_r+0xd6>
 80049f2:	2a0b      	cmp	r2, #11
 80049f4:	d917      	bls.n	8004a26 <_malloc_r+0xca>
 80049f6:	1961      	adds	r1, r4, r5
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	6025      	str	r5, [r4, #0]
 80049fc:	bf18      	it	ne
 80049fe:	6059      	strne	r1, [r3, #4]
 8004a00:	6863      	ldr	r3, [r4, #4]
 8004a02:	bf08      	it	eq
 8004a04:	f8c8 1000 	streq.w	r1, [r8]
 8004a08:	5162      	str	r2, [r4, r5]
 8004a0a:	604b      	str	r3, [r1, #4]
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f104 060b 	add.w	r6, r4, #11
 8004a12:	f000 f829 	bl	8004a68 <__malloc_unlock>
 8004a16:	f026 0607 	bic.w	r6, r6, #7
 8004a1a:	1d23      	adds	r3, r4, #4
 8004a1c:	1af2      	subs	r2, r6, r3
 8004a1e:	d0ae      	beq.n	800497e <_malloc_r+0x22>
 8004a20:	1b9b      	subs	r3, r3, r6
 8004a22:	50a3      	str	r3, [r4, r2]
 8004a24:	e7ab      	b.n	800497e <_malloc_r+0x22>
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	6862      	ldr	r2, [r4, #4]
 8004a2a:	d1dd      	bne.n	80049e8 <_malloc_r+0x8c>
 8004a2c:	f8c8 2000 	str.w	r2, [r8]
 8004a30:	e7ec      	b.n	8004a0c <_malloc_r+0xb0>
 8004a32:	4623      	mov	r3, r4
 8004a34:	6864      	ldr	r4, [r4, #4]
 8004a36:	e7ac      	b.n	8004992 <_malloc_r+0x36>
 8004a38:	4634      	mov	r4, r6
 8004a3a:	6876      	ldr	r6, [r6, #4]
 8004a3c:	e7b4      	b.n	80049a8 <_malloc_r+0x4c>
 8004a3e:	4613      	mov	r3, r2
 8004a40:	e7cc      	b.n	80049dc <_malloc_r+0x80>
 8004a42:	230c      	movs	r3, #12
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4638      	mov	r0, r7
 8004a48:	f000 f80e 	bl	8004a68 <__malloc_unlock>
 8004a4c:	e797      	b.n	800497e <_malloc_r+0x22>
 8004a4e:	6025      	str	r5, [r4, #0]
 8004a50:	e7dc      	b.n	8004a0c <_malloc_r+0xb0>
 8004a52:	605b      	str	r3, [r3, #4]
 8004a54:	deff      	udf	#255	; 0xff
 8004a56:	bf00      	nop
 8004a58:	20000408 	.word	0x20000408

08004a5c <__malloc_lock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_lock+0x8>)
 8004a5e:	f7ff b88c 	b.w	8003b7a <__retarget_lock_acquire_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000404 	.word	0x20000404

08004a68 <__malloc_unlock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_unlock+0x8>)
 8004a6a:	f7ff b887 	b.w	8003b7c <__retarget_lock_release_recursive>
 8004a6e:	bf00      	nop
 8004a70:	20000404 	.word	0x20000404

08004a74 <_Balloc>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	69c6      	ldr	r6, [r0, #28]
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	b976      	cbnz	r6, 8004a9c <_Balloc+0x28>
 8004a7e:	2010      	movs	r0, #16
 8004a80:	f7ff ff44 	bl	800490c <malloc>
 8004a84:	4602      	mov	r2, r0
 8004a86:	61e0      	str	r0, [r4, #28]
 8004a88:	b920      	cbnz	r0, 8004a94 <_Balloc+0x20>
 8004a8a:	4b18      	ldr	r3, [pc, #96]	; (8004aec <_Balloc+0x78>)
 8004a8c:	4818      	ldr	r0, [pc, #96]	; (8004af0 <_Balloc+0x7c>)
 8004a8e:	216b      	movs	r1, #107	; 0x6b
 8004a90:	f000 fdaa 	bl	80055e8 <__assert_func>
 8004a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a98:	6006      	str	r6, [r0, #0]
 8004a9a:	60c6      	str	r6, [r0, #12]
 8004a9c:	69e6      	ldr	r6, [r4, #28]
 8004a9e:	68f3      	ldr	r3, [r6, #12]
 8004aa0:	b183      	cbz	r3, 8004ac4 <_Balloc+0x50>
 8004aa2:	69e3      	ldr	r3, [r4, #28]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004aaa:	b9b8      	cbnz	r0, 8004adc <_Balloc+0x68>
 8004aac:	2101      	movs	r1, #1
 8004aae:	fa01 f605 	lsl.w	r6, r1, r5
 8004ab2:	1d72      	adds	r2, r6, #5
 8004ab4:	0092      	lsls	r2, r2, #2
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 fdb4 	bl	8005624 <_calloc_r>
 8004abc:	b160      	cbz	r0, 8004ad8 <_Balloc+0x64>
 8004abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ac2:	e00e      	b.n	8004ae2 <_Balloc+0x6e>
 8004ac4:	2221      	movs	r2, #33	; 0x21
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fdab 	bl	8005624 <_calloc_r>
 8004ace:	69e3      	ldr	r3, [r4, #28]
 8004ad0:	60f0      	str	r0, [r6, #12]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e4      	bne.n	8004aa2 <_Balloc+0x2e>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	6802      	ldr	r2, [r0, #0]
 8004ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ae8:	e7f7      	b.n	8004ada <_Balloc+0x66>
 8004aea:	bf00      	nop
 8004aec:	08005d0c 	.word	0x08005d0c
 8004af0:	08005d8c 	.word	0x08005d8c

08004af4 <_Bfree>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	69c6      	ldr	r6, [r0, #28]
 8004af8:	4605      	mov	r5, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	b976      	cbnz	r6, 8004b1c <_Bfree+0x28>
 8004afe:	2010      	movs	r0, #16
 8004b00:	f7ff ff04 	bl	800490c <malloc>
 8004b04:	4602      	mov	r2, r0
 8004b06:	61e8      	str	r0, [r5, #28]
 8004b08:	b920      	cbnz	r0, 8004b14 <_Bfree+0x20>
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <_Bfree+0x3c>)
 8004b0c:	4809      	ldr	r0, [pc, #36]	; (8004b34 <_Bfree+0x40>)
 8004b0e:	218f      	movs	r1, #143	; 0x8f
 8004b10:	f000 fd6a 	bl	80055e8 <__assert_func>
 8004b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b18:	6006      	str	r6, [r0, #0]
 8004b1a:	60c6      	str	r6, [r0, #12]
 8004b1c:	b13c      	cbz	r4, 8004b2e <_Bfree+0x3a>
 8004b1e:	69eb      	ldr	r3, [r5, #28]
 8004b20:	6862      	ldr	r2, [r4, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b28:	6021      	str	r1, [r4, #0]
 8004b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	08005d0c 	.word	0x08005d0c
 8004b34:	08005d8c 	.word	0x08005d8c

08004b38 <__multadd>:
 8004b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3c:	690d      	ldr	r5, [r1, #16]
 8004b3e:	4607      	mov	r7, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	461e      	mov	r6, r3
 8004b44:	f101 0c14 	add.w	ip, r1, #20
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8004b4e:	b299      	uxth	r1, r3
 8004b50:	fb02 6101 	mla	r1, r2, r1, r6
 8004b54:	0c1e      	lsrs	r6, r3, #16
 8004b56:	0c0b      	lsrs	r3, r1, #16
 8004b58:	fb02 3306 	mla	r3, r2, r6, r3
 8004b5c:	b289      	uxth	r1, r1
 8004b5e:	3001      	adds	r0, #1
 8004b60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b64:	4285      	cmp	r5, r0
 8004b66:	f84c 1b04 	str.w	r1, [ip], #4
 8004b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b6e:	dcec      	bgt.n	8004b4a <__multadd+0x12>
 8004b70:	b30e      	cbz	r6, 8004bb6 <__multadd+0x7e>
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	42ab      	cmp	r3, r5
 8004b76:	dc19      	bgt.n	8004bac <__multadd+0x74>
 8004b78:	6861      	ldr	r1, [r4, #4]
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	3101      	adds	r1, #1
 8004b7e:	f7ff ff79 	bl	8004a74 <_Balloc>
 8004b82:	4680      	mov	r8, r0
 8004b84:	b928      	cbnz	r0, 8004b92 <__multadd+0x5a>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <__multadd+0x84>)
 8004b8a:	480d      	ldr	r0, [pc, #52]	; (8004bc0 <__multadd+0x88>)
 8004b8c:	21ba      	movs	r1, #186	; 0xba
 8004b8e:	f000 fd2b 	bl	80055e8 <__assert_func>
 8004b92:	6922      	ldr	r2, [r4, #16]
 8004b94:	3202      	adds	r2, #2
 8004b96:	f104 010c 	add.w	r1, r4, #12
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	300c      	adds	r0, #12
 8004b9e:	f000 fd15 	bl	80055cc <memcpy>
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	f7ff ffa5 	bl	8004af4 <_Bfree>
 8004baa:	4644      	mov	r4, r8
 8004bac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	615e      	str	r6, [r3, #20]
 8004bb4:	6125      	str	r5, [r4, #16]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bbc:	08005d7b 	.word	0x08005d7b
 8004bc0:	08005d8c 	.word	0x08005d8c

08004bc4 <__hi0bits>:
 8004bc4:	0c03      	lsrs	r3, r0, #16
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	b9d3      	cbnz	r3, 8004c00 <__hi0bits+0x3c>
 8004bca:	0400      	lsls	r0, r0, #16
 8004bcc:	2310      	movs	r3, #16
 8004bce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004bd2:	bf04      	itt	eq
 8004bd4:	0200      	lsleq	r0, r0, #8
 8004bd6:	3308      	addeq	r3, #8
 8004bd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004bdc:	bf04      	itt	eq
 8004bde:	0100      	lsleq	r0, r0, #4
 8004be0:	3304      	addeq	r3, #4
 8004be2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004be6:	bf04      	itt	eq
 8004be8:	0080      	lsleq	r0, r0, #2
 8004bea:	3302      	addeq	r3, #2
 8004bec:	2800      	cmp	r0, #0
 8004bee:	db05      	blt.n	8004bfc <__hi0bits+0x38>
 8004bf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004bf4:	f103 0301 	add.w	r3, r3, #1
 8004bf8:	bf08      	it	eq
 8004bfa:	2320      	moveq	r3, #32
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	4770      	bx	lr
 8004c00:	2300      	movs	r3, #0
 8004c02:	e7e4      	b.n	8004bce <__hi0bits+0xa>

08004c04 <__lo0bits>:
 8004c04:	6803      	ldr	r3, [r0, #0]
 8004c06:	f013 0207 	ands.w	r2, r3, #7
 8004c0a:	d00c      	beq.n	8004c26 <__lo0bits+0x22>
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	d422      	bmi.n	8004c56 <__lo0bits+0x52>
 8004c10:	079a      	lsls	r2, r3, #30
 8004c12:	bf49      	itett	mi
 8004c14:	085b      	lsrmi	r3, r3, #1
 8004c16:	089b      	lsrpl	r3, r3, #2
 8004c18:	6003      	strmi	r3, [r0, #0]
 8004c1a:	2201      	movmi	r2, #1
 8004c1c:	bf5c      	itt	pl
 8004c1e:	6003      	strpl	r3, [r0, #0]
 8004c20:	2202      	movpl	r2, #2
 8004c22:	4610      	mov	r0, r2
 8004c24:	4770      	bx	lr
 8004c26:	b299      	uxth	r1, r3
 8004c28:	b909      	cbnz	r1, 8004c2e <__lo0bits+0x2a>
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	b2d9      	uxtb	r1, r3
 8004c30:	b909      	cbnz	r1, 8004c36 <__lo0bits+0x32>
 8004c32:	3208      	adds	r2, #8
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	0719      	lsls	r1, r3, #28
 8004c38:	bf04      	itt	eq
 8004c3a:	091b      	lsreq	r3, r3, #4
 8004c3c:	3204      	addeq	r2, #4
 8004c3e:	0799      	lsls	r1, r3, #30
 8004c40:	bf04      	itt	eq
 8004c42:	089b      	lsreq	r3, r3, #2
 8004c44:	3202      	addeq	r2, #2
 8004c46:	07d9      	lsls	r1, r3, #31
 8004c48:	d403      	bmi.n	8004c52 <__lo0bits+0x4e>
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	f102 0201 	add.w	r2, r2, #1
 8004c50:	d003      	beq.n	8004c5a <__lo0bits+0x56>
 8004c52:	6003      	str	r3, [r0, #0]
 8004c54:	e7e5      	b.n	8004c22 <__lo0bits+0x1e>
 8004c56:	2200      	movs	r2, #0
 8004c58:	e7e3      	b.n	8004c22 <__lo0bits+0x1e>
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	e7e1      	b.n	8004c22 <__lo0bits+0x1e>
	...

08004c60 <__i2b>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	460c      	mov	r4, r1
 8004c64:	2101      	movs	r1, #1
 8004c66:	f7ff ff05 	bl	8004a74 <_Balloc>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	b928      	cbnz	r0, 8004c7a <__i2b+0x1a>
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <__i2b+0x24>)
 8004c70:	4805      	ldr	r0, [pc, #20]	; (8004c88 <__i2b+0x28>)
 8004c72:	f240 1145 	movw	r1, #325	; 0x145
 8004c76:	f000 fcb7 	bl	80055e8 <__assert_func>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	6144      	str	r4, [r0, #20]
 8004c7e:	6103      	str	r3, [r0, #16]
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	bf00      	nop
 8004c84:	08005d7b 	.word	0x08005d7b
 8004c88:	08005d8c 	.word	0x08005d8c

08004c8c <__multiply>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	4691      	mov	r9, r2
 8004c92:	690a      	ldr	r2, [r1, #16]
 8004c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	bfb8      	it	lt
 8004c9c:	460b      	movlt	r3, r1
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	bfbc      	itt	lt
 8004ca2:	464c      	movlt	r4, r9
 8004ca4:	4699      	movlt	r9, r3
 8004ca6:	6927      	ldr	r7, [r4, #16]
 8004ca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	6861      	ldr	r1, [r4, #4]
 8004cb0:	eb07 060a 	add.w	r6, r7, sl
 8004cb4:	42b3      	cmp	r3, r6
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	bfb8      	it	lt
 8004cba:	3101      	addlt	r1, #1
 8004cbc:	f7ff feda 	bl	8004a74 <_Balloc>
 8004cc0:	b930      	cbnz	r0, 8004cd0 <__multiply+0x44>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <__multiply+0x14c>)
 8004cc6:	4845      	ldr	r0, [pc, #276]	; (8004ddc <__multiply+0x150>)
 8004cc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004ccc:	f000 fc8c 	bl	80055e8 <__assert_func>
 8004cd0:	f100 0514 	add.w	r5, r0, #20
 8004cd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cd8:	462b      	mov	r3, r5
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4543      	cmp	r3, r8
 8004cde:	d321      	bcc.n	8004d24 <__multiply+0x98>
 8004ce0:	f104 0314 	add.w	r3, r4, #20
 8004ce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ce8:	f109 0314 	add.w	r3, r9, #20
 8004cec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004cf0:	9202      	str	r2, [sp, #8]
 8004cf2:	1b3a      	subs	r2, r7, r4
 8004cf4:	3a15      	subs	r2, #21
 8004cf6:	f022 0203 	bic.w	r2, r2, #3
 8004cfa:	3204      	adds	r2, #4
 8004cfc:	f104 0115 	add.w	r1, r4, #21
 8004d00:	428f      	cmp	r7, r1
 8004d02:	bf38      	it	cc
 8004d04:	2204      	movcc	r2, #4
 8004d06:	9201      	str	r2, [sp, #4]
 8004d08:	9a02      	ldr	r2, [sp, #8]
 8004d0a:	9303      	str	r3, [sp, #12]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d80c      	bhi.n	8004d2a <__multiply+0x9e>
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	dd03      	ble.n	8004d1c <__multiply+0x90>
 8004d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05b      	beq.n	8004dd4 <__multiply+0x148>
 8004d1c:	6106      	str	r6, [r0, #16]
 8004d1e:	b005      	add	sp, #20
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d24:	f843 2b04 	str.w	r2, [r3], #4
 8004d28:	e7d8      	b.n	8004cdc <__multiply+0x50>
 8004d2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d2e:	f1ba 0f00 	cmp.w	sl, #0
 8004d32:	d024      	beq.n	8004d7e <__multiply+0xf2>
 8004d34:	f104 0e14 	add.w	lr, r4, #20
 8004d38:	46a9      	mov	r9, r5
 8004d3a:	f04f 0c00 	mov.w	ip, #0
 8004d3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d42:	f8d9 1000 	ldr.w	r1, [r9]
 8004d46:	fa1f fb82 	uxth.w	fp, r2
 8004d4a:	b289      	uxth	r1, r1
 8004d4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d54:	f8d9 2000 	ldr.w	r2, [r9]
 8004d58:	4461      	add	r1, ip
 8004d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d66:	b289      	uxth	r1, r1
 8004d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d6c:	4577      	cmp	r7, lr
 8004d6e:	f849 1b04 	str.w	r1, [r9], #4
 8004d72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d76:	d8e2      	bhi.n	8004d3e <__multiply+0xb2>
 8004d78:	9a01      	ldr	r2, [sp, #4]
 8004d7a:	f845 c002 	str.w	ip, [r5, r2]
 8004d7e:	9a03      	ldr	r2, [sp, #12]
 8004d80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d84:	3304      	adds	r3, #4
 8004d86:	f1b9 0f00 	cmp.w	r9, #0
 8004d8a:	d021      	beq.n	8004dd0 <__multiply+0x144>
 8004d8c:	6829      	ldr	r1, [r5, #0]
 8004d8e:	f104 0c14 	add.w	ip, r4, #20
 8004d92:	46ae      	mov	lr, r5
 8004d94:	f04f 0a00 	mov.w	sl, #0
 8004d98:	f8bc b000 	ldrh.w	fp, [ip]
 8004d9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004da0:	fb09 220b 	mla	r2, r9, fp, r2
 8004da4:	4452      	add	r2, sl
 8004da6:	b289      	uxth	r1, r1
 8004da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004dac:	f84e 1b04 	str.w	r1, [lr], #4
 8004db0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004db4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004db8:	f8be 1000 	ldrh.w	r1, [lr]
 8004dbc:	fb09 110a 	mla	r1, r9, sl, r1
 8004dc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004dc4:	4567      	cmp	r7, ip
 8004dc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004dca:	d8e5      	bhi.n	8004d98 <__multiply+0x10c>
 8004dcc:	9a01      	ldr	r2, [sp, #4]
 8004dce:	50a9      	str	r1, [r5, r2]
 8004dd0:	3504      	adds	r5, #4
 8004dd2:	e799      	b.n	8004d08 <__multiply+0x7c>
 8004dd4:	3e01      	subs	r6, #1
 8004dd6:	e79b      	b.n	8004d10 <__multiply+0x84>
 8004dd8:	08005d7b 	.word	0x08005d7b
 8004ddc:	08005d8c 	.word	0x08005d8c

08004de0 <__pow5mult>:
 8004de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de4:	4615      	mov	r5, r2
 8004de6:	f012 0203 	ands.w	r2, r2, #3
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	d007      	beq.n	8004e00 <__pow5mult+0x20>
 8004df0:	4c25      	ldr	r4, [pc, #148]	; (8004e88 <__pow5mult+0xa8>)
 8004df2:	3a01      	subs	r2, #1
 8004df4:	2300      	movs	r3, #0
 8004df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dfa:	f7ff fe9d 	bl	8004b38 <__multadd>
 8004dfe:	4607      	mov	r7, r0
 8004e00:	10ad      	asrs	r5, r5, #2
 8004e02:	d03d      	beq.n	8004e80 <__pow5mult+0xa0>
 8004e04:	69f4      	ldr	r4, [r6, #28]
 8004e06:	b97c      	cbnz	r4, 8004e28 <__pow5mult+0x48>
 8004e08:	2010      	movs	r0, #16
 8004e0a:	f7ff fd7f 	bl	800490c <malloc>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	61f0      	str	r0, [r6, #28]
 8004e12:	b928      	cbnz	r0, 8004e20 <__pow5mult+0x40>
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <__pow5mult+0xac>)
 8004e16:	481e      	ldr	r0, [pc, #120]	; (8004e90 <__pow5mult+0xb0>)
 8004e18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004e1c:	f000 fbe4 	bl	80055e8 <__assert_func>
 8004e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e24:	6004      	str	r4, [r0, #0]
 8004e26:	60c4      	str	r4, [r0, #12]
 8004e28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e30:	b94c      	cbnz	r4, 8004e46 <__pow5mult+0x66>
 8004e32:	f240 2171 	movw	r1, #625	; 0x271
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7ff ff12 	bl	8004c60 <__i2b>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e42:	4604      	mov	r4, r0
 8004e44:	6003      	str	r3, [r0, #0]
 8004e46:	f04f 0900 	mov.w	r9, #0
 8004e4a:	07eb      	lsls	r3, r5, #31
 8004e4c:	d50a      	bpl.n	8004e64 <__pow5mult+0x84>
 8004e4e:	4639      	mov	r1, r7
 8004e50:	4622      	mov	r2, r4
 8004e52:	4630      	mov	r0, r6
 8004e54:	f7ff ff1a 	bl	8004c8c <__multiply>
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f7ff fe49 	bl	8004af4 <_Bfree>
 8004e62:	4647      	mov	r7, r8
 8004e64:	106d      	asrs	r5, r5, #1
 8004e66:	d00b      	beq.n	8004e80 <__pow5mult+0xa0>
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	b938      	cbnz	r0, 8004e7c <__pow5mult+0x9c>
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff ff0b 	bl	8004c8c <__multiply>
 8004e76:	6020      	str	r0, [r4, #0]
 8004e78:	f8c0 9000 	str.w	r9, [r0]
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	e7e4      	b.n	8004e4a <__pow5mult+0x6a>
 8004e80:	4638      	mov	r0, r7
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e86:	bf00      	nop
 8004e88:	08005ed8 	.word	0x08005ed8
 8004e8c:	08005d0c 	.word	0x08005d0c
 8004e90:	08005d8c 	.word	0x08005d8c

08004e94 <__lshift>:
 8004e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	460c      	mov	r4, r1
 8004e9a:	6849      	ldr	r1, [r1, #4]
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ea2:	68a3      	ldr	r3, [r4, #8]
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	4691      	mov	r9, r2
 8004ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004eac:	f108 0601 	add.w	r6, r8, #1
 8004eb0:	42b3      	cmp	r3, r6
 8004eb2:	db0b      	blt.n	8004ecc <__lshift+0x38>
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff fddd 	bl	8004a74 <_Balloc>
 8004eba:	4605      	mov	r5, r0
 8004ebc:	b948      	cbnz	r0, 8004ed2 <__lshift+0x3e>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <__lshift+0xd0>)
 8004ec2:	4829      	ldr	r0, [pc, #164]	; (8004f68 <__lshift+0xd4>)
 8004ec4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004ec8:	f000 fb8e 	bl	80055e8 <__assert_func>
 8004ecc:	3101      	adds	r1, #1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__lshift+0x1c>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f100 0114 	add.w	r1, r0, #20
 8004ed8:	f100 0210 	add.w	r2, r0, #16
 8004edc:	4618      	mov	r0, r3
 8004ede:	4553      	cmp	r3, sl
 8004ee0:	db33      	blt.n	8004f4a <__lshift+0xb6>
 8004ee2:	6920      	ldr	r0, [r4, #16]
 8004ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ee8:	f104 0314 	add.w	r3, r4, #20
 8004eec:	f019 091f 	ands.w	r9, r9, #31
 8004ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ef8:	d02b      	beq.n	8004f52 <__lshift+0xbe>
 8004efa:	f1c9 0e20 	rsb	lr, r9, #32
 8004efe:	468a      	mov	sl, r1
 8004f00:	2200      	movs	r2, #0
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	fa00 f009 	lsl.w	r0, r0, r9
 8004f08:	4310      	orrs	r0, r2
 8004f0a:	f84a 0b04 	str.w	r0, [sl], #4
 8004f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f12:	459c      	cmp	ip, r3
 8004f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f18:	d8f3      	bhi.n	8004f02 <__lshift+0x6e>
 8004f1a:	ebac 0304 	sub.w	r3, ip, r4
 8004f1e:	3b15      	subs	r3, #21
 8004f20:	f023 0303 	bic.w	r3, r3, #3
 8004f24:	3304      	adds	r3, #4
 8004f26:	f104 0015 	add.w	r0, r4, #21
 8004f2a:	4584      	cmp	ip, r0
 8004f2c:	bf38      	it	cc
 8004f2e:	2304      	movcc	r3, #4
 8004f30:	50ca      	str	r2, [r1, r3]
 8004f32:	b10a      	cbz	r2, 8004f38 <__lshift+0xa4>
 8004f34:	f108 0602 	add.w	r6, r8, #2
 8004f38:	3e01      	subs	r6, #1
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	612e      	str	r6, [r5, #16]
 8004f3e:	4621      	mov	r1, r4
 8004f40:	f7ff fdd8 	bl	8004af4 <_Bfree>
 8004f44:	4628      	mov	r0, r5
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f4e:	3301      	adds	r3, #1
 8004f50:	e7c5      	b.n	8004ede <__lshift+0x4a>
 8004f52:	3904      	subs	r1, #4
 8004f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f5c:	459c      	cmp	ip, r3
 8004f5e:	d8f9      	bhi.n	8004f54 <__lshift+0xc0>
 8004f60:	e7ea      	b.n	8004f38 <__lshift+0xa4>
 8004f62:	bf00      	nop
 8004f64:	08005d7b 	.word	0x08005d7b
 8004f68:	08005d8c 	.word	0x08005d8c

08004f6c <__mcmp>:
 8004f6c:	b530      	push	{r4, r5, lr}
 8004f6e:	6902      	ldr	r2, [r0, #16]
 8004f70:	690c      	ldr	r4, [r1, #16]
 8004f72:	1b12      	subs	r2, r2, r4
 8004f74:	d10e      	bne.n	8004f94 <__mcmp+0x28>
 8004f76:	f100 0314 	add.w	r3, r0, #20
 8004f7a:	3114      	adds	r1, #20
 8004f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f8c:	42a5      	cmp	r5, r4
 8004f8e:	d003      	beq.n	8004f98 <__mcmp+0x2c>
 8004f90:	d305      	bcc.n	8004f9e <__mcmp+0x32>
 8004f92:	2201      	movs	r2, #1
 8004f94:	4610      	mov	r0, r2
 8004f96:	bd30      	pop	{r4, r5, pc}
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	d3f3      	bcc.n	8004f84 <__mcmp+0x18>
 8004f9c:	e7fa      	b.n	8004f94 <__mcmp+0x28>
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e7f7      	b.n	8004f94 <__mcmp+0x28>

08004fa4 <__mdiff>:
 8004fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	460c      	mov	r4, r1
 8004faa:	4606      	mov	r6, r0
 8004fac:	4611      	mov	r1, r2
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	f7ff ffdb 	bl	8004f6c <__mcmp>
 8004fb6:	1e05      	subs	r5, r0, #0
 8004fb8:	d110      	bne.n	8004fdc <__mdiff+0x38>
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7ff fd59 	bl	8004a74 <_Balloc>
 8004fc2:	b930      	cbnz	r0, 8004fd2 <__mdiff+0x2e>
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <__mdiff+0x10c>)
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	f240 2137 	movw	r1, #567	; 0x237
 8004fcc:	4839      	ldr	r0, [pc, #228]	; (80050b4 <__mdiff+0x110>)
 8004fce:	f000 fb0b 	bl	80055e8 <__assert_func>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	bfa4      	itt	ge
 8004fde:	4643      	movge	r3, r8
 8004fe0:	46a0      	movge	r8, r4
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fe8:	bfa6      	itte	ge
 8004fea:	461c      	movge	r4, r3
 8004fec:	2500      	movge	r5, #0
 8004fee:	2501      	movlt	r5, #1
 8004ff0:	f7ff fd40 	bl	8004a74 <_Balloc>
 8004ff4:	b920      	cbnz	r0, 8005000 <__mdiff+0x5c>
 8004ff6:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <__mdiff+0x10c>)
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	f240 2145 	movw	r1, #581	; 0x245
 8004ffe:	e7e5      	b.n	8004fcc <__mdiff+0x28>
 8005000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005004:	6926      	ldr	r6, [r4, #16]
 8005006:	60c5      	str	r5, [r0, #12]
 8005008:	f104 0914 	add.w	r9, r4, #20
 800500c:	f108 0514 	add.w	r5, r8, #20
 8005010:	f100 0e14 	add.w	lr, r0, #20
 8005014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800501c:	f108 0210 	add.w	r2, r8, #16
 8005020:	46f2      	mov	sl, lr
 8005022:	2100      	movs	r1, #0
 8005024:	f859 3b04 	ldr.w	r3, [r9], #4
 8005028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800502c:	fa11 f88b 	uxtah	r8, r1, fp
 8005030:	b299      	uxth	r1, r3
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	eba8 0801 	sub.w	r8, r8, r1
 8005038:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800503c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005040:	fa1f f888 	uxth.w	r8, r8
 8005044:	1419      	asrs	r1, r3, #16
 8005046:	454e      	cmp	r6, r9
 8005048:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800504c:	f84a 3b04 	str.w	r3, [sl], #4
 8005050:	d8e8      	bhi.n	8005024 <__mdiff+0x80>
 8005052:	1b33      	subs	r3, r6, r4
 8005054:	3b15      	subs	r3, #21
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	3304      	adds	r3, #4
 800505c:	3415      	adds	r4, #21
 800505e:	42a6      	cmp	r6, r4
 8005060:	bf38      	it	cc
 8005062:	2304      	movcc	r3, #4
 8005064:	441d      	add	r5, r3
 8005066:	4473      	add	r3, lr
 8005068:	469e      	mov	lr, r3
 800506a:	462e      	mov	r6, r5
 800506c:	4566      	cmp	r6, ip
 800506e:	d30e      	bcc.n	800508e <__mdiff+0xea>
 8005070:	f10c 0203 	add.w	r2, ip, #3
 8005074:	1b52      	subs	r2, r2, r5
 8005076:	f022 0203 	bic.w	r2, r2, #3
 800507a:	3d03      	subs	r5, #3
 800507c:	45ac      	cmp	ip, r5
 800507e:	bf38      	it	cc
 8005080:	2200      	movcc	r2, #0
 8005082:	4413      	add	r3, r2
 8005084:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005088:	b17a      	cbz	r2, 80050aa <__mdiff+0x106>
 800508a:	6107      	str	r7, [r0, #16]
 800508c:	e7a4      	b.n	8004fd8 <__mdiff+0x34>
 800508e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005092:	fa11 f288 	uxtah	r2, r1, r8
 8005096:	1414      	asrs	r4, r2, #16
 8005098:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800509c:	b292      	uxth	r2, r2
 800509e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80050a2:	f84e 2b04 	str.w	r2, [lr], #4
 80050a6:	1421      	asrs	r1, r4, #16
 80050a8:	e7e0      	b.n	800506c <__mdiff+0xc8>
 80050aa:	3f01      	subs	r7, #1
 80050ac:	e7ea      	b.n	8005084 <__mdiff+0xe0>
 80050ae:	bf00      	nop
 80050b0:	08005d7b 	.word	0x08005d7b
 80050b4:	08005d8c 	.word	0x08005d8c

080050b8 <__d2b>:
 80050b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050bc:	460f      	mov	r7, r1
 80050be:	2101      	movs	r1, #1
 80050c0:	ec59 8b10 	vmov	r8, r9, d0
 80050c4:	4616      	mov	r6, r2
 80050c6:	f7ff fcd5 	bl	8004a74 <_Balloc>
 80050ca:	4604      	mov	r4, r0
 80050cc:	b930      	cbnz	r0, 80050dc <__d2b+0x24>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <__d2b+0xac>)
 80050d2:	4825      	ldr	r0, [pc, #148]	; (8005168 <__d2b+0xb0>)
 80050d4:	f240 310f 	movw	r1, #783	; 0x30f
 80050d8:	f000 fa86 	bl	80055e8 <__assert_func>
 80050dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050e4:	bb2d      	cbnz	r5, 8005132 <__d2b+0x7a>
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	f1b8 0300 	subs.w	r3, r8, #0
 80050ec:	d026      	beq.n	800513c <__d2b+0x84>
 80050ee:	4668      	mov	r0, sp
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f7ff fd87 	bl	8004c04 <__lo0bits>
 80050f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050fa:	b1e8      	cbz	r0, 8005138 <__d2b+0x80>
 80050fc:	f1c0 0320 	rsb	r3, r0, #32
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	430b      	orrs	r3, r1
 8005106:	40c2      	lsrs	r2, r0
 8005108:	6163      	str	r3, [r4, #20]
 800510a:	9201      	str	r2, [sp, #4]
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf14      	ite	ne
 8005114:	2202      	movne	r2, #2
 8005116:	2201      	moveq	r2, #1
 8005118:	6122      	str	r2, [r4, #16]
 800511a:	b1bd      	cbz	r5, 800514c <__d2b+0x94>
 800511c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005120:	4405      	add	r5, r0
 8005122:	603d      	str	r5, [r7, #0]
 8005124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	4620      	mov	r0, r4
 800512c:	b003      	add	sp, #12
 800512e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005136:	e7d6      	b.n	80050e6 <__d2b+0x2e>
 8005138:	6161      	str	r1, [r4, #20]
 800513a:	e7e7      	b.n	800510c <__d2b+0x54>
 800513c:	a801      	add	r0, sp, #4
 800513e:	f7ff fd61 	bl	8004c04 <__lo0bits>
 8005142:	9b01      	ldr	r3, [sp, #4]
 8005144:	6163      	str	r3, [r4, #20]
 8005146:	3020      	adds	r0, #32
 8005148:	2201      	movs	r2, #1
 800514a:	e7e5      	b.n	8005118 <__d2b+0x60>
 800514c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005154:	6038      	str	r0, [r7, #0]
 8005156:	6918      	ldr	r0, [r3, #16]
 8005158:	f7ff fd34 	bl	8004bc4 <__hi0bits>
 800515c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005160:	e7e2      	b.n	8005128 <__d2b+0x70>
 8005162:	bf00      	nop
 8005164:	08005d7b 	.word	0x08005d7b
 8005168:	08005d8c 	.word	0x08005d8c

0800516c <__ssputs_r>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	688e      	ldr	r6, [r1, #8]
 8005172:	461f      	mov	r7, r3
 8005174:	42be      	cmp	r6, r7
 8005176:	680b      	ldr	r3, [r1, #0]
 8005178:	4682      	mov	sl, r0
 800517a:	460c      	mov	r4, r1
 800517c:	4690      	mov	r8, r2
 800517e:	d82c      	bhi.n	80051da <__ssputs_r+0x6e>
 8005180:	898a      	ldrh	r2, [r1, #12]
 8005182:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005186:	d026      	beq.n	80051d6 <__ssputs_r+0x6a>
 8005188:	6965      	ldr	r5, [r4, #20]
 800518a:	6909      	ldr	r1, [r1, #16]
 800518c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005190:	eba3 0901 	sub.w	r9, r3, r1
 8005194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005198:	1c7b      	adds	r3, r7, #1
 800519a:	444b      	add	r3, r9
 800519c:	106d      	asrs	r5, r5, #1
 800519e:	429d      	cmp	r5, r3
 80051a0:	bf38      	it	cc
 80051a2:	461d      	movcc	r5, r3
 80051a4:	0553      	lsls	r3, r2, #21
 80051a6:	d527      	bpl.n	80051f8 <__ssputs_r+0x8c>
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7ff fbd7 	bl	800495c <_malloc_r>
 80051ae:	4606      	mov	r6, r0
 80051b0:	b360      	cbz	r0, 800520c <__ssputs_r+0xa0>
 80051b2:	6921      	ldr	r1, [r4, #16]
 80051b4:	464a      	mov	r2, r9
 80051b6:	f000 fa09 	bl	80055cc <memcpy>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	6126      	str	r6, [r4, #16]
 80051c8:	6165      	str	r5, [r4, #20]
 80051ca:	444e      	add	r6, r9
 80051cc:	eba5 0509 	sub.w	r5, r5, r9
 80051d0:	6026      	str	r6, [r4, #0]
 80051d2:	60a5      	str	r5, [r4, #8]
 80051d4:	463e      	mov	r6, r7
 80051d6:	42be      	cmp	r6, r7
 80051d8:	d900      	bls.n	80051dc <__ssputs_r+0x70>
 80051da:	463e      	mov	r6, r7
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	4632      	mov	r2, r6
 80051e0:	4641      	mov	r1, r8
 80051e2:	f000 f9c9 	bl	8005578 <memmove>
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	1b9b      	subs	r3, r3, r6
 80051ea:	60a3      	str	r3, [r4, #8]
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	4433      	add	r3, r6
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	2000      	movs	r0, #0
 80051f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f8:	462a      	mov	r2, r5
 80051fa:	f000 fa3b 	bl	8005674 <_realloc_r>
 80051fe:	4606      	mov	r6, r0
 8005200:	2800      	cmp	r0, #0
 8005202:	d1e0      	bne.n	80051c6 <__ssputs_r+0x5a>
 8005204:	6921      	ldr	r1, [r4, #16]
 8005206:	4650      	mov	r0, sl
 8005208:	f7ff fb34 	bl	8004874 <_free_r>
 800520c:	230c      	movs	r3, #12
 800520e:	f8ca 3000 	str.w	r3, [sl]
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	f04f 30ff 	mov.w	r0, #4294967295
 800521e:	e7e9      	b.n	80051f4 <__ssputs_r+0x88>

08005220 <_svfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	4698      	mov	r8, r3
 8005226:	898b      	ldrh	r3, [r1, #12]
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	b09d      	sub	sp, #116	; 0x74
 800522c:	4607      	mov	r7, r0
 800522e:	460d      	mov	r5, r1
 8005230:	4614      	mov	r4, r2
 8005232:	d50e      	bpl.n	8005252 <_svfiprintf_r+0x32>
 8005234:	690b      	ldr	r3, [r1, #16]
 8005236:	b963      	cbnz	r3, 8005252 <_svfiprintf_r+0x32>
 8005238:	2140      	movs	r1, #64	; 0x40
 800523a:	f7ff fb8f 	bl	800495c <_malloc_r>
 800523e:	6028      	str	r0, [r5, #0]
 8005240:	6128      	str	r0, [r5, #16]
 8005242:	b920      	cbnz	r0, 800524e <_svfiprintf_r+0x2e>
 8005244:	230c      	movs	r3, #12
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	e0d0      	b.n	80053f0 <_svfiprintf_r+0x1d0>
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	616b      	str	r3, [r5, #20]
 8005252:	2300      	movs	r3, #0
 8005254:	9309      	str	r3, [sp, #36]	; 0x24
 8005256:	2320      	movs	r3, #32
 8005258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800525c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005260:	2330      	movs	r3, #48	; 0x30
 8005262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005408 <_svfiprintf_r+0x1e8>
 8005266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800526a:	f04f 0901 	mov.w	r9, #1
 800526e:	4623      	mov	r3, r4
 8005270:	469a      	mov	sl, r3
 8005272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005276:	b10a      	cbz	r2, 800527c <_svfiprintf_r+0x5c>
 8005278:	2a25      	cmp	r2, #37	; 0x25
 800527a:	d1f9      	bne.n	8005270 <_svfiprintf_r+0x50>
 800527c:	ebba 0b04 	subs.w	fp, sl, r4
 8005280:	d00b      	beq.n	800529a <_svfiprintf_r+0x7a>
 8005282:	465b      	mov	r3, fp
 8005284:	4622      	mov	r2, r4
 8005286:	4629      	mov	r1, r5
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff6f 	bl	800516c <__ssputs_r>
 800528e:	3001      	adds	r0, #1
 8005290:	f000 80a9 	beq.w	80053e6 <_svfiprintf_r+0x1c6>
 8005294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005296:	445a      	add	r2, fp
 8005298:	9209      	str	r2, [sp, #36]	; 0x24
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a1 	beq.w	80053e6 <_svfiprintf_r+0x1c6>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ae:	f10a 0a01 	add.w	sl, sl, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	9307      	str	r3, [sp, #28]
 80052b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ba:	931a      	str	r3, [sp, #104]	; 0x68
 80052bc:	4654      	mov	r4, sl
 80052be:	2205      	movs	r2, #5
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	4850      	ldr	r0, [pc, #320]	; (8005408 <_svfiprintf_r+0x1e8>)
 80052c6:	f7fa ff83 	bl	80001d0 <memchr>
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	b9d8      	cbnz	r0, 8005306 <_svfiprintf_r+0xe6>
 80052ce:	06d0      	lsls	r0, r2, #27
 80052d0:	bf44      	itt	mi
 80052d2:	2320      	movmi	r3, #32
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d8:	0711      	lsls	r1, r2, #28
 80052da:	bf44      	itt	mi
 80052dc:	232b      	movmi	r3, #43	; 0x2b
 80052de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e2:	f89a 3000 	ldrb.w	r3, [sl]
 80052e6:	2b2a      	cmp	r3, #42	; 0x2a
 80052e8:	d015      	beq.n	8005316 <_svfiprintf_r+0xf6>
 80052ea:	9a07      	ldr	r2, [sp, #28]
 80052ec:	4654      	mov	r4, sl
 80052ee:	2000      	movs	r0, #0
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4621      	mov	r1, r4
 80052f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fa:	3b30      	subs	r3, #48	; 0x30
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	d94d      	bls.n	800539c <_svfiprintf_r+0x17c>
 8005300:	b1b0      	cbz	r0, 8005330 <_svfiprintf_r+0x110>
 8005302:	9207      	str	r2, [sp, #28]
 8005304:	e014      	b.n	8005330 <_svfiprintf_r+0x110>
 8005306:	eba0 0308 	sub.w	r3, r0, r8
 800530a:	fa09 f303 	lsl.w	r3, r9, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	46a2      	mov	sl, r4
 8005314:	e7d2      	b.n	80052bc <_svfiprintf_r+0x9c>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	9103      	str	r1, [sp, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfbb      	ittet	lt
 8005322:	425b      	neglt	r3, r3
 8005324:	f042 0202 	orrlt.w	r2, r2, #2
 8005328:	9307      	strge	r3, [sp, #28]
 800532a:	9307      	strlt	r3, [sp, #28]
 800532c:	bfb8      	it	lt
 800532e:	9204      	strlt	r2, [sp, #16]
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	2b2e      	cmp	r3, #46	; 0x2e
 8005334:	d10c      	bne.n	8005350 <_svfiprintf_r+0x130>
 8005336:	7863      	ldrb	r3, [r4, #1]
 8005338:	2b2a      	cmp	r3, #42	; 0x2a
 800533a:	d134      	bne.n	80053a6 <_svfiprintf_r+0x186>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	9203      	str	r2, [sp, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	bfb8      	it	lt
 8005348:	f04f 33ff 	movlt.w	r3, #4294967295
 800534c:	3402      	adds	r4, #2
 800534e:	9305      	str	r3, [sp, #20]
 8005350:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005418 <_svfiprintf_r+0x1f8>
 8005354:	7821      	ldrb	r1, [r4, #0]
 8005356:	2203      	movs	r2, #3
 8005358:	4650      	mov	r0, sl
 800535a:	f7fa ff39 	bl	80001d0 <memchr>
 800535e:	b138      	cbz	r0, 8005370 <_svfiprintf_r+0x150>
 8005360:	9b04      	ldr	r3, [sp, #16]
 8005362:	eba0 000a 	sub.w	r0, r0, sl
 8005366:	2240      	movs	r2, #64	; 0x40
 8005368:	4082      	lsls	r2, r0
 800536a:	4313      	orrs	r3, r2
 800536c:	3401      	adds	r4, #1
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005374:	4825      	ldr	r0, [pc, #148]	; (800540c <_svfiprintf_r+0x1ec>)
 8005376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537a:	2206      	movs	r2, #6
 800537c:	f7fa ff28 	bl	80001d0 <memchr>
 8005380:	2800      	cmp	r0, #0
 8005382:	d038      	beq.n	80053f6 <_svfiprintf_r+0x1d6>
 8005384:	4b22      	ldr	r3, [pc, #136]	; (8005410 <_svfiprintf_r+0x1f0>)
 8005386:	bb1b      	cbnz	r3, 80053d0 <_svfiprintf_r+0x1b0>
 8005388:	9b03      	ldr	r3, [sp, #12]
 800538a:	3307      	adds	r3, #7
 800538c:	f023 0307 	bic.w	r3, r3, #7
 8005390:	3308      	adds	r3, #8
 8005392:	9303      	str	r3, [sp, #12]
 8005394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005396:	4433      	add	r3, r6
 8005398:	9309      	str	r3, [sp, #36]	; 0x24
 800539a:	e768      	b.n	800526e <_svfiprintf_r+0x4e>
 800539c:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a0:	460c      	mov	r4, r1
 80053a2:	2001      	movs	r0, #1
 80053a4:	e7a6      	b.n	80052f4 <_svfiprintf_r+0xd4>
 80053a6:	2300      	movs	r3, #0
 80053a8:	3401      	adds	r4, #1
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f04f 0c0a 	mov.w	ip, #10
 80053b2:	4620      	mov	r0, r4
 80053b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b8:	3a30      	subs	r2, #48	; 0x30
 80053ba:	2a09      	cmp	r2, #9
 80053bc:	d903      	bls.n	80053c6 <_svfiprintf_r+0x1a6>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0c6      	beq.n	8005350 <_svfiprintf_r+0x130>
 80053c2:	9105      	str	r1, [sp, #20]
 80053c4:	e7c4      	b.n	8005350 <_svfiprintf_r+0x130>
 80053c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ca:	4604      	mov	r4, r0
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7f0      	b.n	80053b2 <_svfiprintf_r+0x192>
 80053d0:	ab03      	add	r3, sp, #12
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <_svfiprintf_r+0x1f4>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	4638      	mov	r0, r7
 80053dc:	f7fd fe64 	bl	80030a8 <_printf_float>
 80053e0:	1c42      	adds	r2, r0, #1
 80053e2:	4606      	mov	r6, r0
 80053e4:	d1d6      	bne.n	8005394 <_svfiprintf_r+0x174>
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	065b      	lsls	r3, r3, #25
 80053ea:	f53f af2d 	bmi.w	8005248 <_svfiprintf_r+0x28>
 80053ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f0:	b01d      	add	sp, #116	; 0x74
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	ab03      	add	r3, sp, #12
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	462a      	mov	r2, r5
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <_svfiprintf_r+0x1f4>)
 80053fe:	a904      	add	r1, sp, #16
 8005400:	4638      	mov	r0, r7
 8005402:	f7fe f8f5 	bl	80035f0 <_printf_i>
 8005406:	e7eb      	b.n	80053e0 <_svfiprintf_r+0x1c0>
 8005408:	08005ee4 	.word	0x08005ee4
 800540c:	08005eee 	.word	0x08005eee
 8005410:	080030a9 	.word	0x080030a9
 8005414:	0800516d 	.word	0x0800516d
 8005418:	08005eea 	.word	0x08005eea

0800541c <__sflush_r>:
 800541c:	898a      	ldrh	r2, [r1, #12]
 800541e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005422:	4605      	mov	r5, r0
 8005424:	0710      	lsls	r0, r2, #28
 8005426:	460c      	mov	r4, r1
 8005428:	d458      	bmi.n	80054dc <__sflush_r+0xc0>
 800542a:	684b      	ldr	r3, [r1, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	dc05      	bgt.n	800543c <__sflush_r+0x20>
 8005430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	dc02      	bgt.n	800543c <__sflush_r+0x20>
 8005436:	2000      	movs	r0, #0
 8005438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800543c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800543e:	2e00      	cmp	r6, #0
 8005440:	d0f9      	beq.n	8005436 <__sflush_r+0x1a>
 8005442:	2300      	movs	r3, #0
 8005444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005448:	682f      	ldr	r7, [r5, #0]
 800544a:	6a21      	ldr	r1, [r4, #32]
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	d032      	beq.n	80054b6 <__sflush_r+0x9a>
 8005450:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	075a      	lsls	r2, r3, #29
 8005456:	d505      	bpl.n	8005464 <__sflush_r+0x48>
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	1ac0      	subs	r0, r0, r3
 800545c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800545e:	b10b      	cbz	r3, 8005464 <__sflush_r+0x48>
 8005460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005462:	1ac0      	subs	r0, r0, r3
 8005464:	2300      	movs	r3, #0
 8005466:	4602      	mov	r2, r0
 8005468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546a:	6a21      	ldr	r1, [r4, #32]
 800546c:	4628      	mov	r0, r5
 800546e:	47b0      	blx	r6
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	d106      	bne.n	8005484 <__sflush_r+0x68>
 8005476:	6829      	ldr	r1, [r5, #0]
 8005478:	291d      	cmp	r1, #29
 800547a:	d82b      	bhi.n	80054d4 <__sflush_r+0xb8>
 800547c:	4a29      	ldr	r2, [pc, #164]	; (8005524 <__sflush_r+0x108>)
 800547e:	410a      	asrs	r2, r1
 8005480:	07d6      	lsls	r6, r2, #31
 8005482:	d427      	bmi.n	80054d4 <__sflush_r+0xb8>
 8005484:	2200      	movs	r2, #0
 8005486:	6062      	str	r2, [r4, #4]
 8005488:	04d9      	lsls	r1, r3, #19
 800548a:	6922      	ldr	r2, [r4, #16]
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	d504      	bpl.n	800549a <__sflush_r+0x7e>
 8005490:	1c42      	adds	r2, r0, #1
 8005492:	d101      	bne.n	8005498 <__sflush_r+0x7c>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b903      	cbnz	r3, 800549a <__sflush_r+0x7e>
 8005498:	6560      	str	r0, [r4, #84]	; 0x54
 800549a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549c:	602f      	str	r7, [r5, #0]
 800549e:	2900      	cmp	r1, #0
 80054a0:	d0c9      	beq.n	8005436 <__sflush_r+0x1a>
 80054a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a6:	4299      	cmp	r1, r3
 80054a8:	d002      	beq.n	80054b0 <__sflush_r+0x94>
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7ff f9e2 	bl	8004874 <_free_r>
 80054b0:	2000      	movs	r0, #0
 80054b2:	6360      	str	r0, [r4, #52]	; 0x34
 80054b4:	e7c0      	b.n	8005438 <__sflush_r+0x1c>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4628      	mov	r0, r5
 80054ba:	47b0      	blx	r6
 80054bc:	1c41      	adds	r1, r0, #1
 80054be:	d1c8      	bne.n	8005452 <__sflush_r+0x36>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0c5      	beq.n	8005452 <__sflush_r+0x36>
 80054c6:	2b1d      	cmp	r3, #29
 80054c8:	d001      	beq.n	80054ce <__sflush_r+0xb2>
 80054ca:	2b16      	cmp	r3, #22
 80054cc:	d101      	bne.n	80054d2 <__sflush_r+0xb6>
 80054ce:	602f      	str	r7, [r5, #0]
 80054d0:	e7b1      	b.n	8005436 <__sflush_r+0x1a>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	e7ad      	b.n	8005438 <__sflush_r+0x1c>
 80054dc:	690f      	ldr	r7, [r1, #16]
 80054de:	2f00      	cmp	r7, #0
 80054e0:	d0a9      	beq.n	8005436 <__sflush_r+0x1a>
 80054e2:	0793      	lsls	r3, r2, #30
 80054e4:	680e      	ldr	r6, [r1, #0]
 80054e6:	bf08      	it	eq
 80054e8:	694b      	ldreq	r3, [r1, #20]
 80054ea:	600f      	str	r7, [r1, #0]
 80054ec:	bf18      	it	ne
 80054ee:	2300      	movne	r3, #0
 80054f0:	eba6 0807 	sub.w	r8, r6, r7
 80054f4:	608b      	str	r3, [r1, #8]
 80054f6:	f1b8 0f00 	cmp.w	r8, #0
 80054fa:	dd9c      	ble.n	8005436 <__sflush_r+0x1a>
 80054fc:	6a21      	ldr	r1, [r4, #32]
 80054fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005500:	4643      	mov	r3, r8
 8005502:	463a      	mov	r2, r7
 8005504:	4628      	mov	r0, r5
 8005506:	47b0      	blx	r6
 8005508:	2800      	cmp	r0, #0
 800550a:	dc06      	bgt.n	800551a <__sflush_r+0xfe>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	e78e      	b.n	8005438 <__sflush_r+0x1c>
 800551a:	4407      	add	r7, r0
 800551c:	eba8 0800 	sub.w	r8, r8, r0
 8005520:	e7e9      	b.n	80054f6 <__sflush_r+0xda>
 8005522:	bf00      	nop
 8005524:	dfbffffe 	.word	0xdfbffffe

08005528 <_fflush_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	690b      	ldr	r3, [r1, #16]
 800552c:	4605      	mov	r5, r0
 800552e:	460c      	mov	r4, r1
 8005530:	b913      	cbnz	r3, 8005538 <_fflush_r+0x10>
 8005532:	2500      	movs	r5, #0
 8005534:	4628      	mov	r0, r5
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	b118      	cbz	r0, 8005542 <_fflush_r+0x1a>
 800553a:	6a03      	ldr	r3, [r0, #32]
 800553c:	b90b      	cbnz	r3, 8005542 <_fflush_r+0x1a>
 800553e:	f7fe fa05 	bl	800394c <__sinit>
 8005542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f3      	beq.n	8005532 <_fflush_r+0xa>
 800554a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800554c:	07d0      	lsls	r0, r2, #31
 800554e:	d404      	bmi.n	800555a <_fflush_r+0x32>
 8005550:	0599      	lsls	r1, r3, #22
 8005552:	d402      	bmi.n	800555a <_fflush_r+0x32>
 8005554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005556:	f7fe fb10 	bl	8003b7a <__retarget_lock_acquire_recursive>
 800555a:	4628      	mov	r0, r5
 800555c:	4621      	mov	r1, r4
 800555e:	f7ff ff5d 	bl	800541c <__sflush_r>
 8005562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005564:	07da      	lsls	r2, r3, #31
 8005566:	4605      	mov	r5, r0
 8005568:	d4e4      	bmi.n	8005534 <_fflush_r+0xc>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	059b      	lsls	r3, r3, #22
 800556e:	d4e1      	bmi.n	8005534 <_fflush_r+0xc>
 8005570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005572:	f7fe fb03 	bl	8003b7c <__retarget_lock_release_recursive>
 8005576:	e7dd      	b.n	8005534 <_fflush_r+0xc>

08005578 <memmove>:
 8005578:	4288      	cmp	r0, r1
 800557a:	b510      	push	{r4, lr}
 800557c:	eb01 0402 	add.w	r4, r1, r2
 8005580:	d902      	bls.n	8005588 <memmove+0x10>
 8005582:	4284      	cmp	r4, r0
 8005584:	4623      	mov	r3, r4
 8005586:	d807      	bhi.n	8005598 <memmove+0x20>
 8005588:	1e43      	subs	r3, r0, #1
 800558a:	42a1      	cmp	r1, r4
 800558c:	d008      	beq.n	80055a0 <memmove+0x28>
 800558e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005596:	e7f8      	b.n	800558a <memmove+0x12>
 8005598:	4402      	add	r2, r0
 800559a:	4601      	mov	r1, r0
 800559c:	428a      	cmp	r2, r1
 800559e:	d100      	bne.n	80055a2 <memmove+0x2a>
 80055a0:	bd10      	pop	{r4, pc}
 80055a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055aa:	e7f7      	b.n	800559c <memmove+0x24>

080055ac <_sbrk_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d06      	ldr	r5, [pc, #24]	; (80055c8 <_sbrk_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fc fa2a 	bl	8001a10 <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_sbrk_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_sbrk_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000400 	.word	0x20000400

080055cc <memcpy>:
 80055cc:	440a      	add	r2, r1
 80055ce:	4291      	cmp	r1, r2
 80055d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055d4:	d100      	bne.n	80055d8 <memcpy+0xc>
 80055d6:	4770      	bx	lr
 80055d8:	b510      	push	{r4, lr}
 80055da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055e2:	4291      	cmp	r1, r2
 80055e4:	d1f9      	bne.n	80055da <memcpy+0xe>
 80055e6:	bd10      	pop	{r4, pc}

080055e8 <__assert_func>:
 80055e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055ea:	4614      	mov	r4, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <__assert_func+0x2c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4605      	mov	r5, r0
 80055f4:	68d8      	ldr	r0, [r3, #12]
 80055f6:	b14c      	cbz	r4, 800560c <__assert_func+0x24>
 80055f8:	4b07      	ldr	r3, [pc, #28]	; (8005618 <__assert_func+0x30>)
 80055fa:	9100      	str	r1, [sp, #0]
 80055fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005600:	4906      	ldr	r1, [pc, #24]	; (800561c <__assert_func+0x34>)
 8005602:	462b      	mov	r3, r5
 8005604:	f000 f872 	bl	80056ec <fiprintf>
 8005608:	f000 f882 	bl	8005710 <abort>
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <__assert_func+0x38>)
 800560e:	461c      	mov	r4, r3
 8005610:	e7f3      	b.n	80055fa <__assert_func+0x12>
 8005612:	bf00      	nop
 8005614:	2000005c 	.word	0x2000005c
 8005618:	08005eff 	.word	0x08005eff
 800561c:	08005f0c 	.word	0x08005f0c
 8005620:	08005f3a 	.word	0x08005f3a

08005624 <_calloc_r>:
 8005624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005626:	fba1 2402 	umull	r2, r4, r1, r2
 800562a:	b94c      	cbnz	r4, 8005640 <_calloc_r+0x1c>
 800562c:	4611      	mov	r1, r2
 800562e:	9201      	str	r2, [sp, #4]
 8005630:	f7ff f994 	bl	800495c <_malloc_r>
 8005634:	9a01      	ldr	r2, [sp, #4]
 8005636:	4605      	mov	r5, r0
 8005638:	b930      	cbnz	r0, 8005648 <_calloc_r+0x24>
 800563a:	4628      	mov	r0, r5
 800563c:	b003      	add	sp, #12
 800563e:	bd30      	pop	{r4, r5, pc}
 8005640:	220c      	movs	r2, #12
 8005642:	6002      	str	r2, [r0, #0]
 8005644:	2500      	movs	r5, #0
 8005646:	e7f8      	b.n	800563a <_calloc_r+0x16>
 8005648:	4621      	mov	r1, r4
 800564a:	f7fe fa18 	bl	8003a7e <memset>
 800564e:	e7f4      	b.n	800563a <_calloc_r+0x16>

08005650 <__ascii_mbtowc>:
 8005650:	b082      	sub	sp, #8
 8005652:	b901      	cbnz	r1, 8005656 <__ascii_mbtowc+0x6>
 8005654:	a901      	add	r1, sp, #4
 8005656:	b142      	cbz	r2, 800566a <__ascii_mbtowc+0x1a>
 8005658:	b14b      	cbz	r3, 800566e <__ascii_mbtowc+0x1e>
 800565a:	7813      	ldrb	r3, [r2, #0]
 800565c:	600b      	str	r3, [r1, #0]
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	1e10      	subs	r0, r2, #0
 8005662:	bf18      	it	ne
 8005664:	2001      	movne	r0, #1
 8005666:	b002      	add	sp, #8
 8005668:	4770      	bx	lr
 800566a:	4610      	mov	r0, r2
 800566c:	e7fb      	b.n	8005666 <__ascii_mbtowc+0x16>
 800566e:	f06f 0001 	mvn.w	r0, #1
 8005672:	e7f8      	b.n	8005666 <__ascii_mbtowc+0x16>

08005674 <_realloc_r>:
 8005674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005678:	4680      	mov	r8, r0
 800567a:	4614      	mov	r4, r2
 800567c:	460e      	mov	r6, r1
 800567e:	b921      	cbnz	r1, 800568a <_realloc_r+0x16>
 8005680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	4611      	mov	r1, r2
 8005686:	f7ff b969 	b.w	800495c <_malloc_r>
 800568a:	b92a      	cbnz	r2, 8005698 <_realloc_r+0x24>
 800568c:	f7ff f8f2 	bl	8004874 <_free_r>
 8005690:	4625      	mov	r5, r4
 8005692:	4628      	mov	r0, r5
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005698:	f000 f841 	bl	800571e <_malloc_usable_size_r>
 800569c:	4284      	cmp	r4, r0
 800569e:	4607      	mov	r7, r0
 80056a0:	d802      	bhi.n	80056a8 <_realloc_r+0x34>
 80056a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056a6:	d812      	bhi.n	80056ce <_realloc_r+0x5a>
 80056a8:	4621      	mov	r1, r4
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff f956 	bl	800495c <_malloc_r>
 80056b0:	4605      	mov	r5, r0
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d0ed      	beq.n	8005692 <_realloc_r+0x1e>
 80056b6:	42bc      	cmp	r4, r7
 80056b8:	4622      	mov	r2, r4
 80056ba:	4631      	mov	r1, r6
 80056bc:	bf28      	it	cs
 80056be:	463a      	movcs	r2, r7
 80056c0:	f7ff ff84 	bl	80055cc <memcpy>
 80056c4:	4631      	mov	r1, r6
 80056c6:	4640      	mov	r0, r8
 80056c8:	f7ff f8d4 	bl	8004874 <_free_r>
 80056cc:	e7e1      	b.n	8005692 <_realloc_r+0x1e>
 80056ce:	4635      	mov	r5, r6
 80056d0:	e7df      	b.n	8005692 <_realloc_r+0x1e>

080056d2 <__ascii_wctomb>:
 80056d2:	b149      	cbz	r1, 80056e8 <__ascii_wctomb+0x16>
 80056d4:	2aff      	cmp	r2, #255	; 0xff
 80056d6:	bf85      	ittet	hi
 80056d8:	238a      	movhi	r3, #138	; 0x8a
 80056da:	6003      	strhi	r3, [r0, #0]
 80056dc:	700a      	strbls	r2, [r1, #0]
 80056de:	f04f 30ff 	movhi.w	r0, #4294967295
 80056e2:	bf98      	it	ls
 80056e4:	2001      	movls	r0, #1
 80056e6:	4770      	bx	lr
 80056e8:	4608      	mov	r0, r1
 80056ea:	4770      	bx	lr

080056ec <fiprintf>:
 80056ec:	b40e      	push	{r1, r2, r3}
 80056ee:	b503      	push	{r0, r1, lr}
 80056f0:	4601      	mov	r1, r0
 80056f2:	ab03      	add	r3, sp, #12
 80056f4:	4805      	ldr	r0, [pc, #20]	; (800570c <fiprintf+0x20>)
 80056f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	f000 f83f 	bl	8005780 <_vfiprintf_r>
 8005702:	b002      	add	sp, #8
 8005704:	f85d eb04 	ldr.w	lr, [sp], #4
 8005708:	b003      	add	sp, #12
 800570a:	4770      	bx	lr
 800570c:	2000005c 	.word	0x2000005c

08005710 <abort>:
 8005710:	b508      	push	{r3, lr}
 8005712:	2006      	movs	r0, #6
 8005714:	f000 fa0c 	bl	8005b30 <raise>
 8005718:	2001      	movs	r0, #1
 800571a:	f7fc f901 	bl	8001920 <_exit>

0800571e <_malloc_usable_size_r>:
 800571e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005722:	1f18      	subs	r0, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfbc      	itt	lt
 8005728:	580b      	ldrlt	r3, [r1, r0]
 800572a:	18c0      	addlt	r0, r0, r3
 800572c:	4770      	bx	lr

0800572e <__sfputc_r>:
 800572e:	6893      	ldr	r3, [r2, #8]
 8005730:	3b01      	subs	r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	b410      	push	{r4}
 8005736:	6093      	str	r3, [r2, #8]
 8005738:	da08      	bge.n	800574c <__sfputc_r+0x1e>
 800573a:	6994      	ldr	r4, [r2, #24]
 800573c:	42a3      	cmp	r3, r4
 800573e:	db01      	blt.n	8005744 <__sfputc_r+0x16>
 8005740:	290a      	cmp	r1, #10
 8005742:	d103      	bne.n	800574c <__sfputc_r+0x1e>
 8005744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005748:	f000 b934 	b.w	80059b4 <__swbuf_r>
 800574c:	6813      	ldr	r3, [r2, #0]
 800574e:	1c58      	adds	r0, r3, #1
 8005750:	6010      	str	r0, [r2, #0]
 8005752:	7019      	strb	r1, [r3, #0]
 8005754:	4608      	mov	r0, r1
 8005756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800575a:	4770      	bx	lr

0800575c <__sfputs_r>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	4614      	mov	r4, r2
 8005764:	18d5      	adds	r5, r2, r3
 8005766:	42ac      	cmp	r4, r5
 8005768:	d101      	bne.n	800576e <__sfputs_r+0x12>
 800576a:	2000      	movs	r0, #0
 800576c:	e007      	b.n	800577e <__sfputs_r+0x22>
 800576e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005772:	463a      	mov	r2, r7
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff ffda 	bl	800572e <__sfputc_r>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d1f3      	bne.n	8005766 <__sfputs_r+0xa>
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005780 <_vfiprintf_r>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	460d      	mov	r5, r1
 8005786:	b09d      	sub	sp, #116	; 0x74
 8005788:	4614      	mov	r4, r2
 800578a:	4698      	mov	r8, r3
 800578c:	4606      	mov	r6, r0
 800578e:	b118      	cbz	r0, 8005798 <_vfiprintf_r+0x18>
 8005790:	6a03      	ldr	r3, [r0, #32]
 8005792:	b90b      	cbnz	r3, 8005798 <_vfiprintf_r+0x18>
 8005794:	f7fe f8da 	bl	800394c <__sinit>
 8005798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800579a:	07d9      	lsls	r1, r3, #31
 800579c:	d405      	bmi.n	80057aa <_vfiprintf_r+0x2a>
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	059a      	lsls	r2, r3, #22
 80057a2:	d402      	bmi.n	80057aa <_vfiprintf_r+0x2a>
 80057a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057a6:	f7fe f9e8 	bl	8003b7a <__retarget_lock_acquire_recursive>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	071b      	lsls	r3, r3, #28
 80057ae:	d501      	bpl.n	80057b4 <_vfiprintf_r+0x34>
 80057b0:	692b      	ldr	r3, [r5, #16]
 80057b2:	b99b      	cbnz	r3, 80057dc <_vfiprintf_r+0x5c>
 80057b4:	4629      	mov	r1, r5
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f93a 	bl	8005a30 <__swsetup_r>
 80057bc:	b170      	cbz	r0, 80057dc <_vfiprintf_r+0x5c>
 80057be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c0:	07dc      	lsls	r4, r3, #31
 80057c2:	d504      	bpl.n	80057ce <_vfiprintf_r+0x4e>
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	b01d      	add	sp, #116	; 0x74
 80057ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	0598      	lsls	r0, r3, #22
 80057d2:	d4f7      	bmi.n	80057c4 <_vfiprintf_r+0x44>
 80057d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d6:	f7fe f9d1 	bl	8003b7c <__retarget_lock_release_recursive>
 80057da:	e7f3      	b.n	80057c4 <_vfiprintf_r+0x44>
 80057dc:	2300      	movs	r3, #0
 80057de:	9309      	str	r3, [sp, #36]	; 0x24
 80057e0:	2320      	movs	r3, #32
 80057e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ea:	2330      	movs	r3, #48	; 0x30
 80057ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80059a0 <_vfiprintf_r+0x220>
 80057f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057f4:	f04f 0901 	mov.w	r9, #1
 80057f8:	4623      	mov	r3, r4
 80057fa:	469a      	mov	sl, r3
 80057fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005800:	b10a      	cbz	r2, 8005806 <_vfiprintf_r+0x86>
 8005802:	2a25      	cmp	r2, #37	; 0x25
 8005804:	d1f9      	bne.n	80057fa <_vfiprintf_r+0x7a>
 8005806:	ebba 0b04 	subs.w	fp, sl, r4
 800580a:	d00b      	beq.n	8005824 <_vfiprintf_r+0xa4>
 800580c:	465b      	mov	r3, fp
 800580e:	4622      	mov	r2, r4
 8005810:	4629      	mov	r1, r5
 8005812:	4630      	mov	r0, r6
 8005814:	f7ff ffa2 	bl	800575c <__sfputs_r>
 8005818:	3001      	adds	r0, #1
 800581a:	f000 80a9 	beq.w	8005970 <_vfiprintf_r+0x1f0>
 800581e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005820:	445a      	add	r2, fp
 8005822:	9209      	str	r2, [sp, #36]	; 0x24
 8005824:	f89a 3000 	ldrb.w	r3, [sl]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80a1 	beq.w	8005970 <_vfiprintf_r+0x1f0>
 800582e:	2300      	movs	r3, #0
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005838:	f10a 0a01 	add.w	sl, sl, #1
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	9307      	str	r3, [sp, #28]
 8005840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005844:	931a      	str	r3, [sp, #104]	; 0x68
 8005846:	4654      	mov	r4, sl
 8005848:	2205      	movs	r2, #5
 800584a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584e:	4854      	ldr	r0, [pc, #336]	; (80059a0 <_vfiprintf_r+0x220>)
 8005850:	f7fa fcbe 	bl	80001d0 <memchr>
 8005854:	9a04      	ldr	r2, [sp, #16]
 8005856:	b9d8      	cbnz	r0, 8005890 <_vfiprintf_r+0x110>
 8005858:	06d1      	lsls	r1, r2, #27
 800585a:	bf44      	itt	mi
 800585c:	2320      	movmi	r3, #32
 800585e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005862:	0713      	lsls	r3, r2, #28
 8005864:	bf44      	itt	mi
 8005866:	232b      	movmi	r3, #43	; 0x2b
 8005868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800586c:	f89a 3000 	ldrb.w	r3, [sl]
 8005870:	2b2a      	cmp	r3, #42	; 0x2a
 8005872:	d015      	beq.n	80058a0 <_vfiprintf_r+0x120>
 8005874:	9a07      	ldr	r2, [sp, #28]
 8005876:	4654      	mov	r4, sl
 8005878:	2000      	movs	r0, #0
 800587a:	f04f 0c0a 	mov.w	ip, #10
 800587e:	4621      	mov	r1, r4
 8005880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005884:	3b30      	subs	r3, #48	; 0x30
 8005886:	2b09      	cmp	r3, #9
 8005888:	d94d      	bls.n	8005926 <_vfiprintf_r+0x1a6>
 800588a:	b1b0      	cbz	r0, 80058ba <_vfiprintf_r+0x13a>
 800588c:	9207      	str	r2, [sp, #28]
 800588e:	e014      	b.n	80058ba <_vfiprintf_r+0x13a>
 8005890:	eba0 0308 	sub.w	r3, r0, r8
 8005894:	fa09 f303 	lsl.w	r3, r9, r3
 8005898:	4313      	orrs	r3, r2
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	46a2      	mov	sl, r4
 800589e:	e7d2      	b.n	8005846 <_vfiprintf_r+0xc6>
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	1d19      	adds	r1, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	9103      	str	r1, [sp, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bfbb      	ittet	lt
 80058ac:	425b      	neglt	r3, r3
 80058ae:	f042 0202 	orrlt.w	r2, r2, #2
 80058b2:	9307      	strge	r3, [sp, #28]
 80058b4:	9307      	strlt	r3, [sp, #28]
 80058b6:	bfb8      	it	lt
 80058b8:	9204      	strlt	r2, [sp, #16]
 80058ba:	7823      	ldrb	r3, [r4, #0]
 80058bc:	2b2e      	cmp	r3, #46	; 0x2e
 80058be:	d10c      	bne.n	80058da <_vfiprintf_r+0x15a>
 80058c0:	7863      	ldrb	r3, [r4, #1]
 80058c2:	2b2a      	cmp	r3, #42	; 0x2a
 80058c4:	d134      	bne.n	8005930 <_vfiprintf_r+0x1b0>
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	1d1a      	adds	r2, r3, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	9203      	str	r2, [sp, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058d6:	3402      	adds	r4, #2
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80059b0 <_vfiprintf_r+0x230>
 80058de:	7821      	ldrb	r1, [r4, #0]
 80058e0:	2203      	movs	r2, #3
 80058e2:	4650      	mov	r0, sl
 80058e4:	f7fa fc74 	bl	80001d0 <memchr>
 80058e8:	b138      	cbz	r0, 80058fa <_vfiprintf_r+0x17a>
 80058ea:	9b04      	ldr	r3, [sp, #16]
 80058ec:	eba0 000a 	sub.w	r0, r0, sl
 80058f0:	2240      	movs	r2, #64	; 0x40
 80058f2:	4082      	lsls	r2, r0
 80058f4:	4313      	orrs	r3, r2
 80058f6:	3401      	adds	r4, #1
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fe:	4829      	ldr	r0, [pc, #164]	; (80059a4 <_vfiprintf_r+0x224>)
 8005900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005904:	2206      	movs	r2, #6
 8005906:	f7fa fc63 	bl	80001d0 <memchr>
 800590a:	2800      	cmp	r0, #0
 800590c:	d03f      	beq.n	800598e <_vfiprintf_r+0x20e>
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <_vfiprintf_r+0x228>)
 8005910:	bb1b      	cbnz	r3, 800595a <_vfiprintf_r+0x1da>
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	3307      	adds	r3, #7
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	3308      	adds	r3, #8
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	443b      	add	r3, r7
 8005922:	9309      	str	r3, [sp, #36]	; 0x24
 8005924:	e768      	b.n	80057f8 <_vfiprintf_r+0x78>
 8005926:	fb0c 3202 	mla	r2, ip, r2, r3
 800592a:	460c      	mov	r4, r1
 800592c:	2001      	movs	r0, #1
 800592e:	e7a6      	b.n	800587e <_vfiprintf_r+0xfe>
 8005930:	2300      	movs	r3, #0
 8005932:	3401      	adds	r4, #1
 8005934:	9305      	str	r3, [sp, #20]
 8005936:	4619      	mov	r1, r3
 8005938:	f04f 0c0a 	mov.w	ip, #10
 800593c:	4620      	mov	r0, r4
 800593e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005942:	3a30      	subs	r2, #48	; 0x30
 8005944:	2a09      	cmp	r2, #9
 8005946:	d903      	bls.n	8005950 <_vfiprintf_r+0x1d0>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0c6      	beq.n	80058da <_vfiprintf_r+0x15a>
 800594c:	9105      	str	r1, [sp, #20]
 800594e:	e7c4      	b.n	80058da <_vfiprintf_r+0x15a>
 8005950:	fb0c 2101 	mla	r1, ip, r1, r2
 8005954:	4604      	mov	r4, r0
 8005956:	2301      	movs	r3, #1
 8005958:	e7f0      	b.n	800593c <_vfiprintf_r+0x1bc>
 800595a:	ab03      	add	r3, sp, #12
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	462a      	mov	r2, r5
 8005960:	4b12      	ldr	r3, [pc, #72]	; (80059ac <_vfiprintf_r+0x22c>)
 8005962:	a904      	add	r1, sp, #16
 8005964:	4630      	mov	r0, r6
 8005966:	f7fd fb9f 	bl	80030a8 <_printf_float>
 800596a:	4607      	mov	r7, r0
 800596c:	1c78      	adds	r0, r7, #1
 800596e:	d1d6      	bne.n	800591e <_vfiprintf_r+0x19e>
 8005970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005972:	07d9      	lsls	r1, r3, #31
 8005974:	d405      	bmi.n	8005982 <_vfiprintf_r+0x202>
 8005976:	89ab      	ldrh	r3, [r5, #12]
 8005978:	059a      	lsls	r2, r3, #22
 800597a:	d402      	bmi.n	8005982 <_vfiprintf_r+0x202>
 800597c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800597e:	f7fe f8fd 	bl	8003b7c <__retarget_lock_release_recursive>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	065b      	lsls	r3, r3, #25
 8005986:	f53f af1d 	bmi.w	80057c4 <_vfiprintf_r+0x44>
 800598a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800598c:	e71c      	b.n	80057c8 <_vfiprintf_r+0x48>
 800598e:	ab03      	add	r3, sp, #12
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	462a      	mov	r2, r5
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <_vfiprintf_r+0x22c>)
 8005996:	a904      	add	r1, sp, #16
 8005998:	4630      	mov	r0, r6
 800599a:	f7fd fe29 	bl	80035f0 <_printf_i>
 800599e:	e7e4      	b.n	800596a <_vfiprintf_r+0x1ea>
 80059a0:	08005ee4 	.word	0x08005ee4
 80059a4:	08005eee 	.word	0x08005eee
 80059a8:	080030a9 	.word	0x080030a9
 80059ac:	0800575d 	.word	0x0800575d
 80059b0:	08005eea 	.word	0x08005eea

080059b4 <__swbuf_r>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	460e      	mov	r6, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	4605      	mov	r5, r0
 80059bc:	b118      	cbz	r0, 80059c6 <__swbuf_r+0x12>
 80059be:	6a03      	ldr	r3, [r0, #32]
 80059c0:	b90b      	cbnz	r3, 80059c6 <__swbuf_r+0x12>
 80059c2:	f7fd ffc3 	bl	800394c <__sinit>
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	d525      	bpl.n	8005a1c <__swbuf_r+0x68>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b31b      	cbz	r3, 8005a1c <__swbuf_r+0x68>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	6922      	ldr	r2, [r4, #16]
 80059d8:	1a98      	subs	r0, r3, r2
 80059da:	6963      	ldr	r3, [r4, #20]
 80059dc:	b2f6      	uxtb	r6, r6
 80059de:	4283      	cmp	r3, r0
 80059e0:	4637      	mov	r7, r6
 80059e2:	dc04      	bgt.n	80059ee <__swbuf_r+0x3a>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7ff fd9e 	bl	8005528 <_fflush_r>
 80059ec:	b9e0      	cbnz	r0, 8005a28 <__swbuf_r+0x74>
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	701e      	strb	r6, [r3, #0]
 80059fc:	6962      	ldr	r2, [r4, #20]
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d004      	beq.n	8005a0e <__swbuf_r+0x5a>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	07db      	lsls	r3, r3, #31
 8005a08:	d506      	bpl.n	8005a18 <__swbuf_r+0x64>
 8005a0a:	2e0a      	cmp	r6, #10
 8005a0c:	d104      	bne.n	8005a18 <__swbuf_r+0x64>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7ff fd89 	bl	8005528 <_fflush_r>
 8005a16:	b938      	cbnz	r0, 8005a28 <__swbuf_r+0x74>
 8005a18:	4638      	mov	r0, r7
 8005a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f806 	bl	8005a30 <__swsetup_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0d5      	beq.n	80059d4 <__swbuf_r+0x20>
 8005a28:	f04f 37ff 	mov.w	r7, #4294967295
 8005a2c:	e7f4      	b.n	8005a18 <__swbuf_r+0x64>
	...

08005a30 <__swsetup_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <__swsetup_r+0xac>)
 8005a34:	4605      	mov	r5, r0
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	460c      	mov	r4, r1
 8005a3a:	b118      	cbz	r0, 8005a44 <__swsetup_r+0x14>
 8005a3c:	6a03      	ldr	r3, [r0, #32]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <__swsetup_r+0x14>
 8005a40:	f7fd ff84 	bl	800394c <__sinit>
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a4a:	0718      	lsls	r0, r3, #28
 8005a4c:	d422      	bmi.n	8005a94 <__swsetup_r+0x64>
 8005a4e:	06d9      	lsls	r1, r3, #27
 8005a50:	d407      	bmi.n	8005a62 <__swsetup_r+0x32>
 8005a52:	2309      	movs	r3, #9
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e034      	b.n	8005acc <__swsetup_r+0x9c>
 8005a62:	0758      	lsls	r0, r3, #29
 8005a64:	d512      	bpl.n	8005a8c <__swsetup_r+0x5c>
 8005a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a68:	b141      	cbz	r1, 8005a7c <__swsetup_r+0x4c>
 8005a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	d002      	beq.n	8005a78 <__swsetup_r+0x48>
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7fe fefe 	bl	8004874 <_free_r>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	2300      	movs	r3, #0
 8005a86:	6063      	str	r3, [r4, #4]
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f043 0308 	orr.w	r3, r3, #8
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	b94b      	cbnz	r3, 8005aac <__swsetup_r+0x7c>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa2:	d003      	beq.n	8005aac <__swsetup_r+0x7c>
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 f884 	bl	8005bb4 <__smakebuf_r>
 8005aac:	89a0      	ldrh	r0, [r4, #12]
 8005aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ab2:	f010 0301 	ands.w	r3, r0, #1
 8005ab6:	d00a      	beq.n	8005ace <__swsetup_r+0x9e>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60a3      	str	r3, [r4, #8]
 8005abc:	6963      	ldr	r3, [r4, #20]
 8005abe:	425b      	negs	r3, r3
 8005ac0:	61a3      	str	r3, [r4, #24]
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	b943      	cbnz	r3, 8005ad8 <__swsetup_r+0xa8>
 8005ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005aca:	d1c4      	bne.n	8005a56 <__swsetup_r+0x26>
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
 8005ace:	0781      	lsls	r1, r0, #30
 8005ad0:	bf58      	it	pl
 8005ad2:	6963      	ldrpl	r3, [r4, #20]
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	e7f4      	b.n	8005ac2 <__swsetup_r+0x92>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e7f7      	b.n	8005acc <__swsetup_r+0x9c>
 8005adc:	2000005c 	.word	0x2000005c

08005ae0 <_raise_r>:
 8005ae0:	291f      	cmp	r1, #31
 8005ae2:	b538      	push	{r3, r4, r5, lr}
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	d904      	bls.n	8005af4 <_raise_r+0x14>
 8005aea:	2316      	movs	r3, #22
 8005aec:	6003      	str	r3, [r0, #0]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005af6:	b112      	cbz	r2, 8005afe <_raise_r+0x1e>
 8005af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005afc:	b94b      	cbnz	r3, 8005b12 <_raise_r+0x32>
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 f830 	bl	8005b64 <_getpid_r>
 8005b04:	462a      	mov	r2, r5
 8005b06:	4601      	mov	r1, r0
 8005b08:	4620      	mov	r0, r4
 8005b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b0e:	f000 b817 	b.w	8005b40 <_kill_r>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d00a      	beq.n	8005b2c <_raise_r+0x4c>
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	d103      	bne.n	8005b22 <_raise_r+0x42>
 8005b1a:	2316      	movs	r3, #22
 8005b1c:	6003      	str	r3, [r0, #0]
 8005b1e:	2001      	movs	r0, #1
 8005b20:	e7e7      	b.n	8005af2 <_raise_r+0x12>
 8005b22:	2400      	movs	r4, #0
 8005b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b28:	4628      	mov	r0, r5
 8005b2a:	4798      	blx	r3
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e7e0      	b.n	8005af2 <_raise_r+0x12>

08005b30 <raise>:
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <raise+0xc>)
 8005b32:	4601      	mov	r1, r0
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	f7ff bfd3 	b.w	8005ae0 <_raise_r>
 8005b3a:	bf00      	nop
 8005b3c:	2000005c 	.word	0x2000005c

08005b40 <_kill_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d07      	ldr	r5, [pc, #28]	; (8005b60 <_kill_r+0x20>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f7fb fed7 	bl	8001900 <_kill>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d102      	bne.n	8005b5c <_kill_r+0x1c>
 8005b56:	682b      	ldr	r3, [r5, #0]
 8005b58:	b103      	cbz	r3, 8005b5c <_kill_r+0x1c>
 8005b5a:	6023      	str	r3, [r4, #0]
 8005b5c:	bd38      	pop	{r3, r4, r5, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000400 	.word	0x20000400

08005b64 <_getpid_r>:
 8005b64:	f7fb bec4 	b.w	80018f0 <_getpid>

08005b68 <__swhatbuf_r>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	2900      	cmp	r1, #0
 8005b72:	b096      	sub	sp, #88	; 0x58
 8005b74:	4615      	mov	r5, r2
 8005b76:	461e      	mov	r6, r3
 8005b78:	da0d      	bge.n	8005b96 <__swhatbuf_r+0x2e>
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	bf0c      	ite	eq
 8005b86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b8a:	2340      	movne	r3, #64	; 0x40
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	6031      	str	r1, [r6, #0]
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	b016      	add	sp, #88	; 0x58
 8005b94:	bd70      	pop	{r4, r5, r6, pc}
 8005b96:	466a      	mov	r2, sp
 8005b98:	f000 f848 	bl	8005c2c <_fstat_r>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	dbec      	blt.n	8005b7a <__swhatbuf_r+0x12>
 8005ba0:	9901      	ldr	r1, [sp, #4]
 8005ba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005baa:	4259      	negs	r1, r3
 8005bac:	4159      	adcs	r1, r3
 8005bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bb2:	e7eb      	b.n	8005b8c <__swhatbuf_r+0x24>

08005bb4 <__smakebuf_r>:
 8005bb4:	898b      	ldrh	r3, [r1, #12]
 8005bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb8:	079d      	lsls	r5, r3, #30
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	d507      	bpl.n	8005bd0 <__smakebuf_r+0x1c>
 8005bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	ab01      	add	r3, sp, #4
 8005bd2:	466a      	mov	r2, sp
 8005bd4:	f7ff ffc8 	bl	8005b68 <__swhatbuf_r>
 8005bd8:	9900      	ldr	r1, [sp, #0]
 8005bda:	4605      	mov	r5, r0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7fe febd 	bl	800495c <_malloc_r>
 8005be2:	b948      	cbnz	r0, 8005bf8 <__smakebuf_r+0x44>
 8005be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be8:	059a      	lsls	r2, r3, #22
 8005bea:	d4ef      	bmi.n	8005bcc <__smakebuf_r+0x18>
 8005bec:	f023 0303 	bic.w	r3, r3, #3
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	e7e3      	b.n	8005bc0 <__smakebuf_r+0xc>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	6020      	str	r0, [r4, #0]
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	9b00      	ldr	r3, [sp, #0]
 8005c04:	6163      	str	r3, [r4, #20]
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	6120      	str	r0, [r4, #16]
 8005c0a:	b15b      	cbz	r3, 8005c24 <__smakebuf_r+0x70>
 8005c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f81d 	bl	8005c50 <_isatty_r>
 8005c16:	b128      	cbz	r0, 8005c24 <__smakebuf_r+0x70>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	431d      	orrs	r5, r3
 8005c28:	81a5      	strh	r5, [r4, #12]
 8005c2a:	e7cf      	b.n	8005bcc <__smakebuf_r+0x18>

08005c2c <_fstat_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	; (8005c4c <_fstat_r+0x20>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f7fb fec0 	bl	80019be <_fstat>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d102      	bne.n	8005c48 <_fstat_r+0x1c>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b103      	cbz	r3, 8005c48 <_fstat_r+0x1c>
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000400 	.word	0x20000400

08005c50 <_isatty_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d06      	ldr	r5, [pc, #24]	; (8005c6c <_isatty_r+0x1c>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fb febf 	bl	80019de <_isatty>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_isatty_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_isatty_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000400 	.word	0x20000400

08005c70 <_init>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr

08005c7c <_fini>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr
