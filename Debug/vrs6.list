
vrs6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08005fa0  08005fa0  00015fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800634c  0800634c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800634c  0800634c  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800634c  0800634c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08006354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00000178  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000348  20000348  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   000068a0  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b66  00000000  00000000  00026ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000878  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000618  00000000  00000000  00028ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017b8b  00000000  00000000  000294e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007c68  00000000  00000000  0004106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00077a38  00000000  00000000  00048cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003278  00000000  00000000  000c070c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000c3984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f88 	.word	0x08005f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08005f88 	.word	0x08005f88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <__NVIC_EnableIRQ+0x38>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff ffe3 	bl	8000d5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d96:	f7ff ff57 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffa7 	bl	8000cf4 <NVIC_EncodePriority>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	2011      	movs	r0, #17
 8000dac:	f7ff ff78 	bl	8000ca0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000db0:	2011      	movs	r0, #17
 8000db2:	f7ff ff57 	bl	8000c64 <__NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <LL_AHB1_GRP1_EnableClock>:
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dc6:	695a      	ldr	r2, [r3, #20]
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000

08000dec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000df0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000df4:	f7ff ffe2 	bl	8000dbc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000df8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000dfc:	f7ff ffde 	bl	8000dbc <LL_AHB1_GRP1_EnableClock>

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <__NVIC_GetPriorityGrouping>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f8a:	f023 0306 	bic.w	r3, r3, #6
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	431a      	orrs	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	60da      	str	r2, [r3, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f043 0204 	orr.w	r2, r3, #4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 0204 	bic.w	r2, r3, #4
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b02      	cmp	r3, #2
 8001018:	d101      	bne.n	800101e <LL_I2C_IsActiveFlag_TXIS+0x18>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b04      	cmp	r3, #4
 800103e:	d101      	bne.n	8001044 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b20      	cmp	r3, #32
 8001064:	d101      	bne.n	800106a <LL_I2C_IsActiveFlag_STOP+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f043 0220 	orr.w	r2, r3, #32
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	61da      	str	r2, [r3, #28]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	605a      	str	r2, [r3, #4]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	0d5b      	lsrs	r3, r3, #21
 80010ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <LL_I2C_HandleTransfer+0x48>)
 80010d4:	430b      	orrs	r3, r1
 80010d6:	43db      	mvns	r3, r3
 80010d8:	401a      	ands	r2, r3
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4319      	orrs	r1, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	041b      	lsls	r3, r3, #16
 80010e4:	4319      	orrs	r1, r3
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4319      	orrs	r1, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	430b      	orrs	r3, r1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	03ff7bff 	.word	0x03ff7bff

08001104 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800112a:	78fa      	ldrb	r2, [r7, #3]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_AHB1_GRP1_EnableClock>:
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000

0800116c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001176:	69da      	ldr	r2, [r3, #28]
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <LL_APB1_GRP1_EnableClock+0x2c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4313      	orrs	r3, r2
 800117e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4013      	ands	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000

0800119c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80011ca:	f7ff ffb7 	bl	800113c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011ce:	23c0      	movs	r3, #192	; 0xc0
 80011d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011d2:	2302      	movs	r3, #2
 80011d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80011da:	2301      	movs	r3, #1
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80011de:	2301      	movs	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <MX_I2C1_Init+0xd4>)
 80011ec:	f001 f954 	bl	8002498 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80011f0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80011f4:	f7ff ffba 	bl	800116c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011f8:	f7ff fe04 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe54 	bl	8000eb0 <NVIC_EncodePriority>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	201f      	movs	r0, #31
 800120e:	f7ff fe25 	bl	8000e5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001212:	201f      	movs	r0, #31
 8001214:	f7ff fe04 	bl	8000e20 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001218:	4816      	ldr	r0, [pc, #88]	; (8001274 <MX_I2C1_Init+0xd8>)
 800121a:	f7ff ff3d 	bl	8001098 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_I2C1_Init+0xd8>)
 8001220:	f7ff fec1 	bl	8000fa6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001224:	4813      	ldr	r0, [pc, #76]	; (8001274 <MX_I2C1_Init+0xd8>)
 8001226:	f7ff fe96 	bl	8000f56 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <MX_I2C1_Init+0xd8>)
 800122c:	f7ff fe83 	bl	8000f36 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_I2C1_Init+0xdc>)
 8001236:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001244:	2300      	movs	r3, #0
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001248:	2300      	movs	r3, #0
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <MX_I2C1_Init+0xd8>)
 8001254:	f001 fa33 	bl	80026be <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0xd8>)
 800125e:	f7ff fe8a 	bl	8000f76 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0xd8>)
 8001264:	f7ff fe57 	bl	8000f16 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3738      	adds	r7, #56	; 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	48000400 	.word	0x48000400
 8001274:	40005400 	.word	0x40005400
 8001278:	2000090e 	.word	0x2000090e

0800127c <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af02      	add	r7, sp, #8
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	4603      	mov	r3, r0
 8001290:	71bb      	strb	r3, [r7, #6]
 8001292:	460b      	mov	r3, r1
 8001294:	717b      	strb	r3, [r7, #5]
 8001296:	4613      	mov	r3, r2
 8001298:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 800129a:	793b      	ldrb	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80012a8:	7979      	ldrb	r1, [r7, #5]
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <i2c_master_write+0x80>)
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2302      	movs	r3, #2
 80012b6:	2200      	movs	r2, #0
 80012b8:	4811      	ldr	r0, [pc, #68]	; (8001300 <i2c_master_write+0x84>)
 80012ba:	f7ff fefd 	bl	80010b8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <i2c_master_write+0x84>)
 80012c4:	f7ff ff2b 	bl	800111e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80012c8:	e00a      	b.n	80012e0 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <i2c_master_write+0x84>)
 80012cc:	f7ff fe9b 	bl	8001006 <LL_I2C_IsActiveFlag_TXIS>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4619      	mov	r1, r3
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <i2c_master_write+0x84>)
 80012dc:	f7ff ff1f 	bl	800111e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <i2c_master_write+0x84>)
 80012e2:	f7ff feb6 	bl	8001052 <LL_I2C_IsActiveFlag_STOP>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ee      	beq.n	80012ca <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <i2c_master_write+0x84>)
 80012ee:	f7ff fec3 	bl	8001078 <LL_I2C_ClearFlag_STOP>
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	80002000 	.word	0x80002000
 8001300:	40005400 	.word	0x40005400

08001304 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4603      	mov	r3, r0
 8001314:	70fb      	strb	r3, [r7, #3]
 8001316:	460b      	mov	r3, r1
 8001318:	70bb      	strb	r3, [r7, #2]
 800131a:	4613      	mov	r3, r2
 800131c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800131e:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <i2c_master_read+0xdc>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001324:	7c3b      	ldrb	r3, [r7, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001330:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <i2c_master_read+0xe0>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <i2c_master_read+0xe4>)
 800133a:	f7ff fe44 	bl	8000fc6 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800133e:	7879      	ldrb	r1, [r7, #1]
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <i2c_master_read+0xe8>)
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	2200      	movs	r2, #0
 800134e:	4826      	ldr	r0, [pc, #152]	; (80013e8 <i2c_master_read+0xe4>)
 8001350:	f7ff feb2 	bl	80010b8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001354:	e00a      	b.n	800136c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <i2c_master_read+0xe4>)
 8001358:	f7ff fe55 	bl	8001006 <LL_I2C_IsActiveFlag_TXIS>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001362:	78bb      	ldrb	r3, [r7, #2]
 8001364:	4619      	mov	r1, r3
 8001366:	4820      	ldr	r0, [pc, #128]	; (80013e8 <i2c_master_read+0xe4>)
 8001368:	f7ff fed9 	bl	800111e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <i2c_master_read+0xe4>)
 800136e:	f7ff fe70 	bl	8001052 <LL_I2C_IsActiveFlag_STOP>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0ee      	beq.n	8001356 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001378:	481b      	ldr	r0, [pc, #108]	; (80013e8 <i2c_master_read+0xe4>)
 800137a:	f7ff fe7d 	bl	8001078 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800137e:	bf00      	nop
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <i2c_master_read+0xe4>)
 8001382:	f7ff fe66 	bl	8001052 <LL_I2C_IsActiveFlag_STOP>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f9      	bne.n	8001380 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800138c:	7879      	ldrb	r1, [r7, #1]
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <i2c_master_read+0xec>)
 8001392:	9201      	str	r2, [sp, #4]
 8001394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001398:	9200      	str	r2, [sp, #0]
 800139a:	2200      	movs	r2, #0
 800139c:	4812      	ldr	r0, [pc, #72]	; (80013e8 <i2c_master_read+0xe4>)
 800139e:	f7ff fe8b 	bl	80010b8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80013a2:	bf00      	nop
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <i2c_master_read+0xe4>)
 80013a6:	f7ff fe54 	bl	8001052 <LL_I2C_IsActiveFlag_STOP>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f9      	beq.n	80013a4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <i2c_master_read+0xe4>)
 80013b2:	f7ff fe61 	bl	8001078 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <i2c_master_read+0xe4>)
 80013b8:	f7ff fe15 	bl	8000fe6 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <i2c_master_read+0xe4>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <i2c_master_read+0xe4>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <i2c_master_read+0xf0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <i2c_master_read+0xe0>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <i2c_master_read+0xdc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001ec 	.word	0x200001ec
 80013e4:	200001f0 	.word	0x200001f0
 80013e8:	40005400 	.word	0x40005400
 80013ec:	80002000 	.word	0x80002000
 80013f0:	80002400 	.word	0x80002400
 80013f4:	200001f1 	.word	0x200001f1

080013f8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80013f8:	b598      	push	{r3, r4, r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <I2C1_EV_IRQHandler+0x34>)
 80013fe:	f7ff fe15 	bl	800102c <LL_I2C_IsActiveFlag_RXNE>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00e      	beq.n	8001426 <I2C1_EV_IRQHandler+0x2e>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <I2C1_EV_IRQHandler+0x38>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <I2C1_EV_IRQHandler+0x3c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	1c59      	adds	r1, r3, #1
 8001414:	b2c8      	uxtb	r0, r1
 8001416:	4907      	ldr	r1, [pc, #28]	; (8001434 <I2C1_EV_IRQHandler+0x3c>)
 8001418:	7008      	strb	r0, [r1, #0]
 800141a:	18d4      	adds	r4, r2, r3
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <I2C1_EV_IRQHandler+0x34>)
 800141e:	f7ff fe71 	bl	8001104 <LL_I2C_ReceiveData8>
 8001422:	4603      	mov	r3, r0
 8001424:	7023      	strb	r3, [r4, #0]
		/*(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
		end_of_read_flag = 0;*/
	}
}
 8001426:	bf00      	nop
 8001428:	bd98      	pop	{r3, r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	40005400 	.word	0x40005400
 8001430:	200001ec 	.word	0x200001ec
 8001434:	200001f1 	.word	0x200001f1

08001438 <__NVIC_SetPriorityGrouping>:
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LL_RCC_HSI_Enable+0x1c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <LL_RCC_HSI_Enable+0x1c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <LL_RCC_HSI_IsReady+0x20>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000

080015d8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <LL_RCC_SetSysClkSource+0x24>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 0203 	bic.w	r2, r3, #3
 8001614:	4904      	ldr	r1, [pc, #16]	; (8001628 <LL_RCC_SetSysClkSource+0x24>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000

0800162c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <LL_RCC_GetSysClkSource+0x18>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <LL_RCC_SetAHBPrescaler+0x24>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <LL_RCC_SetAHBPrescaler+0x24>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <LL_RCC_SetAPB1Prescaler+0x24>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001680:	4904      	ldr	r1, [pc, #16]	; (8001694 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a8:	4904      	ldr	r1, [pc, #16]	; (80016bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000

080016c0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <LL_RCC_SetI2CClockSource+0x2c>)
 80016ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0e1b      	lsrs	r3, r3, #24
 80016d0:	43db      	mvns	r3, r3
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016da:	4904      	ldr	r1, [pc, #16]	; (80016ec <LL_RCC_SetI2CClockSource+0x2c>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	630b      	str	r3, [r1, #48]	; 0x30
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_APB1_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <LL_APB1_GRP1_EnableClock+0x2c>)
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <LL_APB1_GRP1_EnableClock+0x2c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001706:	69da      	ldr	r2, [r3, #28]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000

08001720 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <LL_APB2_GRP1_EnableClock+0x2c>)
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <LL_APB2_GRP1_EnableClock+0x2c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000

08001750 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <LL_FLASH_SetLatency+0x24>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 0207 	bic.w	r2, r3, #7
 8001760:	4904      	ldr	r1, [pc, #16]	; (8001774 <LL_FLASH_SetLatency+0x24>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40022000 	.word	0x40022000

08001778 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <LL_FLASH_GetLatency+0x18>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b0a8      	sub	sp, #160	; 0xa0
 8001798:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff ffc0 	bl	8001720 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80017a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80017a4:	f7ff ffa4 	bl	80016f0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f7ff fe45 	bl	8001438 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80017ae:	f7ff fe67 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2200      	movs	r2, #0
 80017b6:	210f      	movs	r1, #15
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff feb7 	bl	800152c <NVIC_EncodePriority>
 80017be:	4603      	mov	r3, r0
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295
 80017c6:	f7ff fe87 	bl	80014d8 <__NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* FPU_IRQn interrupt configuration */
  NVIC_SetPriority(FPU_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017ca:	f7ff fe59 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fea9 	bl	800152c <NVIC_EncodePriority>
 80017da:	4603      	mov	r3, r0
 80017dc:	4619      	mov	r1, r3
 80017de:	2051      	movs	r0, #81	; 0x51
 80017e0:	f7ff fe7a 	bl	80014d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(FPU_IRQn);
 80017e4:	2051      	movs	r0, #81	; 0x51
 80017e6:	f7ff fe59 	bl	800149c <__NVIC_EnableIRQ>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 f87b 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f7ff fafd 	bl	8000dec <MX_GPIO_Init>
  MX_DMA_Init();
 80017f2:	f7ff facb 	bl	8000d8c <MX_DMA_Init>
  MX_I2C1_Init();
 80017f6:	f7ff fcd1 	bl	800119c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017fa:	f000 fc6d 	bl	80020d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HTS221_Init();
 80017fe:	f001 fc23 	bl	8003048 <HTS221_Init>

  LPS25HB_Init();
 8001802:	f001 fcd9 	bl	80031b8 <LPS25HB_Init>

  	char message_pressure[128];
  	memset(message_pressure, 0, sizeof(message_pressure));
 8001806:	463b      	mov	r3, r7
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fac2 	bl	8003d96 <memset>

  	// Calculate reference pressure
  	for (int sample = 0; sample < N_REF_SAMPLES; sample++)
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001818:	e013      	b.n	8001842 <main+0xae>
  	{
  		reference_pressure += LPS25HB_get_pressure();
 800181a:	f001 fc9b 	bl	8003154 <LPS25HB_get_pressure>
 800181e:	eeb0 7a40 	vmov.f32	s14, s0
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <main+0x144>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <main+0x144>)
 800182e:	edc3 7a00 	vstr	s15, [r3]
  		LL_mDelay(40);
 8001832:	2028      	movs	r0, #40	; 0x28
 8001834:	f001 fa2a 	bl	8002c8c <LL_mDelay>
  	for (int sample = 0; sample < N_REF_SAMPLES; sample++)
 8001838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800183c:	3301      	adds	r3, #1
 800183e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001846:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800184a:	dbe6      	blt.n	800181a <main+0x86>
  	}
  	reference_pressure /= N_REF_SAMPLES;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <main+0x144>)
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	eddf 6a22 	vldr	s13, [pc, #136]	; 80018dc <main+0x148>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <main+0x144>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  memset(message_pressure, '\0', sizeof(message_pressure));
 8001860:	463b      	mov	r3, r7
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fa95 	bl	8003d96 <memset>

	  		// Pressure
	  		float pressure = LPS25HB_get_pressure();
 800186c:	f001 fc72 	bl	8003154 <LPS25HB_get_pressure>
 8001870:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88


	  		// Temperature
	  		float temperature = HTS221_get_temperature();
 8001874:	f001 fa86 	bl	8002d84 <HTS221_get_temperature>
 8001878:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84

	  		// Humidity
	  		float humidity = HTS221_get_humidity();
 800187c:	f001 fb42 	bl	8002f04 <HTS221_get_humidity>
 8001880:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
	  		/*float press_ratio = reference_pressure / filtered_pressure;
	  		float press_pw = powf(press_ratio, (1 / 5.257));
	  		float rel_height = ((press_pw - 1) * (temperature + 273.15)) / 0.0065;
*/
	  		// Format string
	  		sprintf(message_pressure, "%7.3f, %3.1f, %d\r", pressure, temperature, (int) humidity);
 8001884:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001888:	f7fe fe5e 	bl	8000548 <__aeabi_f2d>
 800188c:	4604      	mov	r4, r0
 800188e:	460d      	mov	r5, r1
 8001890:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001894:	f7fe fe58 	bl	8000548 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a4:	ee17 1a90 	vmov	r1, s15
 80018a8:	4638      	mov	r0, r7
 80018aa:	9102      	str	r1, [sp, #8]
 80018ac:	e9cd 2300 	strd	r2, r3, [sp]
 80018b0:	4622      	mov	r2, r4
 80018b2:	462b      	mov	r3, r5
 80018b4:	490a      	ldr	r1, [pc, #40]	; (80018e0 <main+0x14c>)
 80018b6:	f002 fa0b 	bl	8003cd0 <siprintf>
	  //		sprintf(message_pressure, "%7.3f,%7.3f\r", pressure, filtered_pressure);
	  		USART2_PutBuffer((uint8_t*) message_pressure, strlen(message_pressure));
 80018ba:	463b      	mov	r3, r7
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fcd7 	bl	8000270 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	463b      	mov	r3, r7
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fc96 	bl	80021fc <USART2_PutBuffer>

	  		// Delay
	  		LL_mDelay(40);
 80018d0:	2028      	movs	r0, #40	; 0x28
 80018d2:	f001 f9db 	bl	8002c8c <LL_mDelay>
  {
 80018d6:	e7c3      	b.n	8001860 <main+0xcc>
 80018d8:	200001f4 	.word	0x200001f4
 80018dc:	43fa0000 	.word	0x43fa0000
 80018e0:	08005fa0 	.word	0x08005fa0

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff ff31 	bl	8001750 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80018ee:	bf00      	nop
 80018f0:	f7ff ff42 	bl	8001778 <LL_FLASH_GetLatency>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1fa      	bne.n	80018f0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80018fa:	f7ff fe4b 	bl	8001594 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80018fe:	bf00      	nop
 8001900:	f7ff fe58 	bl	80015b4 <LL_RCC_HSI_IsReady>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	d1fa      	bne.n	8001900 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800190a:	2010      	movs	r0, #16
 800190c:	f7ff fe64 	bl	80015d8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fe99 	bl	8001648 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff feaa 	bl	8001670 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff febb 	bl	8001698 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fe6e 	bl	8001604 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001928:	bf00      	nop
 800192a:	f7ff fe7f 	bl	800162c <LL_RCC_GetSysClkSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1fa      	bne.n	800192a <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <SystemClock_Config+0x68>)
 8001936:	f001 f99b 	bl	8002c70 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800193a:	4804      	ldr	r0, [pc, #16]	; (800194c <SystemClock_Config+0x68>)
 800193c:	f001 f9cc 	bl	8002cd8 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001940:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001944:	f7ff febc 	bl	80016c0 <LL_RCC_SetI2CClockSource>
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	007a1200 	.word	0x007a1200

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_kill>:

int _kill(int pid, int sig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ea:	f002 fa27 	bl	8003e3c <__errno>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2216      	movs	r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
  return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_exit>:

void _exit (int status)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe7 	bl	80019e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a12:	e7fe      	b.n	8001a12 <_exit+0x12>

08001a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e00a      	b.n	8001a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a26:	f3af 8000 	nop.w
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	b2ca      	uxtb	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbf0      	blt.n	8001a26 <_read+0x12>
  }

  return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e009      	b.n	8001a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf1      	blt.n	8001a60 <_write+0x12>
  }
  return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_close>:

int _close(int file)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aae:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_isatty>:

int _isatty(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f002 f98c 	bl	8003e3c <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20003000 	.word	0x20003000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	200001f8 	.word	0x200001f8
 8001b58:	20000348 	.word	0x20000348

08001b5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <__NVIC_EnableIRQ+0x38>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <LL_DMA_EnableChannel+0x3c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	4907      	ldr	r1, [pc, #28]	; (8001c4c <LL_DMA_EnableChannel+0x3c>)
 8001c30:	5c8a      	ldrb	r2, [r1, r2]
 8001c32:	4611      	mov	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	440a      	add	r2, r1
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	08005fd0 	.word	0x08005fd0

08001c50 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <LL_DMA_SetDataTransferDirection+0x48>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c70:	f023 0310 	bic.w	r3, r3, #16
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	3a01      	subs	r2, #1
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <LL_DMA_SetDataTransferDirection+0x48>)
 8001c7a:	5c8a      	ldrb	r2, [r1, r2]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	440a      	add	r2, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	08005fd0 	.word	0x08005fd0

08001c9c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <LL_DMA_SetMode+0x44>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 0220 	bic.w	r2, r3, #32
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <LL_DMA_SetMode+0x44>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	440b      	add	r3, r1
 8001cca:	4619      	mov	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	08005fd0 	.word	0x08005fd0

08001ce4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <LL_DMA_SetPeriphIncMode+0x44>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <LL_DMA_SetPeriphIncMode+0x44>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	440b      	add	r3, r1
 8001d12:	4619      	mov	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	08005fd0 	.word	0x08005fd0

08001d2c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <LL_DMA_SetMemoryIncMode+0x44>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <LL_DMA_SetMemoryIncMode+0x44>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	440b      	add	r3, r1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	08005fd0 	.word	0x08005fd0

08001d74 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <LL_DMA_SetPeriphSize+0x44>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <LL_DMA_SetPeriphSize+0x44>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	440b      	add	r3, r1
 8001da2:	4619      	mov	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	08005fd0 	.word	0x08005fd0

08001dbc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <LL_DMA_SetMemorySize+0x44>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <LL_DMA_SetMemorySize+0x44>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	4619      	mov	r1, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	440b      	add	r3, r1
 8001dea:	4619      	mov	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	08005fd0 	.word	0x08005fd0

08001e04 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	440b      	add	r3, r1
 8001e32:	4619      	mov	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	08005fd0 	.word	0x08005fd0

08001e4c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <LL_DMA_SetDataLength+0x44>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	461a      	mov	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <LL_DMA_SetDataLength+0x44>)
 8001e72:	5c8a      	ldrb	r2, [r1, r2]
 8001e74:	4611      	mov	r1, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	440a      	add	r2, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	08005fd0 	.word	0x08005fd0

08001e94 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <LL_DMA_SetMemoryAddress+0x2c>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	08005fd0 	.word	0x08005fd0

08001ec4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <LL_DMA_SetPeriphAddress+0x2c>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6093      	str	r3, [r2, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	08005fd0 	.word	0x08005fd0

08001ef4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LL_DMA_EnableIT_TC+0x3c>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	3a01      	subs	r2, #1
 8001f12:	4907      	ldr	r1, [pc, #28]	; (8001f30 <LL_DMA_EnableIT_TC+0x3c>)
 8001f14:	5c8a      	ldrb	r2, [r1, r2]
 8001f16:	4611      	mov	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	440a      	add	r2, r1
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6013      	str	r3, [r2, #0]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	08005fd0 	.word	0x08005fd0

08001f34 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LL_DMA_EnableIT_TE+0x3c>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	461a      	mov	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	3a01      	subs	r2, #1
 8001f52:	4907      	ldr	r1, [pc, #28]	; (8001f70 <LL_DMA_EnableIT_TE+0x3c>)
 8001f54:	5c8a      	ldrb	r2, [r1, r2]
 8001f56:	4611      	mov	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	440a      	add	r2, r1
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	08005fd0 	.word	0x08005fd0

08001f74 <LL_AHB1_GRP1_EnableClock>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <LL_APB1_GRP1_EnableClock>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3308      	adds	r3, #8
 800202c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	e853 3f00 	ldrex	r3, [r3]
 8002034:	60bb      	str	r3, [r7, #8]
   return(result);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3308      	adds	r3, #8
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	61ba      	str	r2, [r7, #24]
 8002046:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002048:	6979      	ldr	r1, [r7, #20]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	e841 2300 	strex	r3, r2, [r1]
 8002050:	613b      	str	r3, [r7, #16]
   return(result);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e7      	bne.n	8002028 <LL_USART_DisableIT_CTS+0x8>
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002066:	b480      	push	{r7}
 8002068:	b089      	sub	sp, #36	; 0x24
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3308      	adds	r3, #8
 8002072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	e853 3f00 	ldrex	r3, [r3]
 800207a:	60bb      	str	r3, [r7, #8]
   return(result);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3308      	adds	r3, #8
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	61ba      	str	r2, [r7, #24]
 800208c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208e:	6979      	ldr	r1, [r7, #20]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	e841 2300 	strex	r3, r2, [r1]
 8002096:	613b      	str	r3, [r7, #16]
   return(result);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e7      	bne.n	800206e <LL_USART_EnableDMAReq_TX+0x8>
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	3724      	adds	r7, #36	; 0x24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3328      	adds	r3, #40	; 0x28
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	e002      	b.n	80020ca <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3324      	adds	r3, #36	; 0x24
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	615a      	str	r2, [r3, #20]
 80020f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002102:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002106:	f7ff ff4d 	bl	8001fa4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800210a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800210e:	f7ff ff31 	bl	8001f74 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002112:	f248 0304 	movw	r3, #32772	; 0x8004
 8002116:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002118:	2302      	movs	r3, #2
 800211a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002128:	2307      	movs	r3, #7
 800212a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4619      	mov	r1, r3
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002134:	f000 f9b0 	bl	8002498 <LL_GPIO_Init>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002138:	2210      	movs	r2, #16
 800213a:	2107      	movs	r1, #7
 800213c:	482d      	ldr	r0, [pc, #180]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 800213e:	f7ff fd87 	bl	8001c50 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002146:	2107      	movs	r1, #7
 8002148:	482a      	ldr	r0, [pc, #168]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 800214a:	f7ff fe5b 	bl	8001e04 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800214e:	2200      	movs	r2, #0
 8002150:	2107      	movs	r1, #7
 8002152:	4828      	ldr	r0, [pc, #160]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 8002154:	f7ff fda2 	bl	8001c9c <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002158:	2200      	movs	r2, #0
 800215a:	2107      	movs	r1, #7
 800215c:	4825      	ldr	r0, [pc, #148]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 800215e:	f7ff fdc1 	bl	8001ce4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	2107      	movs	r1, #7
 8002166:	4823      	ldr	r0, [pc, #140]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 8002168:	f7ff fde0 	bl	8001d2c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800216c:	2200      	movs	r2, #0
 800216e:	2107      	movs	r1, #7
 8002170:	4820      	ldr	r0, [pc, #128]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 8002172:	f7ff fdff 	bl	8001d74 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002176:	2200      	movs	r2, #0
 8002178:	2107      	movs	r1, #7
 800217a:	481e      	ldr	r0, [pc, #120]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 800217c:	f7ff fe1e 	bl	8001dbc <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002180:	2100      	movs	r1, #0
 8002182:	481d      	ldr	r0, [pc, #116]	; (80021f8 <MX_USART2_UART_Init+0x120>)
 8002184:	f7ff ff92 	bl	80020ac <LL_USART_DMA_GetRegAddr>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	2107      	movs	r1, #7
 800218e:	4819      	ldr	r0, [pc, #100]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 8002190:	f7ff fe98 	bl	8001ec4 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002194:	4818      	ldr	r0, [pc, #96]	; (80021f8 <MX_USART2_UART_Init+0x120>)
 8002196:	f7ff ff66 	bl	8002066 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800219a:	2107      	movs	r1, #7
 800219c:	4815      	ldr	r0, [pc, #84]	; (80021f4 <MX_USART2_UART_Init+0x11c>)
 800219e:	f7ff fec9 	bl	8001f34 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2026      	movs	r0, #38	; 0x26
 80021a6:	f7ff fd09 	bl	8001bbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80021aa:	2026      	movs	r0, #38	; 0x26
 80021ac:	f7ff fce8 	bl	8001b80 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80021b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021b4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80021c2:	230c      	movs	r3, #12
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80021ca:	2300      	movs	r3, #0
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <MX_USART2_UART_Init+0x120>)
 80021d6:	f000 fcc5 	bl	8002b64 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_USART2_UART_Init+0x120>)
 80021dc:	f7ff ff20 	bl	8002020 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART2_UART_Init+0x120>)
 80021e2:	f7ff ff07 	bl	8001ff4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80021e6:	4804      	ldr	r0, [pc, #16]	; (80021f8 <MX_USART2_UART_Init+0x120>)
 80021e8:	f7ff fef4 	bl	8001fd4 <LL_USART_Enable>
}
 80021ec:	bf00      	nop
 80021ee:	3738      	adds	r7, #56	; 0x38
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40004400 	.word	0x40004400

080021fc <USART2_PutBuffer>:


void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	2107      	movs	r1, #7
 800220e:	480a      	ldr	r0, [pc, #40]	; (8002238 <USART2_PutBuffer+0x3c>)
 8002210:	f7ff fe40 	bl	8001e94 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	461a      	mov	r2, r3
 8002218:	2107      	movs	r1, #7
 800221a:	4807      	ldr	r0, [pc, #28]	; (8002238 <USART2_PutBuffer+0x3c>)
 800221c:	f7ff fe16 	bl	8001e4c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002220:	2107      	movs	r1, #7
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <USART2_PutBuffer+0x3c>)
 8002224:	f7ff fe66 	bl	8001ef4 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002228:	2107      	movs	r1, #7
 800222a:	4803      	ldr	r0, [pc, #12]	; (8002238 <USART2_PutBuffer+0x3c>)
 800222c:	f7ff fcf0 	bl	8001c10 <LL_DMA_EnableChannel>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40020000 	.word	0x40020000

0800223c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002240:	f7ff fc8c 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226a:	f001 fded 	bl	8003e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226e:	f7ff fa91 	bl	8001794 <main>

08002272 <LoopForever>:

LoopForever:
    b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002274:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002280:	08006354 	.word	0x08006354
  ldr r2, =_sbss
 8002284:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002288:	20000348 	.word	0x20000348

0800228c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>

0800228e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800228e:	b480      	push	{r7}
 8002290:	b089      	sub	sp, #36	; 0x24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	613b      	str	r3, [r7, #16]
  return result;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2103      	movs	r1, #3
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	401a      	ands	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	61bb      	str	r3, [r7, #24]
  return result;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	431a      	orrs	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	43db      	mvns	r3, r3
 8002300:	401a      	ands	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	613b      	str	r3, [r7, #16]
  return result;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2103      	movs	r1, #3
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	61bb      	str	r3, [r7, #24]
  return result;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800237a:	b480      	push	{r7}
 800237c:	b089      	sub	sp, #36	; 0x24
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	613b      	str	r3, [r7, #16]
  return result;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2103      	movs	r1, #3
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
  return result;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	60da      	str	r2, [r3, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3724      	adds	r7, #36	; 0x24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	613b      	str	r3, [r7, #16]
  return result;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	210f      	movs	r1, #15
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	61bb      	str	r3, [r7, #24]
  return result;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002436:	b480      	push	{r7}
 8002438:	b089      	sub	sp, #36	; 0x24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	613b      	str	r3, [r7, #16]
  return result;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	210f      	movs	r1, #15
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	61bb      	str	r3, [r7, #24]
  return result;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	431a      	orrs	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800248c:	bf00      	nop
 800248e:	3724      	adds	r7, #36	; 0x24
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	613b      	str	r3, [r7, #16]
  return result;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024ba:	e051      	b.n	8002560 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d043      	beq.n	800255a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d003      	beq.n	80024e2 <LL_GPIO_Init+0x4a>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d10e      	bne.n	8002500 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	461a      	mov	r2, r3
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ff16 	bl	800231c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fef6 	bl	80022ec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	461a      	mov	r2, r3
 8002506:	69b9      	ldr	r1, [r7, #24]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff36 	bl	800237a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d11a      	bne.n	800254c <LL_GPIO_Init+0xb4>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	60bb      	str	r3, [r7, #8]
  return result;
 8002522:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b07      	cmp	r3, #7
 800252c:	d807      	bhi.n	800253e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	461a      	mov	r2, r3
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff4e 	bl	80023d8 <LL_GPIO_SetAFPin_0_7>
 800253c:	e006      	b.n	800254c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	461a      	mov	r2, r3
 8002544:	69b9      	ldr	r1, [r7, #24]
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ff75 	bl	8002436 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fe9a 	bl	800228e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1a6      	bne.n	80024bc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <LL_I2C_Enable>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_I2C_Disable>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 0201 	bic.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_I2C_ConfigFilters>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0219      	lsls	r1, r3, #8
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	430b      	orrs	r3, r1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_I2C_SetOwnAddress1>:
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025fa:	f023 0307 	bic.w	r3, r3, #7
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	430a      	orrs	r2, r1
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	609a      	str	r2, [r3, #8]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_I2C_EnableOwnAddress1>:
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_I2C_DisableOwnAddress1>:
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	609a      	str	r2, [r3, #8]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_I2C_SetTiming>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	611a      	str	r2, [r3, #16]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_I2C_SetMode>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_I2C_AcknowledgeNextData>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff65 	bl	8002598 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff6d 	bl	80025b8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ffb6 	bl	8002656 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff44 	bl	8002578 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ffa0 	bl	8002636 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	461a      	mov	r2, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff70 	bl	80025e6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ff81 	bl	8002616 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa9 	bl	8002672 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffb6 	bl	8002698 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <LL_RCC_HSI_IsReady>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <LL_RCC_HSI_IsReady+0x20>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b02      	cmp	r3, #2
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40021000 	.word	0x40021000

0800275c <LL_RCC_LSE_IsReady>:
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <LL_RCC_LSE_IsReady+0x20>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40021000 	.word	0x40021000

08002780 <LL_RCC_GetSysClkSource>:
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <LL_RCC_GetSysClkSource+0x18>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 030c 	and.w	r3, r3, #12
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000

0800279c <LL_RCC_GetAHBPrescaler>:
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000

080027b8 <LL_RCC_GetAPB1Prescaler>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <LL_RCC_GetAPB2Prescaler>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <LL_RCC_GetUSARTClockSource+0x28>)
 80027fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fc:	2103      	movs	r1, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	401a      	ands	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	4313      	orrs	r3, r2
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000

0800281c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <LL_RCC_PLL_GetMainSource+0x18>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000

08002854 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <LL_RCC_PLL_GetPrediv+0x18>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	f003 030f 	and.w	r3, r3, #15
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002878:	f000 f862 	bl	8002940 <RCC_GetSystemClockFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f880 	bl	800298c <RCC_GetHCLKClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f88e 	bl	80029b8 <RCC_GetPCLK1ClockFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f89a 	bl	80029e0 <RCC_GetPCLK2ClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d130      	bne.n	8002930 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff8e 	bl	80027f0 <LL_RCC_GetUSARTClockSource>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d00a      	beq.n	80028f0 <LL_RCC_GetUSARTClockFreq+0x34>
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d819      	bhi.n	8002912 <LL_RCC_GetUSARTClockFreq+0x56>
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d002      	beq.n	80028e8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d00c      	beq.n	8002900 <LL_RCC_GetUSARTClockFreq+0x44>
 80028e6:	e014      	b.n	8002912 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80028e8:	f000 f82a 	bl	8002940 <RCC_GetSystemClockFreq>
 80028ec:	60f8      	str	r0, [r7, #12]
        break;
 80028ee:	e01f      	b.n	8002930 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80028f0:	f7ff ff22 	bl	8002738 <LL_RCC_HSI_IsReady>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d017      	beq.n	800292a <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <LL_RCC_GetUSARTClockFreq+0x80>)
 80028fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80028fe:	e014      	b.n	800292a <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002900:	f7ff ff2c 	bl	800275c <LL_RCC_LSE_IsReady>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d011      	beq.n	800292e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800290a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002910:	e00d      	b.n	800292e <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002912:	f000 f815 	bl	8002940 <RCC_GetSystemClockFreq>
 8002916:	4603      	mov	r3, r0
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f837 	bl	800298c <RCC_GetHCLKClockFreq>
 800291e:	4603      	mov	r3, r0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f849 	bl	80029b8 <RCC_GetPCLK1ClockFreq>
 8002926:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002928:	e002      	b.n	8002930 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800292e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	007a1200 	.word	0x007a1200

08002940 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800294a:	f7ff ff19 	bl	8002780 <LL_RCC_GetSysClkSource>
 800294e:	4603      	mov	r3, r0
 8002950:	2b08      	cmp	r3, #8
 8002952:	d00c      	beq.n	800296e <RCC_GetSystemClockFreq+0x2e>
 8002954:	2b08      	cmp	r3, #8
 8002956:	d80e      	bhi.n	8002976 <RCC_GetSystemClockFreq+0x36>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <RCC_GetSystemClockFreq+0x22>
 800295c:	2b04      	cmp	r3, #4
 800295e:	d003      	beq.n	8002968 <RCC_GetSystemClockFreq+0x28>
 8002960:	e009      	b.n	8002976 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <RCC_GetSystemClockFreq+0x48>)
 8002964:	607b      	str	r3, [r7, #4]
      break;
 8002966:	e009      	b.n	800297c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <RCC_GetSystemClockFreq+0x48>)
 800296a:	607b      	str	r3, [r7, #4]
      break;
 800296c:	e006      	b.n	800297c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800296e:	f000 f84b 	bl	8002a08 <RCC_PLL_GetFreqDomain_SYS>
 8002972:	6078      	str	r0, [r7, #4]
      break;
 8002974:	e002      	b.n	800297c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <RCC_GetSystemClockFreq+0x48>)
 8002978:	607b      	str	r3, [r7, #4]
      break;
 800297a:	bf00      	nop
  }

  return frequency;
 800297c:	687b      	ldr	r3, [r7, #4]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	007a1200 	.word	0x007a1200

0800298c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002994:	f7ff ff02 	bl	800279c <LL_RCC_GetAHBPrescaler>
 8002998:	4603      	mov	r3, r0
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <RCC_GetHCLKClockFreq+0x28>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	461a      	mov	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	40d3      	lsrs	r3, r2
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	08005fb8 	.word	0x08005fb8

080029b8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029c0:	f7ff fefa 	bl	80027b8 <LL_RCC_GetAPB1Prescaler>
 80029c4:	4603      	mov	r3, r0
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <RCC_GetPCLK1ClockFreq+0x24>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	40d3      	lsrs	r3, r2
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	08005fc8 	.word	0x08005fc8

080029e0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029e8:	f7ff fef4 	bl	80027d4 <LL_RCC_GetAPB2Prescaler>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0adb      	lsrs	r3, r3, #11
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <RCC_GetPCLK2ClockFreq+0x24>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	40d3      	lsrs	r3, r2
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	08005fc8 	.word	0x08005fc8

08002a08 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a16:	f7ff ff01 	bl	800281c <LL_RCC_PLL_GetMainSource>
 8002a1a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a28:	d003      	beq.n	8002a32 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002a2a:	e005      	b.n	8002a38 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a2e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a30:	e005      	b.n	8002a3e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002a34:	60fb      	str	r3, [r7, #12]
      break;
 8002a36:	e002      	b.n	8002a3e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002a3a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002a3c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002a3e:	f7ff ff09 	bl	8002854 <LL_RCC_PLL_GetPrediv>
 8002a42:	4603      	mov	r3, r0
 8002a44:	3301      	adds	r3, #1
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	fbb2 f4f3 	udiv	r4, r2, r3
 8002a4c:	f7ff fef4 	bl	8002838 <LL_RCC_PLL_GetMultiplicator>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a56:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a5a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	603a      	str	r2, [r7, #0]
  return result;
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	fab2 f282 	clz	r2, r2
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	40d3      	lsrs	r3, r2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	003d0900 	.word	0x003d0900
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <LL_USART_IsEnabled>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <LL_USART_IsEnabled+0x18>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <LL_USART_IsEnabled+0x1a>
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_USART_SetStopBitsLength>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	605a      	str	r2, [r3, #4]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_USART_SetHWFlowCtrl>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_USART_SetBaudRate>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0a:	d11a      	bne.n	8002b42 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	005a      	lsls	r2, r3, #1
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	441a      	add	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	60da      	str	r2, [r3, #12]
}
 8002b40:	e00a      	b.n	8002b58 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	085a      	lsrs	r2, r3, #1
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	441a      	add	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff84 	bl	8002a84 <LL_USART_IsEnabled>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d14e      	bne.n	8002c20 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <LL_USART_Init+0xc8>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	6851      	ldr	r1, [r2, #4]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	6912      	ldr	r2, [r2, #16]
 8002b98:	4311      	orrs	r1, r2
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	6992      	ldr	r2, [r2, #24]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff7c 	bl	8002aaa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff89 	bl	8002ad0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <LL_USART_Init+0xcc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d104      	bne.n	8002bd0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7ff fe78 	bl	80028bc <LL_RCC_GetUSARTClockFreq>
 8002bcc:	61b8      	str	r0, [r7, #24]
 8002bce:	e016      	b.n	8002bfe <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <LL_USART_Init+0xd0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d107      	bne.n	8002be8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fe47 	bl	8002870 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e00a      	b.n	8002bfe <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <LL_USART_Init+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d106      	bne.n	8002bfe <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fe3b 	bl	8002870 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002c18:	69b9      	ldr	r1, [r7, #24]
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff6b 	bl	8002af6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	efff69f3 	.word	0xefff69f3
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40004400 	.word	0x40004400
 8002c38:	40004800 	.word	0x40004800

08002c3c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <LL_InitTick+0x30>)
 8002c50:	3b01      	subs	r3, #1
 8002c52:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <LL_InitTick+0x30>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <LL_InitTick+0x30>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ffdd 	bl	8002c3c <LL_InitTick>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <LL_mDelay+0x48>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002c9a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d00c      	beq.n	8002cbe <LL_mDelay+0x32>
  {
    Delay++;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002caa:	e008      	b.n	8002cbe <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <LL_mDelay+0x48>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <LL_mDelay+0x32>
    {
      Delay--;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f3      	bne.n	8002cac <LL_mDelay+0x20>
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010

08002cd8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <LL_SetSystemCoreClock+0x1c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HTS221_read_byte>:

uint8_t hts221_address = HTS221_DEVICE_ADDRESS;

// HTS221_read_byte implementation
uint8_t HTS221_read_byte(uint8_t reg_addr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_address, 0));
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HTS221_read_byte+0x30>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	79fa      	ldrb	r2, [r7, #7]
 8002d0c:	f107 000f 	add.w	r0, r7, #15
 8002d10:	2100      	movs	r1, #0
 8002d12:	9100      	str	r1, [sp, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	f7fe faf5 	bl	8001304 <i2c_master_read>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	781b      	ldrb	r3, [r3, #0]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000004 	.word	0x20000004

08002d2c <HTS221_write_byte>:

// HTS221_write_byte implementation
void HTS221_write_byte(uint8_t data, uint8_t register_addr, uint8_t slave_addr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	460b      	mov	r3, r1
 8002d38:	71bb      	strb	r3, [r7, #6]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	717b      	strb	r3, [r7, #5]
	i2c_master_write(data, register_addr, slave_addr, 0);
 8002d3e:	797a      	ldrb	r2, [r7, #5]
 8002d40:	79b9      	ldrb	r1, [r7, #6]
 8002d42:	79f8      	ldrb	r0, [r7, #7]
 8002d44:	2300      	movs	r3, #0
 8002d46:	f7fe fa99 	bl	800127c <i2c_master_write>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HTS221_read_array>:

// HTS221_read_array implementation
void HTS221_read_array(uint8_t *data, uint8_t reg, uint8_t length)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
 8002d60:	4613      	mov	r3, r2
 8002d62:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_address, 1);
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HTS221_read_array+0x2c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	78b9      	ldrb	r1, [r7, #2]
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	9000      	str	r0, [sp, #0]
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe fac7 	bl	8001304 <i2c_master_read>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000004 	.word	0x20000004

08002d84 <HTS221_get_temperature>:

float HTS221_get_temperature()
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
	int16_t t0_degC_x8 = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t t1_degC_x8 = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t t0_t1_msb = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t t0_out = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	843b      	strh	r3, [r7, #32]
	int16_t t1_out = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	83fb      	strh	r3, [r7, #30]

	// T0 temperature
	uint8_t t0_tmp = HTS221_read_byte(HTS221_T0_DEG_C_x8);
 8002da0:	2032      	movs	r0, #50	; 0x32
 8002da2:	f7ff ffa9 	bl	8002cf8 <HTS221_read_byte>
 8002da6:	4603      	mov	r3, r0
 8002da8:	777b      	strb	r3, [r7, #29]
	t0_degC_x8 |= t0_tmp;
 8002daa:	7f7b      	ldrb	r3, [r7, #29]
 8002dac:	b21a      	sxth	r2, r3
 8002dae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002db0:	4313      	orrs	r3, r2
 8002db2:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint8_t t0_out_tmp[2] = { 0 };
 8002db4:	2300      	movs	r3, #0
 8002db6:	813b      	strh	r3, [r7, #8]
	HTS221_read_array(t0_out_tmp, HTS221_T0_OUT_L, 2);
 8002db8:	f107 0308 	add.w	r3, r7, #8
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	213c      	movs	r1, #60	; 0x3c
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ffc7 	bl	8002d54 <HTS221_read_array>
	t0_out |= t0_out_tmp[0];
 8002dc6:	7a3b      	ldrb	r3, [r7, #8]
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	8c3b      	ldrh	r3, [r7, #32]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	843b      	strh	r3, [r7, #32]
	t0_out |= (t0_out_tmp[1] << 8);
 8002dd0:	7a7b      	ldrb	r3, [r7, #9]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	b21a      	sxth	r2, r3
 8002dd6:	8c3b      	ldrh	r3, [r7, #32]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	843b      	strh	r3, [r7, #32]

	// T1 temperature
	uint8_t t1_temp = HTS221_read_byte(HTS221_T1_DEG_C_x8);
 8002ddc:	2033      	movs	r0, #51	; 0x33
 8002dde:	f7ff ff8b 	bl	8002cf8 <HTS221_read_byte>
 8002de2:	4603      	mov	r3, r0
 8002de4:	773b      	strb	r3, [r7, #28]
	t1_degC_x8 |= t1_temp;
 8002de6:	7f3b      	ldrb	r3, [r7, #28]
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dec:	4313      	orrs	r3, r2
 8002dee:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t t1_out_tmp[2] = { 0 };
 8002df0:	2300      	movs	r3, #0
 8002df2:	80bb      	strh	r3, [r7, #4]
	HTS221_read_array(t1_out_tmp, HTS221_T1_OUT_L, 2);
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	2202      	movs	r2, #2
 8002df8:	213e      	movs	r1, #62	; 0x3e
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ffaa 	bl	8002d54 <HTS221_read_array>
	t1_out |= t1_out_tmp[0];
 8002e00:	793b      	ldrb	r3, [r7, #4]
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	8bfb      	ldrh	r3, [r7, #30]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	83fb      	strh	r3, [r7, #30]
	t1_out |= (t1_out_tmp[1] << 8);
 8002e0a:	797b      	ldrb	r3, [r7, #5]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	b21a      	sxth	r2, r3
 8002e10:	8bfb      	ldrh	r3, [r7, #30]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	83fb      	strh	r3, [r7, #30]

	// T_OUT temperature
	uint8_t t_out_tmp[2] = { 0 };
 8002e16:	2300      	movs	r3, #0
 8002e18:	803b      	strh	r3, [r7, #0]
	HTS221_read_array(t_out_tmp, HTS221_TEMPERATURE_OUT_L, 2);
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	212a      	movs	r1, #42	; 0x2a
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff97 	bl	8002d54 <HTS221_read_array>
	int16_t t_out = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	837b      	strh	r3, [r7, #26]
	t_out |= t_out_tmp[0];
 8002e2a:	783b      	ldrb	r3, [r7, #0]
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	8b7b      	ldrh	r3, [r7, #26]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	837b      	strh	r3, [r7, #26]
	t_out |= (t_out_tmp[1] << 8);
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	8b7b      	ldrh	r3, [r7, #26]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	837b      	strh	r3, [r7, #26]

	// Temperature interpolation
	t0_t1_msb = HTS221_read_byte(HTS221_T1_T0_MSB);
 8002e40:	2035      	movs	r0, #53	; 0x35
 8002e42:	f7ff ff59 	bl	8002cf8 <HTS221_read_byte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	float T_DegC;
	float T0_degC = (t0_degC_x8 + (1 << 8) * (t0_t1_msb & 0x03)) / 8.0;
 8002e4c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb61 	bl	8000524 <__aeabi_i2d>
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <HTS221_get_temperature+0x17c>)
 8002e68:	f7fd fcf0 	bl	800084c <__aeabi_ddiv>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fe98 	bl	8000ba8 <__aeabi_d2f>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	617b      	str	r3, [r7, #20]
	float T1_degC = (t1_degC_x8 + (1 << 6) * (t0_t1_msb & 0x0C)) / 8.0; // Value is in 3rd and fourth bit, so we only need to shift this value 6 more bits.
 8002e7c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb49 	bl	8000524 <__aeabi_i2d>
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HTS221_get_temperature+0x17c>)
 8002e98:	f7fd fcd8 	bl	800084c <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7fd fe80 	bl	8000ba8 <__aeabi_d2f>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	613b      	str	r3, [r7, #16]
	T_DegC = (T0_degC + (t_out - t0_out) * (T1_degC - T0_degC) / (t1_out - t0_out));
 8002eac:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002eb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ebe:	edd7 6a04 	vldr	s13, [r7, #16]
 8002ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ec6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002eca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ece:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002ed2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	ee07 3a90 	vmov	s15, r3
 8002edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc7 7a03 	vstr	s15, [r7, #12]

	return T_DegC;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	ee07 3a90 	vmov	s15, r3
}
 8002ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40200000 	.word	0x40200000

08002f04 <HTS221_get_humidity>:

float HTS221_get_humidity()
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
	uint8_t h0_rh_x2 = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
	uint8_t h1_rh_x2 = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75bb      	strb	r3, [r7, #22]
	int16_t h0_t0_out = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	82bb      	strh	r3, [r7, #20]
	int16_t h1_t0_out = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	827b      	strh	r3, [r7, #18]
	int16_t h_out = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	823b      	strh	r3, [r7, #16]

	// H0_T0
	uint8_t h0_t0_temp = HTS221_read_byte(HTS221_H0_T0_OUT_L);
 8002f1e:	2036      	movs	r0, #54	; 0x36
 8002f20:	f7ff feea 	bl	8002cf8 <HTS221_read_byte>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
	h0_t0_out |= h0_t0_temp;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	8abb      	ldrh	r3, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	82bb      	strh	r3, [r7, #20]
	h0_t0_temp = HTS221_read_byte(HTS221_H0_T0_OUT_H);
 8002f32:	2037      	movs	r0, #55	; 0x37
 8002f34:	f7ff fee0 	bl	8002cf8 <HTS221_read_byte>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]
	h0_t0_out |= (h0_t0_temp << 8);
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b21a      	sxth	r2, r3
 8002f42:	8abb      	ldrh	r3, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	82bb      	strh	r3, [r7, #20]

	// H1_T0
	uint8_t h1_t0_temp = HTS221_read_byte(HTS221_H1_T0_OUT_L);
 8002f48:	203a      	movs	r0, #58	; 0x3a
 8002f4a:	f7ff fed5 	bl	8002cf8 <HTS221_read_byte>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73bb      	strb	r3, [r7, #14]
	h1_t0_temp |= h1_t0_temp;
	h1_t0_temp = HTS221_read_byte(HTS221_H1_T0_OUT_H);
 8002f52:	203b      	movs	r0, #59	; 0x3b
 8002f54:	f7ff fed0 	bl	8002cf8 <HTS221_read_byte>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73bb      	strb	r3, [r7, #14]
	h1_t0_out |= (h1_t0_temp << 8);
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	b21a      	sxth	r2, r3
 8002f62:	8a7b      	ldrh	r3, [r7, #18]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	827b      	strh	r3, [r7, #18]

	// H0_rH_x2
	h0_rh_x2 = HTS221_read_byte(HTS221_H0_RH_x2);
 8002f68:	2030      	movs	r0, #48	; 0x30
 8002f6a:	f7ff fec5 	bl	8002cf8 <HTS221_read_byte>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]

	// H1_rH_x2
	h1_rh_x2 = HTS221_read_byte(HTS221_H1_RH_x2);
 8002f72:	2031      	movs	r0, #49	; 0x31
 8002f74:	f7ff fec0 	bl	8002cf8 <HTS221_read_byte>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75bb      	strb	r3, [r7, #22]

	// H_OUT
	uint8_t h0_out_temp = HTS221_read_byte(HTS221_HUMIDITY_OUT_L);
 8002f7c:	2028      	movs	r0, #40	; 0x28
 8002f7e:	f7ff febb 	bl	8002cf8 <HTS221_read_byte>
 8002f82:	4603      	mov	r3, r0
 8002f84:	737b      	strb	r3, [r7, #13]
	h_out |= h0_out_temp;
 8002f86:	7b7b      	ldrb	r3, [r7, #13]
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	8a3b      	ldrh	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	823b      	strh	r3, [r7, #16]
	h0_out_temp = HTS221_read_byte(HTS221_HUMIDITY_OUT_H);
 8002f90:	2029      	movs	r0, #41	; 0x29
 8002f92:	f7ff feb1 	bl	8002cf8 <HTS221_read_byte>
 8002f96:	4603      	mov	r3, r0
 8002f98:	737b      	strb	r3, [r7, #13]
	h_out |= (h0_out_temp << 8);
 8002f9a:	7b7b      	ldrb	r3, [r7, #13]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	8a3b      	ldrh	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	823b      	strh	r3, [r7, #16]

	float humidity = 0.0;
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
	float h0 = h0_rh_x2 / 2.0;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fab8 	bl	8000524 <__aeabi_i2d>
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fbc:	f7fd fc46 	bl	800084c <__aeabi_ddiv>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fdee 	bl	8000ba8 <__aeabi_d2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	607b      	str	r3, [r7, #4]
	float h1 = h1_rh_x2 / 2.0;
 8002fd0:	7dbb      	ldrb	r3, [r7, #22]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd faa6 	bl	8000524 <__aeabi_i2d>
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe0:	f7fd fc34 	bl	800084c <__aeabi_ddiv>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fddc 	bl	8000ba8 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	603b      	str	r3, [r7, #0]
	humidity = (h0 + (h_out - h0_t0_out) * (h1 - h0) / (h1_t0_out - h0_t0_out));
 8002ff4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ff8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003006:	edd7 6a00 	vldr	s13, [r7]
 800300a:	edd7 7a01 	vldr	s15, [r7, #4]
 800300e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003012:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003016:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800301a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800302c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	edc7 7a02 	vstr	s15, [r7, #8]

	return humidity;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	ee07 3a90 	vmov	s15, r3
}
 800303e:	eeb0 0a67 	vmov.f32	s0, s15
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HTS221_Init>:

uint8_t HTS221_Init()
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	71fb      	strb	r3, [r7, #7]

	// HTS221__ACC_ON;
	LL_mDelay(100);
 8003052:	2064      	movs	r0, #100	; 0x64
 8003054:	f7ff fe1a 	bl	8002c8c <LL_mDelay>

	uint8_t val = HTS221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 8003058:	200f      	movs	r0, #15
 800305a:	f7ff fe4d 	bl	8002cf8 <HTS221_read_byte>
 800305e:	4603      	mov	r3, r0
 8003060:	71bb      	strb	r3, [r7, #6]

	if (val != HTS221_WHO_AM_I_VALUE)
 8003062:	79bb      	ldrb	r3, [r7, #6]
 8003064:	2bbc      	cmp	r3, #188	; 0xbc
 8003066:	d003      	beq.n	8003070 <HTS221_Init+0x28>
	{
		status = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	71fb      	strb	r3, [r7, #7]
		return status;
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	e025      	b.n	80030bc <HTS221_Init+0x74>
	}

	uint8_t reg_status = HTS221_read_byte(HTS221_CONTROL_REG);
 8003070:	2020      	movs	r0, #32
 8003072:	f7ff fe41 	bl	8002cf8 <HTS221_read_byte>
 8003076:	4603      	mov	r3, r0
 8003078:	717b      	strb	r3, [r7, #5]
	// PD mode ON (power on)
	reg_status |= (1 << 7);
 800307a:	797b      	ldrb	r3, [r7, #5]
 800307c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003080:	717b      	strb	r3, [r7, #5]
	HTS221_write_byte(reg_status, HTS221_CONTROL_REG, hts221_address);
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HTS221_Init+0x7c>)
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	797b      	ldrb	r3, [r7, #5]
 8003088:	2120      	movs	r1, #32
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fe4e 	bl	8002d2c <HTS221_write_byte>
	// Output data rate setup
	reg_status = HTS221_read_byte(HTS221_CONTROL_REG);
 8003090:	2020      	movs	r0, #32
 8003092:	f7ff fe31 	bl	8002cf8 <HTS221_read_byte>
 8003096:	4603      	mov	r3, r0
 8003098:	717b      	strb	r3, [r7, #5]
	reg_status |= (1 << 0);
 800309a:	797b      	ldrb	r3, [r7, #5]
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	717b      	strb	r3, [r7, #5]
	HTS221_write_byte(reg_status, HTS221_CONTROL_REG, hts221_address);
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HTS221_Init+0x7c>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	797b      	ldrb	r3, [r7, #5]
 80030a8:	2120      	movs	r1, #32
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fe3e 	bl	8002d2c <HTS221_write_byte>

	reg_status = HTS221_read_byte(HTS221_CONTROL_REG);
 80030b0:	2020      	movs	r0, #32
 80030b2:	f7ff fe21 	bl	8002cf8 <HTS221_read_byte>
 80030b6:	4603      	mov	r3, r0
 80030b8:	717b      	strb	r3, [r7, #5]

	return status;
 80030ba:	79fb      	ldrb	r3, [r7, #7]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000004 	.word	0x20000004

080030c8 <LPS25HB_read_byte>:

uint8_t lps25hb_address = LPS25HB_DEVICE_ADDRESS0;

// LPS25HB_read_byte implementation
uint8_t LPS25HB_read_byte(uint8_t reg_addr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, lps25hb_address, 0));
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <LPS25HB_read_byte+0x30>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	79fa      	ldrb	r2, [r7, #7]
 80030dc:	f107 000f 	add.w	r0, r7, #15
 80030e0:	2100      	movs	r1, #0
 80030e2:	9100      	str	r1, [sp, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	f7fe f90d 	bl	8001304 <i2c_master_read>
 80030ea:	4603      	mov	r3, r0
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000005 	.word	0x20000005

080030fc <LPS25HB_write_byte>:

// LPS25HB_write_byte implementation
void LPS25HB_write_byte(uint8_t data, uint8_t register_addr, uint8_t slave_addr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
 8003106:	460b      	mov	r3, r1
 8003108:	71bb      	strb	r3, [r7, #6]
 800310a:	4613      	mov	r3, r2
 800310c:	717b      	strb	r3, [r7, #5]
	i2c_master_write(data, register_addr, slave_addr, 0);
 800310e:	797a      	ldrb	r2, [r7, #5]
 8003110:	79b9      	ldrb	r1, [r7, #6]
 8003112:	79f8      	ldrb	r0, [r7, #7]
 8003114:	2300      	movs	r3, #0
 8003116:	f7fe f8b1 	bl	800127c <i2c_master_write>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <LPS25HB_read_array>:

// LPS25HB_read_array implementation
void LPS25HB_read_array(uint8_t *data, uint8_t reg, uint8_t length)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
 8003130:	4613      	mov	r3, r2
 8003132:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, lps25hb_address, 1);
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <LPS25HB_read_array+0x2c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	78b9      	ldrb	r1, [r7, #2]
 800313c:	2001      	movs	r0, #1
 800313e:	9000      	str	r0, [sp, #0]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fe f8df 	bl	8001304 <i2c_master_read>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000005 	.word	0x20000005

08003154 <LPS25HB_get_pressure>:

// LPS25HB_get_pressure implementation
float LPS25HB_get_pressure()
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
	uint8_t pressure[3] = { 0 };
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <LPS25HB_get_pressure+0x5c>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	803b      	strh	r3, [r7, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	70bb      	strb	r3, [r7, #2]
	LPS25HB_read_array(pressure, LPS25HB_PRESSURE_OUT_XL, 3);
 8003164:	463b      	mov	r3, r7
 8003166:	2203      	movs	r2, #3
 8003168:	2128      	movs	r1, #40	; 0x28
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ffda 	bl	8003124 <LPS25HB_read_array>

	float pressure_real = ((pressure[2] * 65536) + (pressure[1] * 256) + pressure[0]) / 4096.0;
 8003170:	78bb      	ldrb	r3, [r7, #2]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	787a      	ldrb	r2, [r7, #1]
 8003176:	4413      	add	r3, r2
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	783a      	ldrb	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f9d0 	bl	8000524 <__aeabi_i2d>
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <LPS25HB_get_pressure+0x60>)
 800318a:	f7fd fb5f 	bl	800084c <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f7fd fd07 	bl	8000ba8 <__aeabi_d2f>
 800319a:	4603      	mov	r3, r0
 800319c:	607b      	str	r3, [r7, #4]

	return pressure_real;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	ee07 3a90 	vmov	s15, r3
}
 80031a4:	eeb0 0a67 	vmov.f32	s0, s15
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	08005fb4 	.word	0x08005fb4
 80031b4:	40b00000 	.word	0x40b00000

080031b8 <LPS25HB_Init>:

uint8_t LPS25HB_Init()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	71fb      	strb	r3, [r7, #7]

	//LPS25hb_ACC_ON;
	LL_mDelay(100);
 80031c2:	2064      	movs	r0, #100	; 0x64
 80031c4:	f7ff fd62 	bl	8002c8c <LL_mDelay>

	uint8_t val = LPS25HB_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80031c8:	200f      	movs	r0, #15
 80031ca:	f7ff ff7d 	bl	80030c8 <LPS25HB_read_byte>
 80031ce:	4603      	mov	r3, r0
 80031d0:	71bb      	strb	r3, [r7, #6]

	if (val == LPS25HB_WHO_AM_I_VALUE)
 80031d2:	79bb      	ldrb	r3, [r7, #6]
 80031d4:	2bbd      	cmp	r3, #189	; 0xbd
 80031d6:	d102      	bne.n	80031de <LPS25HB_Init+0x26>
	{
		status = 1;
 80031d8:	2301      	movs	r3, #1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	e00f      	b.n	80031fe <LPS25HB_Init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		lps25hb_address = LPS25HB_DEVICE_ADDRESS1;
 80031de:	4b27      	ldr	r3, [pc, #156]	; (800327c <LPS25HB_Init+0xc4>)
 80031e0:	22ba      	movs	r2, #186	; 0xba
 80031e2:	701a      	strb	r2, [r3, #0]
		val = LPS25HB_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 80031e4:	200f      	movs	r0, #15
 80031e6:	f7ff ff6f 	bl	80030c8 <LPS25HB_read_byte>
 80031ea:	4603      	mov	r3, r0
 80031ec:	71bb      	strb	r3, [r7, #6]
		if (val == LPS25HB_WHO_AM_I_VALUE)
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	2bbd      	cmp	r3, #189	; 0xbd
 80031f2:	d102      	bne.n	80031fa <LPS25HB_Init+0x42>
		{
			status = 1;
 80031f4:	2301      	movs	r3, #1
 80031f6:	71fb      	strb	r3, [r7, #7]
 80031f8:	e001      	b.n	80031fe <LPS25HB_Init+0x46>
		}
		else
		{
			status = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	// Set power-down mode to turn ON -> set PD to 1 to power on
	uint8_t reg_setup = LPS25HB_read_byte(LPS25HB_CONTROL_REG1);
 80031fe:	2020      	movs	r0, #32
 8003200:	f7ff ff62 	bl	80030c8 <LPS25HB_read_byte>
 8003204:	4603      	mov	r3, r0
 8003206:	717b      	strb	r3, [r7, #5]
	reg_setup |= (1 << 7);
 8003208:	797b      	ldrb	r3, [r7, #5]
 800320a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800320e:	717b      	strb	r3, [r7, #5]
	LPS25HB_write_byte(reg_setup, LPS25HB_CONTROL_REG1, lps25hb_address);
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <LPS25HB_Init+0xc4>)
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	797b      	ldrb	r3, [r7, #5]
 8003216:	2120      	movs	r1, #32
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff6f 	bl	80030fc <LPS25HB_write_byte>
	// Set up continuous update
	reg_setup = LPS25HB_read_byte(LPS25HB_CONTROL_REG1);
 800321e:	2020      	movs	r0, #32
 8003220:	f7ff ff52 	bl	80030c8 <LPS25HB_read_byte>
 8003224:	4603      	mov	r3, r0
 8003226:	717b      	strb	r3, [r7, #5]
	reg_setup &= ~(1 << 2);
 8003228:	797b      	ldrb	r3, [r7, #5]
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	717b      	strb	r3, [r7, #5]
	LPS25HB_write_byte(reg_setup, LPS25HB_CONTROL_REG1, lps25hb_address);
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <LPS25HB_Init+0xc4>)
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	797b      	ldrb	r3, [r7, #5]
 8003236:	2120      	movs	r1, #32
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff5f 	bl	80030fc <LPS25HB_write_byte>
	// Set Output data rate register to 25 Hz -> 0b100
	reg_setup = LPS25HB_read_byte(LPS25HB_CONTROL_REG1);
 800323e:	2020      	movs	r0, #32
 8003240:	f7ff ff42 	bl	80030c8 <LPS25HB_read_byte>
 8003244:	4603      	mov	r3, r0
 8003246:	717b      	strb	r3, [r7, #5]
	reg_setup &= ~(0x07 << 4);
 8003248:	797b      	ldrb	r3, [r7, #5]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	717b      	strb	r3, [r7, #5]
	reg_setup |= (0x04 << 4);
 8003250:	797b      	ldrb	r3, [r7, #5]
 8003252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003256:	717b      	strb	r3, [r7, #5]
	LPS25HB_write_byte(reg_setup, LPS25HB_CONTROL_REG1, lps25hb_address);
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <LPS25HB_Init+0xc4>)
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	797b      	ldrb	r3, [r7, #5]
 800325e:	2120      	movs	r1, #32
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff4b 	bl	80030fc <LPS25HB_write_byte>

	reg_setup = LPS25HB_read_byte(LPS25HB_CONTROL_REG1);
 8003266:	2020      	movs	r0, #32
 8003268:	f7ff ff2e 	bl	80030c8 <LPS25HB_read_byte>
 800326c:	4603      	mov	r3, r0
 800326e:	717b      	strb	r3, [r7, #5]

	return status;
 8003270:	79fb      	ldrb	r3, [r7, #7]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000005 	.word	0x20000005

08003280 <__cvt>:
 8003280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003284:	ec55 4b10 	vmov	r4, r5, d0
 8003288:	2d00      	cmp	r5, #0
 800328a:	460e      	mov	r6, r1
 800328c:	4619      	mov	r1, r3
 800328e:	462b      	mov	r3, r5
 8003290:	bfbb      	ittet	lt
 8003292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003296:	461d      	movlt	r5, r3
 8003298:	2300      	movge	r3, #0
 800329a:	232d      	movlt	r3, #45	; 0x2d
 800329c:	700b      	strb	r3, [r1, #0]
 800329e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80032a4:	4691      	mov	r9, r2
 80032a6:	f023 0820 	bic.w	r8, r3, #32
 80032aa:	bfbc      	itt	lt
 80032ac:	4622      	movlt	r2, r4
 80032ae:	4614      	movlt	r4, r2
 80032b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032b4:	d005      	beq.n	80032c2 <__cvt+0x42>
 80032b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032ba:	d100      	bne.n	80032be <__cvt+0x3e>
 80032bc:	3601      	adds	r6, #1
 80032be:	2102      	movs	r1, #2
 80032c0:	e000      	b.n	80032c4 <__cvt+0x44>
 80032c2:	2103      	movs	r1, #3
 80032c4:	ab03      	add	r3, sp, #12
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	ab02      	add	r3, sp, #8
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	ec45 4b10 	vmov	d0, r4, r5
 80032d0:	4653      	mov	r3, sl
 80032d2:	4632      	mov	r2, r6
 80032d4:	f000 fe68 	bl	8003fa8 <_dtoa_r>
 80032d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032dc:	4607      	mov	r7, r0
 80032de:	d102      	bne.n	80032e6 <__cvt+0x66>
 80032e0:	f019 0f01 	tst.w	r9, #1
 80032e4:	d022      	beq.n	800332c <__cvt+0xac>
 80032e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032ea:	eb07 0906 	add.w	r9, r7, r6
 80032ee:	d110      	bne.n	8003312 <__cvt+0x92>
 80032f0:	783b      	ldrb	r3, [r7, #0]
 80032f2:	2b30      	cmp	r3, #48	; 0x30
 80032f4:	d10a      	bne.n	800330c <__cvt+0x8c>
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	4620      	mov	r0, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	f7fd fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003302:	b918      	cbnz	r0, 800330c <__cvt+0x8c>
 8003304:	f1c6 0601 	rsb	r6, r6, #1
 8003308:	f8ca 6000 	str.w	r6, [sl]
 800330c:	f8da 3000 	ldr.w	r3, [sl]
 8003310:	4499      	add	r9, r3
 8003312:	2200      	movs	r2, #0
 8003314:	2300      	movs	r3, #0
 8003316:	4620      	mov	r0, r4
 8003318:	4629      	mov	r1, r5
 800331a:	f7fd fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800331e:	b108      	cbz	r0, 8003324 <__cvt+0xa4>
 8003320:	f8cd 900c 	str.w	r9, [sp, #12]
 8003324:	2230      	movs	r2, #48	; 0x30
 8003326:	9b03      	ldr	r3, [sp, #12]
 8003328:	454b      	cmp	r3, r9
 800332a:	d307      	bcc.n	800333c <__cvt+0xbc>
 800332c:	9b03      	ldr	r3, [sp, #12]
 800332e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003330:	1bdb      	subs	r3, r3, r7
 8003332:	4638      	mov	r0, r7
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	b004      	add	sp, #16
 8003338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	9103      	str	r1, [sp, #12]
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e7f0      	b.n	8003326 <__cvt+0xa6>

08003344 <__exponent>:
 8003344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003346:	4603      	mov	r3, r0
 8003348:	2900      	cmp	r1, #0
 800334a:	bfb8      	it	lt
 800334c:	4249      	neglt	r1, r1
 800334e:	f803 2b02 	strb.w	r2, [r3], #2
 8003352:	bfb4      	ite	lt
 8003354:	222d      	movlt	r2, #45	; 0x2d
 8003356:	222b      	movge	r2, #43	; 0x2b
 8003358:	2909      	cmp	r1, #9
 800335a:	7042      	strb	r2, [r0, #1]
 800335c:	dd2a      	ble.n	80033b4 <__exponent+0x70>
 800335e:	f10d 0207 	add.w	r2, sp, #7
 8003362:	4617      	mov	r7, r2
 8003364:	260a      	movs	r6, #10
 8003366:	4694      	mov	ip, r2
 8003368:	fb91 f5f6 	sdiv	r5, r1, r6
 800336c:	fb06 1415 	mls	r4, r6, r5, r1
 8003370:	3430      	adds	r4, #48	; 0x30
 8003372:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003376:	460c      	mov	r4, r1
 8003378:	2c63      	cmp	r4, #99	; 0x63
 800337a:	f102 32ff 	add.w	r2, r2, #4294967295
 800337e:	4629      	mov	r1, r5
 8003380:	dcf1      	bgt.n	8003366 <__exponent+0x22>
 8003382:	3130      	adds	r1, #48	; 0x30
 8003384:	f1ac 0402 	sub.w	r4, ip, #2
 8003388:	f802 1c01 	strb.w	r1, [r2, #-1]
 800338c:	1c41      	adds	r1, r0, #1
 800338e:	4622      	mov	r2, r4
 8003390:	42ba      	cmp	r2, r7
 8003392:	d30a      	bcc.n	80033aa <__exponent+0x66>
 8003394:	f10d 0209 	add.w	r2, sp, #9
 8003398:	eba2 020c 	sub.w	r2, r2, ip
 800339c:	42bc      	cmp	r4, r7
 800339e:	bf88      	it	hi
 80033a0:	2200      	movhi	r2, #0
 80033a2:	4413      	add	r3, r2
 80033a4:	1a18      	subs	r0, r3, r0
 80033a6:	b003      	add	sp, #12
 80033a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80033ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80033b2:	e7ed      	b.n	8003390 <__exponent+0x4c>
 80033b4:	2330      	movs	r3, #48	; 0x30
 80033b6:	3130      	adds	r1, #48	; 0x30
 80033b8:	7083      	strb	r3, [r0, #2]
 80033ba:	70c1      	strb	r1, [r0, #3]
 80033bc:	1d03      	adds	r3, r0, #4
 80033be:	e7f1      	b.n	80033a4 <__exponent+0x60>

080033c0 <_printf_float>:
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	ed2d 8b02 	vpush	{d8}
 80033c8:	b08d      	sub	sp, #52	; 0x34
 80033ca:	460c      	mov	r4, r1
 80033cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80033d0:	4616      	mov	r6, r2
 80033d2:	461f      	mov	r7, r3
 80033d4:	4605      	mov	r5, r0
 80033d6:	f000 fce7 	bl	8003da8 <_localeconv_r>
 80033da:	f8d0 a000 	ldr.w	sl, [r0]
 80033de:	4650      	mov	r0, sl
 80033e0:	f7fc ff46 	bl	8000270 <strlen>
 80033e4:	2300      	movs	r3, #0
 80033e6:	930a      	str	r3, [sp, #40]	; 0x28
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	9305      	str	r3, [sp, #20]
 80033ec:	f8d8 3000 	ldr.w	r3, [r8]
 80033f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80033f4:	3307      	adds	r3, #7
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	f103 0208 	add.w	r2, r3, #8
 80033fe:	f8c8 2000 	str.w	r2, [r8]
 8003402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800340a:	9307      	str	r3, [sp, #28]
 800340c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003410:	ee08 0a10 	vmov	s16, r0
 8003414:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800341c:	4b9e      	ldr	r3, [pc, #632]	; (8003698 <_printf_float+0x2d8>)
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	f7fd fb83 	bl	8000b2c <__aeabi_dcmpun>
 8003426:	bb88      	cbnz	r0, 800348c <_printf_float+0xcc>
 8003428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800342c:	4b9a      	ldr	r3, [pc, #616]	; (8003698 <_printf_float+0x2d8>)
 800342e:	f04f 32ff 	mov.w	r2, #4294967295
 8003432:	f7fd fb5d 	bl	8000af0 <__aeabi_dcmple>
 8003436:	bb48      	cbnz	r0, 800348c <_printf_float+0xcc>
 8003438:	2200      	movs	r2, #0
 800343a:	2300      	movs	r3, #0
 800343c:	4640      	mov	r0, r8
 800343e:	4649      	mov	r1, r9
 8003440:	f7fd fb4c 	bl	8000adc <__aeabi_dcmplt>
 8003444:	b110      	cbz	r0, 800344c <_printf_float+0x8c>
 8003446:	232d      	movs	r3, #45	; 0x2d
 8003448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800344c:	4a93      	ldr	r2, [pc, #588]	; (800369c <_printf_float+0x2dc>)
 800344e:	4b94      	ldr	r3, [pc, #592]	; (80036a0 <_printf_float+0x2e0>)
 8003450:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003454:	bf94      	ite	ls
 8003456:	4690      	movls	r8, r2
 8003458:	4698      	movhi	r8, r3
 800345a:	2303      	movs	r3, #3
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	9b05      	ldr	r3, [sp, #20]
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	f04f 0900 	mov.w	r9, #0
 800346a:	9700      	str	r7, [sp, #0]
 800346c:	4633      	mov	r3, r6
 800346e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003470:	4621      	mov	r1, r4
 8003472:	4628      	mov	r0, r5
 8003474:	f000 f9da 	bl	800382c <_printf_common>
 8003478:	3001      	adds	r0, #1
 800347a:	f040 8090 	bne.w	800359e <_printf_float+0x1de>
 800347e:	f04f 30ff 	mov.w	r0, #4294967295
 8003482:	b00d      	add	sp, #52	; 0x34
 8003484:	ecbd 8b02 	vpop	{d8}
 8003488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	4640      	mov	r0, r8
 8003492:	4649      	mov	r1, r9
 8003494:	f7fd fb4a 	bl	8000b2c <__aeabi_dcmpun>
 8003498:	b140      	cbz	r0, 80034ac <_printf_float+0xec>
 800349a:	464b      	mov	r3, r9
 800349c:	2b00      	cmp	r3, #0
 800349e:	bfbc      	itt	lt
 80034a0:	232d      	movlt	r3, #45	; 0x2d
 80034a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034a6:	4a7f      	ldr	r2, [pc, #508]	; (80036a4 <_printf_float+0x2e4>)
 80034a8:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <_printf_float+0x2e8>)
 80034aa:	e7d1      	b.n	8003450 <_printf_float+0x90>
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034b2:	9206      	str	r2, [sp, #24]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	d13f      	bne.n	8003538 <_printf_float+0x178>
 80034b8:	2306      	movs	r3, #6
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	9b05      	ldr	r3, [sp, #20]
 80034be:	6861      	ldr	r1, [r4, #4]
 80034c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034c4:	2300      	movs	r3, #0
 80034c6:	9303      	str	r3, [sp, #12]
 80034c8:	ab0a      	add	r3, sp, #40	; 0x28
 80034ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80034ce:	ab09      	add	r3, sp, #36	; 0x24
 80034d0:	ec49 8b10 	vmov	d0, r8, r9
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	6022      	str	r2, [r4, #0]
 80034d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80034dc:	4628      	mov	r0, r5
 80034de:	f7ff fecf 	bl	8003280 <__cvt>
 80034e2:	9b06      	ldr	r3, [sp, #24]
 80034e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034e6:	2b47      	cmp	r3, #71	; 0x47
 80034e8:	4680      	mov	r8, r0
 80034ea:	d108      	bne.n	80034fe <_printf_float+0x13e>
 80034ec:	1cc8      	adds	r0, r1, #3
 80034ee:	db02      	blt.n	80034f6 <_printf_float+0x136>
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	4299      	cmp	r1, r3
 80034f4:	dd41      	ble.n	800357a <_printf_float+0x1ba>
 80034f6:	f1ab 0302 	sub.w	r3, fp, #2
 80034fa:	fa5f fb83 	uxtb.w	fp, r3
 80034fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003502:	d820      	bhi.n	8003546 <_printf_float+0x186>
 8003504:	3901      	subs	r1, #1
 8003506:	465a      	mov	r2, fp
 8003508:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800350c:	9109      	str	r1, [sp, #36]	; 0x24
 800350e:	f7ff ff19 	bl	8003344 <__exponent>
 8003512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003514:	1813      	adds	r3, r2, r0
 8003516:	2a01      	cmp	r2, #1
 8003518:	4681      	mov	r9, r0
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	dc02      	bgt.n	8003524 <_printf_float+0x164>
 800351e:	6822      	ldr	r2, [r4, #0]
 8003520:	07d2      	lsls	r2, r2, #31
 8003522:	d501      	bpl.n	8003528 <_printf_float+0x168>
 8003524:	3301      	adds	r3, #1
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800352c:	2b00      	cmp	r3, #0
 800352e:	d09c      	beq.n	800346a <_printf_float+0xaa>
 8003530:	232d      	movs	r3, #45	; 0x2d
 8003532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003536:	e798      	b.n	800346a <_printf_float+0xaa>
 8003538:	9a06      	ldr	r2, [sp, #24]
 800353a:	2a47      	cmp	r2, #71	; 0x47
 800353c:	d1be      	bne.n	80034bc <_printf_float+0xfc>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1bc      	bne.n	80034bc <_printf_float+0xfc>
 8003542:	2301      	movs	r3, #1
 8003544:	e7b9      	b.n	80034ba <_printf_float+0xfa>
 8003546:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800354a:	d118      	bne.n	800357e <_printf_float+0x1be>
 800354c:	2900      	cmp	r1, #0
 800354e:	6863      	ldr	r3, [r4, #4]
 8003550:	dd0b      	ble.n	800356a <_printf_float+0x1aa>
 8003552:	6121      	str	r1, [r4, #16]
 8003554:	b913      	cbnz	r3, 800355c <_printf_float+0x19c>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	07d0      	lsls	r0, r2, #31
 800355a:	d502      	bpl.n	8003562 <_printf_float+0x1a2>
 800355c:	3301      	adds	r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	6123      	str	r3, [r4, #16]
 8003562:	65a1      	str	r1, [r4, #88]	; 0x58
 8003564:	f04f 0900 	mov.w	r9, #0
 8003568:	e7de      	b.n	8003528 <_printf_float+0x168>
 800356a:	b913      	cbnz	r3, 8003572 <_printf_float+0x1b2>
 800356c:	6822      	ldr	r2, [r4, #0]
 800356e:	07d2      	lsls	r2, r2, #31
 8003570:	d501      	bpl.n	8003576 <_printf_float+0x1b6>
 8003572:	3302      	adds	r3, #2
 8003574:	e7f4      	b.n	8003560 <_printf_float+0x1a0>
 8003576:	2301      	movs	r3, #1
 8003578:	e7f2      	b.n	8003560 <_printf_float+0x1a0>
 800357a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800357e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003580:	4299      	cmp	r1, r3
 8003582:	db05      	blt.n	8003590 <_printf_float+0x1d0>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	6121      	str	r1, [r4, #16]
 8003588:	07d8      	lsls	r0, r3, #31
 800358a:	d5ea      	bpl.n	8003562 <_printf_float+0x1a2>
 800358c:	1c4b      	adds	r3, r1, #1
 800358e:	e7e7      	b.n	8003560 <_printf_float+0x1a0>
 8003590:	2900      	cmp	r1, #0
 8003592:	bfd4      	ite	le
 8003594:	f1c1 0202 	rsble	r2, r1, #2
 8003598:	2201      	movgt	r2, #1
 800359a:	4413      	add	r3, r2
 800359c:	e7e0      	b.n	8003560 <_printf_float+0x1a0>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	055a      	lsls	r2, r3, #21
 80035a2:	d407      	bmi.n	80035b4 <_printf_float+0x1f4>
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	4642      	mov	r2, r8
 80035a8:	4631      	mov	r1, r6
 80035aa:	4628      	mov	r0, r5
 80035ac:	47b8      	blx	r7
 80035ae:	3001      	adds	r0, #1
 80035b0:	d12c      	bne.n	800360c <_printf_float+0x24c>
 80035b2:	e764      	b.n	800347e <_printf_float+0xbe>
 80035b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035b8:	f240 80e0 	bls.w	800377c <_printf_float+0x3bc>
 80035bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035c0:	2200      	movs	r2, #0
 80035c2:	2300      	movs	r3, #0
 80035c4:	f7fd fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d034      	beq.n	8003636 <_printf_float+0x276>
 80035cc:	4a37      	ldr	r2, [pc, #220]	; (80036ac <_printf_float+0x2ec>)
 80035ce:	2301      	movs	r3, #1
 80035d0:	4631      	mov	r1, r6
 80035d2:	4628      	mov	r0, r5
 80035d4:	47b8      	blx	r7
 80035d6:	3001      	adds	r0, #1
 80035d8:	f43f af51 	beq.w	800347e <_printf_float+0xbe>
 80035dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035e0:	429a      	cmp	r2, r3
 80035e2:	db02      	blt.n	80035ea <_printf_float+0x22a>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	07d8      	lsls	r0, r3, #31
 80035e8:	d510      	bpl.n	800360c <_printf_float+0x24c>
 80035ea:	ee18 3a10 	vmov	r3, s16
 80035ee:	4652      	mov	r2, sl
 80035f0:	4631      	mov	r1, r6
 80035f2:	4628      	mov	r0, r5
 80035f4:	47b8      	blx	r7
 80035f6:	3001      	adds	r0, #1
 80035f8:	f43f af41 	beq.w	800347e <_printf_float+0xbe>
 80035fc:	f04f 0800 	mov.w	r8, #0
 8003600:	f104 091a 	add.w	r9, r4, #26
 8003604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003606:	3b01      	subs	r3, #1
 8003608:	4543      	cmp	r3, r8
 800360a:	dc09      	bgt.n	8003620 <_printf_float+0x260>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	079b      	lsls	r3, r3, #30
 8003610:	f100 8107 	bmi.w	8003822 <_printf_float+0x462>
 8003614:	68e0      	ldr	r0, [r4, #12]
 8003616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003618:	4298      	cmp	r0, r3
 800361a:	bfb8      	it	lt
 800361c:	4618      	movlt	r0, r3
 800361e:	e730      	b.n	8003482 <_printf_float+0xc2>
 8003620:	2301      	movs	r3, #1
 8003622:	464a      	mov	r2, r9
 8003624:	4631      	mov	r1, r6
 8003626:	4628      	mov	r0, r5
 8003628:	47b8      	blx	r7
 800362a:	3001      	adds	r0, #1
 800362c:	f43f af27 	beq.w	800347e <_printf_float+0xbe>
 8003630:	f108 0801 	add.w	r8, r8, #1
 8003634:	e7e6      	b.n	8003604 <_printf_float+0x244>
 8003636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	dc39      	bgt.n	80036b0 <_printf_float+0x2f0>
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <_printf_float+0x2ec>)
 800363e:	2301      	movs	r3, #1
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	f43f af19 	beq.w	800347e <_printf_float+0xbe>
 800364c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003650:	4313      	orrs	r3, r2
 8003652:	d102      	bne.n	800365a <_printf_float+0x29a>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07d9      	lsls	r1, r3, #31
 8003658:	d5d8      	bpl.n	800360c <_printf_float+0x24c>
 800365a:	ee18 3a10 	vmov	r3, s16
 800365e:	4652      	mov	r2, sl
 8003660:	4631      	mov	r1, r6
 8003662:	4628      	mov	r0, r5
 8003664:	47b8      	blx	r7
 8003666:	3001      	adds	r0, #1
 8003668:	f43f af09 	beq.w	800347e <_printf_float+0xbe>
 800366c:	f04f 0900 	mov.w	r9, #0
 8003670:	f104 0a1a 	add.w	sl, r4, #26
 8003674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003676:	425b      	negs	r3, r3
 8003678:	454b      	cmp	r3, r9
 800367a:	dc01      	bgt.n	8003680 <_printf_float+0x2c0>
 800367c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800367e:	e792      	b.n	80035a6 <_printf_float+0x1e6>
 8003680:	2301      	movs	r3, #1
 8003682:	4652      	mov	r2, sl
 8003684:	4631      	mov	r1, r6
 8003686:	4628      	mov	r0, r5
 8003688:	47b8      	blx	r7
 800368a:	3001      	adds	r0, #1
 800368c:	f43f aef7 	beq.w	800347e <_printf_float+0xbe>
 8003690:	f109 0901 	add.w	r9, r9, #1
 8003694:	e7ee      	b.n	8003674 <_printf_float+0x2b4>
 8003696:	bf00      	nop
 8003698:	7fefffff 	.word	0x7fefffff
 800369c:	08005fd7 	.word	0x08005fd7
 80036a0:	08005fdb 	.word	0x08005fdb
 80036a4:	08005fdf 	.word	0x08005fdf
 80036a8:	08005fe3 	.word	0x08005fe3
 80036ac:	08005fe7 	.word	0x08005fe7
 80036b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036b4:	429a      	cmp	r2, r3
 80036b6:	bfa8      	it	ge
 80036b8:	461a      	movge	r2, r3
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	4691      	mov	r9, r2
 80036be:	dc37      	bgt.n	8003730 <_printf_float+0x370>
 80036c0:	f04f 0b00 	mov.w	fp, #0
 80036c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c8:	f104 021a 	add.w	r2, r4, #26
 80036cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036ce:	9305      	str	r3, [sp, #20]
 80036d0:	eba3 0309 	sub.w	r3, r3, r9
 80036d4:	455b      	cmp	r3, fp
 80036d6:	dc33      	bgt.n	8003740 <_printf_float+0x380>
 80036d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036dc:	429a      	cmp	r2, r3
 80036de:	db3b      	blt.n	8003758 <_printf_float+0x398>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	07da      	lsls	r2, r3, #31
 80036e4:	d438      	bmi.n	8003758 <_printf_float+0x398>
 80036e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80036ea:	eba2 0903 	sub.w	r9, r2, r3
 80036ee:	9b05      	ldr	r3, [sp, #20]
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	4591      	cmp	r9, r2
 80036f4:	bfa8      	it	ge
 80036f6:	4691      	movge	r9, r2
 80036f8:	f1b9 0f00 	cmp.w	r9, #0
 80036fc:	dc35      	bgt.n	800376a <_printf_float+0x3aa>
 80036fe:	f04f 0800 	mov.w	r8, #0
 8003702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003706:	f104 0a1a 	add.w	sl, r4, #26
 800370a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	eba3 0309 	sub.w	r3, r3, r9
 8003714:	4543      	cmp	r3, r8
 8003716:	f77f af79 	ble.w	800360c <_printf_float+0x24c>
 800371a:	2301      	movs	r3, #1
 800371c:	4652      	mov	r2, sl
 800371e:	4631      	mov	r1, r6
 8003720:	4628      	mov	r0, r5
 8003722:	47b8      	blx	r7
 8003724:	3001      	adds	r0, #1
 8003726:	f43f aeaa 	beq.w	800347e <_printf_float+0xbe>
 800372a:	f108 0801 	add.w	r8, r8, #1
 800372e:	e7ec      	b.n	800370a <_printf_float+0x34a>
 8003730:	4613      	mov	r3, r2
 8003732:	4631      	mov	r1, r6
 8003734:	4642      	mov	r2, r8
 8003736:	4628      	mov	r0, r5
 8003738:	47b8      	blx	r7
 800373a:	3001      	adds	r0, #1
 800373c:	d1c0      	bne.n	80036c0 <_printf_float+0x300>
 800373e:	e69e      	b.n	800347e <_printf_float+0xbe>
 8003740:	2301      	movs	r3, #1
 8003742:	4631      	mov	r1, r6
 8003744:	4628      	mov	r0, r5
 8003746:	9205      	str	r2, [sp, #20]
 8003748:	47b8      	blx	r7
 800374a:	3001      	adds	r0, #1
 800374c:	f43f ae97 	beq.w	800347e <_printf_float+0xbe>
 8003750:	9a05      	ldr	r2, [sp, #20]
 8003752:	f10b 0b01 	add.w	fp, fp, #1
 8003756:	e7b9      	b.n	80036cc <_printf_float+0x30c>
 8003758:	ee18 3a10 	vmov	r3, s16
 800375c:	4652      	mov	r2, sl
 800375e:	4631      	mov	r1, r6
 8003760:	4628      	mov	r0, r5
 8003762:	47b8      	blx	r7
 8003764:	3001      	adds	r0, #1
 8003766:	d1be      	bne.n	80036e6 <_printf_float+0x326>
 8003768:	e689      	b.n	800347e <_printf_float+0xbe>
 800376a:	9a05      	ldr	r2, [sp, #20]
 800376c:	464b      	mov	r3, r9
 800376e:	4442      	add	r2, r8
 8003770:	4631      	mov	r1, r6
 8003772:	4628      	mov	r0, r5
 8003774:	47b8      	blx	r7
 8003776:	3001      	adds	r0, #1
 8003778:	d1c1      	bne.n	80036fe <_printf_float+0x33e>
 800377a:	e680      	b.n	800347e <_printf_float+0xbe>
 800377c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800377e:	2a01      	cmp	r2, #1
 8003780:	dc01      	bgt.n	8003786 <_printf_float+0x3c6>
 8003782:	07db      	lsls	r3, r3, #31
 8003784:	d53a      	bpl.n	80037fc <_printf_float+0x43c>
 8003786:	2301      	movs	r3, #1
 8003788:	4642      	mov	r2, r8
 800378a:	4631      	mov	r1, r6
 800378c:	4628      	mov	r0, r5
 800378e:	47b8      	blx	r7
 8003790:	3001      	adds	r0, #1
 8003792:	f43f ae74 	beq.w	800347e <_printf_float+0xbe>
 8003796:	ee18 3a10 	vmov	r3, s16
 800379a:	4652      	mov	r2, sl
 800379c:	4631      	mov	r1, r6
 800379e:	4628      	mov	r0, r5
 80037a0:	47b8      	blx	r7
 80037a2:	3001      	adds	r0, #1
 80037a4:	f43f ae6b 	beq.w	800347e <_printf_float+0xbe>
 80037a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037ac:	2200      	movs	r2, #0
 80037ae:	2300      	movs	r3, #0
 80037b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80037b4:	f7fd f988 	bl	8000ac8 <__aeabi_dcmpeq>
 80037b8:	b9d8      	cbnz	r0, 80037f2 <_printf_float+0x432>
 80037ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80037be:	f108 0201 	add.w	r2, r8, #1
 80037c2:	4631      	mov	r1, r6
 80037c4:	4628      	mov	r0, r5
 80037c6:	47b8      	blx	r7
 80037c8:	3001      	adds	r0, #1
 80037ca:	d10e      	bne.n	80037ea <_printf_float+0x42a>
 80037cc:	e657      	b.n	800347e <_printf_float+0xbe>
 80037ce:	2301      	movs	r3, #1
 80037d0:	4652      	mov	r2, sl
 80037d2:	4631      	mov	r1, r6
 80037d4:	4628      	mov	r0, r5
 80037d6:	47b8      	blx	r7
 80037d8:	3001      	adds	r0, #1
 80037da:	f43f ae50 	beq.w	800347e <_printf_float+0xbe>
 80037de:	f108 0801 	add.w	r8, r8, #1
 80037e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	4543      	cmp	r3, r8
 80037e8:	dcf1      	bgt.n	80037ce <_printf_float+0x40e>
 80037ea:	464b      	mov	r3, r9
 80037ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037f0:	e6da      	b.n	80035a8 <_printf_float+0x1e8>
 80037f2:	f04f 0800 	mov.w	r8, #0
 80037f6:	f104 0a1a 	add.w	sl, r4, #26
 80037fa:	e7f2      	b.n	80037e2 <_printf_float+0x422>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4642      	mov	r2, r8
 8003800:	e7df      	b.n	80037c2 <_printf_float+0x402>
 8003802:	2301      	movs	r3, #1
 8003804:	464a      	mov	r2, r9
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	f43f ae36 	beq.w	800347e <_printf_float+0xbe>
 8003812:	f108 0801 	add.w	r8, r8, #1
 8003816:	68e3      	ldr	r3, [r4, #12]
 8003818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800381a:	1a5b      	subs	r3, r3, r1
 800381c:	4543      	cmp	r3, r8
 800381e:	dcf0      	bgt.n	8003802 <_printf_float+0x442>
 8003820:	e6f8      	b.n	8003614 <_printf_float+0x254>
 8003822:	f04f 0800 	mov.w	r8, #0
 8003826:	f104 0919 	add.w	r9, r4, #25
 800382a:	e7f4      	b.n	8003816 <_printf_float+0x456>

0800382c <_printf_common>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4616      	mov	r6, r2
 8003832:	4699      	mov	r9, r3
 8003834:	688a      	ldr	r2, [r1, #8]
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800383c:	4293      	cmp	r3, r2
 800383e:	bfb8      	it	lt
 8003840:	4613      	movlt	r3, r2
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003848:	4607      	mov	r7, r0
 800384a:	460c      	mov	r4, r1
 800384c:	b10a      	cbz	r2, 8003852 <_printf_common+0x26>
 800384e:	3301      	adds	r3, #1
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	0699      	lsls	r1, r3, #26
 8003856:	bf42      	ittt	mi
 8003858:	6833      	ldrmi	r3, [r6, #0]
 800385a:	3302      	addmi	r3, #2
 800385c:	6033      	strmi	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	f015 0506 	ands.w	r5, r5, #6
 8003864:	d106      	bne.n	8003874 <_printf_common+0x48>
 8003866:	f104 0a19 	add.w	sl, r4, #25
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	42ab      	cmp	r3, r5
 8003872:	dc26      	bgt.n	80038c2 <_printf_common+0x96>
 8003874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003878:	1e13      	subs	r3, r2, #0
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	bf18      	it	ne
 800387e:	2301      	movne	r3, #1
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d42b      	bmi.n	80038dc <_printf_common+0xb0>
 8003884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d01e      	beq.n	80038d0 <_printf_common+0xa4>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	6922      	ldr	r2, [r4, #16]
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf02      	ittt	eq
 800389e:	68e5      	ldreq	r5, [r4, #12]
 80038a0:	6833      	ldreq	r3, [r6, #0]
 80038a2:	1aed      	subeq	r5, r5, r3
 80038a4:	68a3      	ldr	r3, [r4, #8]
 80038a6:	bf0c      	ite	eq
 80038a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ac:	2500      	movne	r5, #0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	bfc4      	itt	gt
 80038b2:	1a9b      	subgt	r3, r3, r2
 80038b4:	18ed      	addgt	r5, r5, r3
 80038b6:	2600      	movs	r6, #0
 80038b8:	341a      	adds	r4, #26
 80038ba:	42b5      	cmp	r5, r6
 80038bc:	d11a      	bne.n	80038f4 <_printf_common+0xc8>
 80038be:	2000      	movs	r0, #0
 80038c0:	e008      	b.n	80038d4 <_printf_common+0xa8>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4652      	mov	r2, sl
 80038c6:	4649      	mov	r1, r9
 80038c8:	4638      	mov	r0, r7
 80038ca:	47c0      	blx	r8
 80038cc:	3001      	adds	r0, #1
 80038ce:	d103      	bne.n	80038d8 <_printf_common+0xac>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	3501      	adds	r5, #1
 80038da:	e7c6      	b.n	800386a <_printf_common+0x3e>
 80038dc:	18e1      	adds	r1, r4, r3
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	2030      	movs	r0, #48	; 0x30
 80038e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038e6:	4422      	add	r2, r4
 80038e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f0:	3302      	adds	r3, #2
 80038f2:	e7c7      	b.n	8003884 <_printf_common+0x58>
 80038f4:	2301      	movs	r3, #1
 80038f6:	4622      	mov	r2, r4
 80038f8:	4649      	mov	r1, r9
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d0e6      	beq.n	80038d0 <_printf_common+0xa4>
 8003902:	3601      	adds	r6, #1
 8003904:	e7d9      	b.n	80038ba <_printf_common+0x8e>
	...

08003908 <_printf_i>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	7e0f      	ldrb	r7, [r1, #24]
 800390e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003910:	2f78      	cmp	r7, #120	; 0x78
 8003912:	4691      	mov	r9, r2
 8003914:	4680      	mov	r8, r0
 8003916:	460c      	mov	r4, r1
 8003918:	469a      	mov	sl, r3
 800391a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800391e:	d807      	bhi.n	8003930 <_printf_i+0x28>
 8003920:	2f62      	cmp	r7, #98	; 0x62
 8003922:	d80a      	bhi.n	800393a <_printf_i+0x32>
 8003924:	2f00      	cmp	r7, #0
 8003926:	f000 80d4 	beq.w	8003ad2 <_printf_i+0x1ca>
 800392a:	2f58      	cmp	r7, #88	; 0x58
 800392c:	f000 80c0 	beq.w	8003ab0 <_printf_i+0x1a8>
 8003930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003938:	e03a      	b.n	80039b0 <_printf_i+0xa8>
 800393a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800393e:	2b15      	cmp	r3, #21
 8003940:	d8f6      	bhi.n	8003930 <_printf_i+0x28>
 8003942:	a101      	add	r1, pc, #4	; (adr r1, 8003948 <_printf_i+0x40>)
 8003944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039b5 	.word	0x080039b5
 8003950:	08003931 	.word	0x08003931
 8003954:	08003931 	.word	0x08003931
 8003958:	08003931 	.word	0x08003931
 800395c:	08003931 	.word	0x08003931
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003931 	.word	0x08003931
 8003968:	08003931 	.word	0x08003931
 800396c:	08003931 	.word	0x08003931
 8003970:	08003931 	.word	0x08003931
 8003974:	08003ab9 	.word	0x08003ab9
 8003978:	080039e1 	.word	0x080039e1
 800397c:	08003a73 	.word	0x08003a73
 8003980:	08003931 	.word	0x08003931
 8003984:	08003931 	.word	0x08003931
 8003988:	08003adb 	.word	0x08003adb
 800398c:	08003931 	.word	0x08003931
 8003990:	080039e1 	.word	0x080039e1
 8003994:	08003931 	.word	0x08003931
 8003998:	08003931 	.word	0x08003931
 800399c:	08003a7b 	.word	0x08003a7b
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	602a      	str	r2, [r5, #0]
 80039a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b0:	2301      	movs	r3, #1
 80039b2:	e09f      	b.n	8003af4 <_printf_i+0x1ec>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	0607      	lsls	r7, r0, #24
 80039ba:	f103 0104 	add.w	r1, r3, #4
 80039be:	6029      	str	r1, [r5, #0]
 80039c0:	d501      	bpl.n	80039c6 <_printf_i+0xbe>
 80039c2:	681e      	ldr	r6, [r3, #0]
 80039c4:	e003      	b.n	80039ce <_printf_i+0xc6>
 80039c6:	0646      	lsls	r6, r0, #25
 80039c8:	d5fb      	bpl.n	80039c2 <_printf_i+0xba>
 80039ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	da03      	bge.n	80039da <_printf_i+0xd2>
 80039d2:	232d      	movs	r3, #45	; 0x2d
 80039d4:	4276      	negs	r6, r6
 80039d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039da:	485a      	ldr	r0, [pc, #360]	; (8003b44 <_printf_i+0x23c>)
 80039dc:	230a      	movs	r3, #10
 80039de:	e012      	b.n	8003a06 <_printf_i+0xfe>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	6820      	ldr	r0, [r4, #0]
 80039e4:	1d19      	adds	r1, r3, #4
 80039e6:	6029      	str	r1, [r5, #0]
 80039e8:	0605      	lsls	r5, r0, #24
 80039ea:	d501      	bpl.n	80039f0 <_printf_i+0xe8>
 80039ec:	681e      	ldr	r6, [r3, #0]
 80039ee:	e002      	b.n	80039f6 <_printf_i+0xee>
 80039f0:	0641      	lsls	r1, r0, #25
 80039f2:	d5fb      	bpl.n	80039ec <_printf_i+0xe4>
 80039f4:	881e      	ldrh	r6, [r3, #0]
 80039f6:	4853      	ldr	r0, [pc, #332]	; (8003b44 <_printf_i+0x23c>)
 80039f8:	2f6f      	cmp	r7, #111	; 0x6f
 80039fa:	bf0c      	ite	eq
 80039fc:	2308      	moveq	r3, #8
 80039fe:	230a      	movne	r3, #10
 8003a00:	2100      	movs	r1, #0
 8003a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a06:	6865      	ldr	r5, [r4, #4]
 8003a08:	60a5      	str	r5, [r4, #8]
 8003a0a:	2d00      	cmp	r5, #0
 8003a0c:	bfa2      	ittt	ge
 8003a0e:	6821      	ldrge	r1, [r4, #0]
 8003a10:	f021 0104 	bicge.w	r1, r1, #4
 8003a14:	6021      	strge	r1, [r4, #0]
 8003a16:	b90e      	cbnz	r6, 8003a1c <_printf_i+0x114>
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	d04b      	beq.n	8003ab4 <_printf_i+0x1ac>
 8003a1c:	4615      	mov	r5, r2
 8003a1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a22:	fb03 6711 	mls	r7, r3, r1, r6
 8003a26:	5dc7      	ldrb	r7, [r0, r7]
 8003a28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a2c:	4637      	mov	r7, r6
 8003a2e:	42bb      	cmp	r3, r7
 8003a30:	460e      	mov	r6, r1
 8003a32:	d9f4      	bls.n	8003a1e <_printf_i+0x116>
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d10b      	bne.n	8003a50 <_printf_i+0x148>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	07de      	lsls	r6, r3, #31
 8003a3c:	d508      	bpl.n	8003a50 <_printf_i+0x148>
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	6861      	ldr	r1, [r4, #4]
 8003a42:	4299      	cmp	r1, r3
 8003a44:	bfde      	ittt	le
 8003a46:	2330      	movle	r3, #48	; 0x30
 8003a48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a50:	1b52      	subs	r2, r2, r5
 8003a52:	6122      	str	r2, [r4, #16]
 8003a54:	f8cd a000 	str.w	sl, [sp]
 8003a58:	464b      	mov	r3, r9
 8003a5a:	aa03      	add	r2, sp, #12
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f7ff fee4 	bl	800382c <_printf_common>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d14a      	bne.n	8003afe <_printf_i+0x1f6>
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	b004      	add	sp, #16
 8003a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	4833      	ldr	r0, [pc, #204]	; (8003b48 <_printf_i+0x240>)
 8003a7c:	2778      	movs	r7, #120	; 0x78
 8003a7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	6829      	ldr	r1, [r5, #0]
 8003a86:	061f      	lsls	r7, r3, #24
 8003a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a8c:	d402      	bmi.n	8003a94 <_printf_i+0x18c>
 8003a8e:	065f      	lsls	r7, r3, #25
 8003a90:	bf48      	it	mi
 8003a92:	b2b6      	uxthmi	r6, r6
 8003a94:	07df      	lsls	r7, r3, #31
 8003a96:	bf48      	it	mi
 8003a98:	f043 0320 	orrmi.w	r3, r3, #32
 8003a9c:	6029      	str	r1, [r5, #0]
 8003a9e:	bf48      	it	mi
 8003aa0:	6023      	strmi	r3, [r4, #0]
 8003aa2:	b91e      	cbnz	r6, 8003aac <_printf_i+0x1a4>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f023 0320 	bic.w	r3, r3, #32
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	2310      	movs	r3, #16
 8003aae:	e7a7      	b.n	8003a00 <_printf_i+0xf8>
 8003ab0:	4824      	ldr	r0, [pc, #144]	; (8003b44 <_printf_i+0x23c>)
 8003ab2:	e7e4      	b.n	8003a7e <_printf_i+0x176>
 8003ab4:	4615      	mov	r5, r2
 8003ab6:	e7bd      	b.n	8003a34 <_printf_i+0x12c>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	6826      	ldr	r6, [r4, #0]
 8003abc:	6961      	ldr	r1, [r4, #20]
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	6028      	str	r0, [r5, #0]
 8003ac2:	0635      	lsls	r5, r6, #24
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	d501      	bpl.n	8003acc <_printf_i+0x1c4>
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	e002      	b.n	8003ad2 <_printf_i+0x1ca>
 8003acc:	0670      	lsls	r0, r6, #25
 8003ace:	d5fb      	bpl.n	8003ac8 <_printf_i+0x1c0>
 8003ad0:	8019      	strh	r1, [r3, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6123      	str	r3, [r4, #16]
 8003ad6:	4615      	mov	r5, r2
 8003ad8:	e7bc      	b.n	8003a54 <_printf_i+0x14c>
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	1d1a      	adds	r2, r3, #4
 8003ade:	602a      	str	r2, [r5, #0]
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f7fc fb72 	bl	80001d0 <memchr>
 8003aec:	b108      	cbz	r0, 8003af2 <_printf_i+0x1ea>
 8003aee:	1b40      	subs	r0, r0, r5
 8003af0:	6060      	str	r0, [r4, #4]
 8003af2:	6863      	ldr	r3, [r4, #4]
 8003af4:	6123      	str	r3, [r4, #16]
 8003af6:	2300      	movs	r3, #0
 8003af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afc:	e7aa      	b.n	8003a54 <_printf_i+0x14c>
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	462a      	mov	r2, r5
 8003b02:	4649      	mov	r1, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	47d0      	blx	sl
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d0ad      	beq.n	8003a68 <_printf_i+0x160>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	079b      	lsls	r3, r3, #30
 8003b10:	d413      	bmi.n	8003b3a <_printf_i+0x232>
 8003b12:	68e0      	ldr	r0, [r4, #12]
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	4298      	cmp	r0, r3
 8003b18:	bfb8      	it	lt
 8003b1a:	4618      	movlt	r0, r3
 8003b1c:	e7a6      	b.n	8003a6c <_printf_i+0x164>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4632      	mov	r2, r6
 8003b22:	4649      	mov	r1, r9
 8003b24:	4640      	mov	r0, r8
 8003b26:	47d0      	blx	sl
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d09d      	beq.n	8003a68 <_printf_i+0x160>
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	9903      	ldr	r1, [sp, #12]
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	42ab      	cmp	r3, r5
 8003b36:	dcf2      	bgt.n	8003b1e <_printf_i+0x216>
 8003b38:	e7eb      	b.n	8003b12 <_printf_i+0x20a>
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	f104 0619 	add.w	r6, r4, #25
 8003b40:	e7f5      	b.n	8003b2e <_printf_i+0x226>
 8003b42:	bf00      	nop
 8003b44:	08005fe9 	.word	0x08005fe9
 8003b48:	08005ffa 	.word	0x08005ffa

08003b4c <std>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	4604      	mov	r4, r0
 8003b52:	e9c0 3300 	strd	r3, r3, [r0]
 8003b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b5a:	6083      	str	r3, [r0, #8]
 8003b5c:	8181      	strh	r1, [r0, #12]
 8003b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b60:	81c2      	strh	r2, [r0, #14]
 8003b62:	6183      	str	r3, [r0, #24]
 8003b64:	4619      	mov	r1, r3
 8003b66:	2208      	movs	r2, #8
 8003b68:	305c      	adds	r0, #92	; 0x5c
 8003b6a:	f000 f914 	bl	8003d96 <memset>
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <std+0x58>)
 8003b70:	6263      	str	r3, [r4, #36]	; 0x24
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <std+0x5c>)
 8003b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <std+0x60>)
 8003b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <std+0x64>)
 8003b7c:	6323      	str	r3, [r4, #48]	; 0x30
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <std+0x68>)
 8003b80:	6224      	str	r4, [r4, #32]
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d006      	beq.n	8003b94 <std+0x48>
 8003b86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003b8a:	4294      	cmp	r4, r2
 8003b8c:	d002      	beq.n	8003b94 <std+0x48>
 8003b8e:	33d0      	adds	r3, #208	; 0xd0
 8003b90:	429c      	cmp	r4, r3
 8003b92:	d105      	bne.n	8003ba0 <std+0x54>
 8003b94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b9c:	f000 b978 	b.w	8003e90 <__retarget_lock_init_recursive>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08003d11 	.word	0x08003d11
 8003ba8:	08003d33 	.word	0x08003d33
 8003bac:	08003d6b 	.word	0x08003d6b
 8003bb0:	08003d8f 	.word	0x08003d8f
 8003bb4:	200001fc 	.word	0x200001fc

08003bb8 <stdio_exit_handler>:
 8003bb8:	4a02      	ldr	r2, [pc, #8]	; (8003bc4 <stdio_exit_handler+0xc>)
 8003bba:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <stdio_exit_handler+0x10>)
 8003bbc:	4803      	ldr	r0, [pc, #12]	; (8003bcc <stdio_exit_handler+0x14>)
 8003bbe:	f000 b869 	b.w	8003c94 <_fwalk_sglue>
 8003bc2:	bf00      	nop
 8003bc4:	20000008 	.word	0x20000008
 8003bc8:	08005841 	.word	0x08005841
 8003bcc:	20000014 	.word	0x20000014

08003bd0 <cleanup_stdio>:
 8003bd0:	6841      	ldr	r1, [r0, #4]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <cleanup_stdio+0x34>)
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	d001      	beq.n	8003be0 <cleanup_stdio+0x10>
 8003bdc:	f001 fe30 	bl	8005840 <_fflush_r>
 8003be0:	68a1      	ldr	r1, [r4, #8]
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <cleanup_stdio+0x38>)
 8003be4:	4299      	cmp	r1, r3
 8003be6:	d002      	beq.n	8003bee <cleanup_stdio+0x1e>
 8003be8:	4620      	mov	r0, r4
 8003bea:	f001 fe29 	bl	8005840 <_fflush_r>
 8003bee:	68e1      	ldr	r1, [r4, #12]
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <cleanup_stdio+0x3c>)
 8003bf2:	4299      	cmp	r1, r3
 8003bf4:	d004      	beq.n	8003c00 <cleanup_stdio+0x30>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bfc:	f001 be20 	b.w	8005840 <_fflush_r>
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	bf00      	nop
 8003c04:	200001fc 	.word	0x200001fc
 8003c08:	20000264 	.word	0x20000264
 8003c0c:	200002cc 	.word	0x200002cc

08003c10 <global_stdio_init.part.0>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <global_stdio_init.part.0+0x30>)
 8003c14:	4c0b      	ldr	r4, [pc, #44]	; (8003c44 <global_stdio_init.part.0+0x34>)
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <global_stdio_init.part.0+0x38>)
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2104      	movs	r1, #4
 8003c20:	f7ff ff94 	bl	8003b4c <std>
 8003c24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2109      	movs	r1, #9
 8003c2c:	f7ff ff8e 	bl	8003b4c <std>
 8003c30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c34:	2202      	movs	r2, #2
 8003c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3a:	2112      	movs	r1, #18
 8003c3c:	f7ff bf86 	b.w	8003b4c <std>
 8003c40:	20000334 	.word	0x20000334
 8003c44:	200001fc 	.word	0x200001fc
 8003c48:	08003bb9 	.word	0x08003bb9

08003c4c <__sfp_lock_acquire>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__sfp_lock_acquire+0x8>)
 8003c4e:	f000 b920 	b.w	8003e92 <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	2000033d 	.word	0x2000033d

08003c58 <__sfp_lock_release>:
 8003c58:	4801      	ldr	r0, [pc, #4]	; (8003c60 <__sfp_lock_release+0x8>)
 8003c5a:	f000 b91b 	b.w	8003e94 <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	2000033d 	.word	0x2000033d

08003c64 <__sinit>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4604      	mov	r4, r0
 8003c68:	f7ff fff0 	bl	8003c4c <__sfp_lock_acquire>
 8003c6c:	6a23      	ldr	r3, [r4, #32]
 8003c6e:	b11b      	cbz	r3, 8003c78 <__sinit+0x14>
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f7ff bff0 	b.w	8003c58 <__sfp_lock_release>
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <__sinit+0x28>)
 8003c7a:	6223      	str	r3, [r4, #32]
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <__sinit+0x2c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f5      	bne.n	8003c70 <__sinit+0xc>
 8003c84:	f7ff ffc4 	bl	8003c10 <global_stdio_init.part.0>
 8003c88:	e7f2      	b.n	8003c70 <__sinit+0xc>
 8003c8a:	bf00      	nop
 8003c8c:	08003bd1 	.word	0x08003bd1
 8003c90:	20000334 	.word	0x20000334

08003c94 <_fwalk_sglue>:
 8003c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c98:	4607      	mov	r7, r0
 8003c9a:	4688      	mov	r8, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca8:	d505      	bpl.n	8003cb6 <_fwalk_sglue+0x22>
 8003caa:	6824      	ldr	r4, [r4, #0]
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d1f7      	bne.n	8003ca0 <_fwalk_sglue+0xc>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d907      	bls.n	8003ccc <_fwalk_sglue+0x38>
 8003cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d003      	beq.n	8003ccc <_fwalk_sglue+0x38>
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	47c0      	blx	r8
 8003cca:	4306      	orrs	r6, r0
 8003ccc:	3568      	adds	r5, #104	; 0x68
 8003cce:	e7e9      	b.n	8003ca4 <_fwalk_sglue+0x10>

08003cd0 <siprintf>:
 8003cd0:	b40e      	push	{r1, r2, r3}
 8003cd2:	b500      	push	{lr}
 8003cd4:	b09c      	sub	sp, #112	; 0x70
 8003cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003cd8:	9002      	str	r0, [sp, #8]
 8003cda:	9006      	str	r0, [sp, #24]
 8003cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ce0:	4809      	ldr	r0, [pc, #36]	; (8003d08 <siprintf+0x38>)
 8003ce2:	9107      	str	r1, [sp, #28]
 8003ce4:	9104      	str	r1, [sp, #16]
 8003ce6:	4909      	ldr	r1, [pc, #36]	; (8003d0c <siprintf+0x3c>)
 8003ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cec:	9105      	str	r1, [sp, #20]
 8003cee:	6800      	ldr	r0, [r0, #0]
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	a902      	add	r1, sp, #8
 8003cf4:	f001 fc20 	bl	8005538 <_svfiprintf_r>
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	b01c      	add	sp, #112	; 0x70
 8003d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d04:	b003      	add	sp, #12
 8003d06:	4770      	bx	lr
 8003d08:	20000060 	.word	0x20000060
 8003d0c:	ffff0208 	.word	0xffff0208

08003d10 <__sread>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	460c      	mov	r4, r1
 8003d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d18:	f000 f86c 	bl	8003df4 <_read_r>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	bfab      	itete	ge
 8003d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d22:	89a3      	ldrhlt	r3, [r4, #12]
 8003d24:	181b      	addge	r3, r3, r0
 8003d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d2a:	bfac      	ite	ge
 8003d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d2e:	81a3      	strhlt	r3, [r4, #12]
 8003d30:	bd10      	pop	{r4, pc}

08003d32 <__swrite>:
 8003d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d36:	461f      	mov	r7, r3
 8003d38:	898b      	ldrh	r3, [r1, #12]
 8003d3a:	05db      	lsls	r3, r3, #23
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4616      	mov	r6, r2
 8003d42:	d505      	bpl.n	8003d50 <__swrite+0x1e>
 8003d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d48:	2302      	movs	r3, #2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f000 f840 	bl	8003dd0 <_lseek_r>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d5a:	81a3      	strh	r3, [r4, #12]
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	463b      	mov	r3, r7
 8003d60:	4628      	mov	r0, r5
 8003d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d66:	f000 b857 	b.w	8003e18 <_write_r>

08003d6a <__sseek>:
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d72:	f000 f82d 	bl	8003dd0 <_lseek_r>
 8003d76:	1c43      	adds	r3, r0, #1
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	bf15      	itete	ne
 8003d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d86:	81a3      	strheq	r3, [r4, #12]
 8003d88:	bf18      	it	ne
 8003d8a:	81a3      	strhne	r3, [r4, #12]
 8003d8c:	bd10      	pop	{r4, pc}

08003d8e <__sclose>:
 8003d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d92:	f000 b80d 	b.w	8003db0 <_close_r>

08003d96 <memset>:
 8003d96:	4402      	add	r2, r0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d100      	bne.n	8003da0 <memset+0xa>
 8003d9e:	4770      	bx	lr
 8003da0:	f803 1b01 	strb.w	r1, [r3], #1
 8003da4:	e7f9      	b.n	8003d9a <memset+0x4>
	...

08003da8 <_localeconv_r>:
 8003da8:	4800      	ldr	r0, [pc, #0]	; (8003dac <_localeconv_r+0x4>)
 8003daa:	4770      	bx	lr
 8003dac:	20000154 	.word	0x20000154

08003db0 <_close_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d06      	ldr	r5, [pc, #24]	; (8003dcc <_close_r+0x1c>)
 8003db4:	2300      	movs	r3, #0
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	f7fd fe63 	bl	8001a86 <_close>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_close_r+0x1a>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_close_r+0x1a>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	20000338 	.word	0x20000338

08003dd0 <_lseek_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4d07      	ldr	r5, [pc, #28]	; (8003df0 <_lseek_r+0x20>)
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	4608      	mov	r0, r1
 8003dd8:	4611      	mov	r1, r2
 8003dda:	2200      	movs	r2, #0
 8003ddc:	602a      	str	r2, [r5, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f7fd fe78 	bl	8001ad4 <_lseek>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d102      	bne.n	8003dee <_lseek_r+0x1e>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	b103      	cbz	r3, 8003dee <_lseek_r+0x1e>
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	20000338 	.word	0x20000338

08003df4 <_read_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4d07      	ldr	r5, [pc, #28]	; (8003e14 <_read_r+0x20>)
 8003df8:	4604      	mov	r4, r0
 8003dfa:	4608      	mov	r0, r1
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	602a      	str	r2, [r5, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f7fd fe06 	bl	8001a14 <_read>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_read_r+0x1e>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_read_r+0x1e>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	20000338 	.word	0x20000338

08003e18 <_write_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4d07      	ldr	r5, [pc, #28]	; (8003e38 <_write_r+0x20>)
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	4608      	mov	r0, r1
 8003e20:	4611      	mov	r1, r2
 8003e22:	2200      	movs	r2, #0
 8003e24:	602a      	str	r2, [r5, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f7fd fe11 	bl	8001a4e <_write>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_write_r+0x1e>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_write_r+0x1e>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	20000338 	.word	0x20000338

08003e3c <__errno>:
 8003e3c:	4b01      	ldr	r3, [pc, #4]	; (8003e44 <__errno+0x8>)
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000060 	.word	0x20000060

08003e48 <__libc_init_array>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4d0d      	ldr	r5, [pc, #52]	; (8003e80 <__libc_init_array+0x38>)
 8003e4c:	4c0d      	ldr	r4, [pc, #52]	; (8003e84 <__libc_init_array+0x3c>)
 8003e4e:	1b64      	subs	r4, r4, r5
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	2600      	movs	r6, #0
 8003e54:	42a6      	cmp	r6, r4
 8003e56:	d109      	bne.n	8003e6c <__libc_init_array+0x24>
 8003e58:	4d0b      	ldr	r5, [pc, #44]	; (8003e88 <__libc_init_array+0x40>)
 8003e5a:	4c0c      	ldr	r4, [pc, #48]	; (8003e8c <__libc_init_array+0x44>)
 8003e5c:	f002 f894 	bl	8005f88 <_init>
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	2600      	movs	r6, #0
 8003e66:	42a6      	cmp	r6, r4
 8003e68:	d105      	bne.n	8003e76 <__libc_init_array+0x2e>
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e70:	4798      	blx	r3
 8003e72:	3601      	adds	r6, #1
 8003e74:	e7ee      	b.n	8003e54 <__libc_init_array+0xc>
 8003e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7a:	4798      	blx	r3
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	e7f2      	b.n	8003e66 <__libc_init_array+0x1e>
 8003e80:	0800634c 	.word	0x0800634c
 8003e84:	0800634c 	.word	0x0800634c
 8003e88:	0800634c 	.word	0x0800634c
 8003e8c:	08006350 	.word	0x08006350

08003e90 <__retarget_lock_init_recursive>:
 8003e90:	4770      	bx	lr

08003e92 <__retarget_lock_acquire_recursive>:
 8003e92:	4770      	bx	lr

08003e94 <__retarget_lock_release_recursive>:
 8003e94:	4770      	bx	lr

08003e96 <quorem>:
 8003e96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9a:	6903      	ldr	r3, [r0, #16]
 8003e9c:	690c      	ldr	r4, [r1, #16]
 8003e9e:	42a3      	cmp	r3, r4
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	db7e      	blt.n	8003fa2 <quorem+0x10c>
 8003ea4:	3c01      	subs	r4, #1
 8003ea6:	f101 0814 	add.w	r8, r1, #20
 8003eaa:	f100 0514 	add.w	r5, r0, #20
 8003eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003eb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ec8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ecc:	d331      	bcc.n	8003f32 <quorem+0x9c>
 8003ece:	f04f 0e00 	mov.w	lr, #0
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	46ac      	mov	ip, r5
 8003ed6:	46f2      	mov	sl, lr
 8003ed8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003edc:	b293      	uxth	r3, r2
 8003ede:	fb06 e303 	mla	r3, r6, r3, lr
 8003ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ee6:	0c1a      	lsrs	r2, r3, #16
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	ebaa 0303 	sub.w	r3, sl, r3
 8003eee:	f8dc a000 	ldr.w	sl, [ip]
 8003ef2:	fa13 f38a 	uxtah	r3, r3, sl
 8003ef6:	fb06 220e 	mla	r2, r6, lr, r2
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f02:	b292      	uxth	r2, r2
 8003f04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003f10:	4581      	cmp	r9, r0
 8003f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f16:	f84c 3b04 	str.w	r3, [ip], #4
 8003f1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f1e:	d2db      	bcs.n	8003ed8 <quorem+0x42>
 8003f20:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f24:	b92b      	cbnz	r3, 8003f32 <quorem+0x9c>
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	3b04      	subs	r3, #4
 8003f2a:	429d      	cmp	r5, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	d32c      	bcc.n	8003f8a <quorem+0xf4>
 8003f30:	613c      	str	r4, [r7, #16]
 8003f32:	4638      	mov	r0, r7
 8003f34:	f001 f9a6 	bl	8005284 <__mcmp>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	db22      	blt.n	8003f82 <quorem+0xec>
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	4629      	mov	r1, r5
 8003f40:	2000      	movs	r0, #0
 8003f42:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f46:	f8d1 c000 	ldr.w	ip, [r1]
 8003f4a:	b293      	uxth	r3, r2
 8003f4c:	1ac3      	subs	r3, r0, r3
 8003f4e:	0c12      	lsrs	r2, r2, #16
 8003f50:	fa13 f38c 	uxtah	r3, r3, ip
 8003f54:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f62:	45c1      	cmp	r9, r8
 8003f64:	f841 3b04 	str.w	r3, [r1], #4
 8003f68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f6c:	d2e9      	bcs.n	8003f42 <quorem+0xac>
 8003f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f76:	b922      	cbnz	r2, 8003f82 <quorem+0xec>
 8003f78:	3b04      	subs	r3, #4
 8003f7a:	429d      	cmp	r5, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	d30a      	bcc.n	8003f96 <quorem+0x100>
 8003f80:	613c      	str	r4, [r7, #16]
 8003f82:	4630      	mov	r0, r6
 8003f84:	b003      	add	sp, #12
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	3b04      	subs	r3, #4
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d1ce      	bne.n	8003f30 <quorem+0x9a>
 8003f92:	3c01      	subs	r4, #1
 8003f94:	e7c9      	b.n	8003f2a <quorem+0x94>
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	3b04      	subs	r3, #4
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	d1f0      	bne.n	8003f80 <quorem+0xea>
 8003f9e:	3c01      	subs	r4, #1
 8003fa0:	e7eb      	b.n	8003f7a <quorem+0xe4>
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7ee      	b.n	8003f84 <quorem+0xee>
	...

08003fa8 <_dtoa_r>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	ed2d 8b04 	vpush	{d8-d9}
 8003fb0:	69c5      	ldr	r5, [r0, #28]
 8003fb2:	b093      	sub	sp, #76	; 0x4c
 8003fb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003fb8:	ec57 6b10 	vmov	r6, r7, d0
 8003fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003fc0:	9107      	str	r1, [sp, #28]
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8003fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8003fc8:	b975      	cbnz	r5, 8003fe8 <_dtoa_r+0x40>
 8003fca:	2010      	movs	r0, #16
 8003fcc:	f000 fe2a 	bl	8004c24 <malloc>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	61e0      	str	r0, [r4, #28]
 8003fd4:	b920      	cbnz	r0, 8003fe0 <_dtoa_r+0x38>
 8003fd6:	4bae      	ldr	r3, [pc, #696]	; (8004290 <_dtoa_r+0x2e8>)
 8003fd8:	21ef      	movs	r1, #239	; 0xef
 8003fda:	48ae      	ldr	r0, [pc, #696]	; (8004294 <_dtoa_r+0x2ec>)
 8003fdc:	f001 fc90 	bl	8005900 <__assert_func>
 8003fe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fe4:	6005      	str	r5, [r0, #0]
 8003fe6:	60c5      	str	r5, [r0, #12]
 8003fe8:	69e3      	ldr	r3, [r4, #28]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	b151      	cbz	r1, 8004004 <_dtoa_r+0x5c>
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	604a      	str	r2, [r1, #4]
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f000 ff07 	bl	8004e0c <_Bfree>
 8003ffe:	69e3      	ldr	r3, [r4, #28]
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	1e3b      	subs	r3, r7, #0
 8004006:	bfbb      	ittet	lt
 8004008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800400c:	9303      	strlt	r3, [sp, #12]
 800400e:	2300      	movge	r3, #0
 8004010:	2201      	movlt	r2, #1
 8004012:	bfac      	ite	ge
 8004014:	f8c8 3000 	strge.w	r3, [r8]
 8004018:	f8c8 2000 	strlt.w	r2, [r8]
 800401c:	4b9e      	ldr	r3, [pc, #632]	; (8004298 <_dtoa_r+0x2f0>)
 800401e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004022:	ea33 0308 	bics.w	r3, r3, r8
 8004026:	d11b      	bne.n	8004060 <_dtoa_r+0xb8>
 8004028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800402a:	f242 730f 	movw	r3, #9999	; 0x270f
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004034:	4333      	orrs	r3, r6
 8004036:	f000 8593 	beq.w	8004b60 <_dtoa_r+0xbb8>
 800403a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800403c:	b963      	cbnz	r3, 8004058 <_dtoa_r+0xb0>
 800403e:	4b97      	ldr	r3, [pc, #604]	; (800429c <_dtoa_r+0x2f4>)
 8004040:	e027      	b.n	8004092 <_dtoa_r+0xea>
 8004042:	4b97      	ldr	r3, [pc, #604]	; (80042a0 <_dtoa_r+0x2f8>)
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	3308      	adds	r3, #8
 8004048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	9800      	ldr	r0, [sp, #0]
 800404e:	b013      	add	sp, #76	; 0x4c
 8004050:	ecbd 8b04 	vpop	{d8-d9}
 8004054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004058:	4b90      	ldr	r3, [pc, #576]	; (800429c <_dtoa_r+0x2f4>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	3303      	adds	r3, #3
 800405e:	e7f3      	b.n	8004048 <_dtoa_r+0xa0>
 8004060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004064:	2200      	movs	r2, #0
 8004066:	ec51 0b17 	vmov	r0, r1, d7
 800406a:	eeb0 8a47 	vmov.f32	s16, s14
 800406e:	eef0 8a67 	vmov.f32	s17, s15
 8004072:	2300      	movs	r3, #0
 8004074:	f7fc fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8004078:	4681      	mov	r9, r0
 800407a:	b160      	cbz	r0, 8004096 <_dtoa_r+0xee>
 800407c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800407e:	2301      	movs	r3, #1
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8568 	beq.w	8004b5a <_dtoa_r+0xbb2>
 800408a:	4b86      	ldr	r3, [pc, #536]	; (80042a4 <_dtoa_r+0x2fc>)
 800408c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	3b01      	subs	r3, #1
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	e7da      	b.n	800404c <_dtoa_r+0xa4>
 8004096:	aa10      	add	r2, sp, #64	; 0x40
 8004098:	a911      	add	r1, sp, #68	; 0x44
 800409a:	4620      	mov	r0, r4
 800409c:	eeb0 0a48 	vmov.f32	s0, s16
 80040a0:	eef0 0a68 	vmov.f32	s1, s17
 80040a4:	f001 f994 	bl	80053d0 <__d2b>
 80040a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80040ac:	4682      	mov	sl, r0
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	d07f      	beq.n	80041b2 <_dtoa_r+0x20a>
 80040b2:	ee18 3a90 	vmov	r3, s17
 80040b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80040be:	ec51 0b18 	vmov	r0, r1, d8
 80040c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80040c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80040ce:	4619      	mov	r1, r3
 80040d0:	2200      	movs	r2, #0
 80040d2:	4b75      	ldr	r3, [pc, #468]	; (80042a8 <_dtoa_r+0x300>)
 80040d4:	f7fc f8d8 	bl	8000288 <__aeabi_dsub>
 80040d8:	a367      	add	r3, pc, #412	; (adr r3, 8004278 <_dtoa_r+0x2d0>)
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f7fc fa8b 	bl	80005f8 <__aeabi_dmul>
 80040e2:	a367      	add	r3, pc, #412	; (adr r3, 8004280 <_dtoa_r+0x2d8>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f7fc f8d0 	bl	800028c <__adddf3>
 80040ec:	4606      	mov	r6, r0
 80040ee:	4628      	mov	r0, r5
 80040f0:	460f      	mov	r7, r1
 80040f2:	f7fc fa17 	bl	8000524 <__aeabi_i2d>
 80040f6:	a364      	add	r3, pc, #400	; (adr r3, 8004288 <_dtoa_r+0x2e0>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc fa7c 	bl	80005f8 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4630      	mov	r0, r6
 8004106:	4639      	mov	r1, r7
 8004108:	f7fc f8c0 	bl	800028c <__adddf3>
 800410c:	4606      	mov	r6, r0
 800410e:	460f      	mov	r7, r1
 8004110:	f7fc fd22 	bl	8000b58 <__aeabi_d2iz>
 8004114:	2200      	movs	r2, #0
 8004116:	4683      	mov	fp, r0
 8004118:	2300      	movs	r3, #0
 800411a:	4630      	mov	r0, r6
 800411c:	4639      	mov	r1, r7
 800411e:	f7fc fcdd 	bl	8000adc <__aeabi_dcmplt>
 8004122:	b148      	cbz	r0, 8004138 <_dtoa_r+0x190>
 8004124:	4658      	mov	r0, fp
 8004126:	f7fc f9fd 	bl	8000524 <__aeabi_i2d>
 800412a:	4632      	mov	r2, r6
 800412c:	463b      	mov	r3, r7
 800412e:	f7fc fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004132:	b908      	cbnz	r0, 8004138 <_dtoa_r+0x190>
 8004134:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004138:	f1bb 0f16 	cmp.w	fp, #22
 800413c:	d857      	bhi.n	80041ee <_dtoa_r+0x246>
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <_dtoa_r+0x304>)
 8004140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	ec51 0b18 	vmov	r0, r1, d8
 800414c:	f7fc fcc6 	bl	8000adc <__aeabi_dcmplt>
 8004150:	2800      	cmp	r0, #0
 8004152:	d04e      	beq.n	80041f2 <_dtoa_r+0x24a>
 8004154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004158:	2300      	movs	r3, #0
 800415a:	930c      	str	r3, [sp, #48]	; 0x30
 800415c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800415e:	1b5b      	subs	r3, r3, r5
 8004160:	1e5a      	subs	r2, r3, #1
 8004162:	bf45      	ittet	mi
 8004164:	f1c3 0301 	rsbmi	r3, r3, #1
 8004168:	9305      	strmi	r3, [sp, #20]
 800416a:	2300      	movpl	r3, #0
 800416c:	2300      	movmi	r3, #0
 800416e:	9206      	str	r2, [sp, #24]
 8004170:	bf54      	ite	pl
 8004172:	9305      	strpl	r3, [sp, #20]
 8004174:	9306      	strmi	r3, [sp, #24]
 8004176:	f1bb 0f00 	cmp.w	fp, #0
 800417a:	db3c      	blt.n	80041f6 <_dtoa_r+0x24e>
 800417c:	9b06      	ldr	r3, [sp, #24]
 800417e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004182:	445b      	add	r3, fp
 8004184:	9306      	str	r3, [sp, #24]
 8004186:	2300      	movs	r3, #0
 8004188:	9308      	str	r3, [sp, #32]
 800418a:	9b07      	ldr	r3, [sp, #28]
 800418c:	2b09      	cmp	r3, #9
 800418e:	d868      	bhi.n	8004262 <_dtoa_r+0x2ba>
 8004190:	2b05      	cmp	r3, #5
 8004192:	bfc4      	itt	gt
 8004194:	3b04      	subgt	r3, #4
 8004196:	9307      	strgt	r3, [sp, #28]
 8004198:	9b07      	ldr	r3, [sp, #28]
 800419a:	f1a3 0302 	sub.w	r3, r3, #2
 800419e:	bfcc      	ite	gt
 80041a0:	2500      	movgt	r5, #0
 80041a2:	2501      	movle	r5, #1
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	f200 8085 	bhi.w	80042b4 <_dtoa_r+0x30c>
 80041aa:	e8df f003 	tbb	[pc, r3]
 80041ae:	3b2e      	.short	0x3b2e
 80041b0:	5839      	.short	0x5839
 80041b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80041b6:	441d      	add	r5, r3
 80041b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80041bc:	2b20      	cmp	r3, #32
 80041be:	bfc1      	itttt	gt
 80041c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80041c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80041cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80041d0:	bfd6      	itet	le
 80041d2:	f1c3 0320 	rsble	r3, r3, #32
 80041d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80041da:	fa06 f003 	lslle.w	r0, r6, r3
 80041de:	f7fc f991 	bl	8000504 <__aeabi_ui2d>
 80041e2:	2201      	movs	r2, #1
 80041e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80041e8:	3d01      	subs	r5, #1
 80041ea:	920e      	str	r2, [sp, #56]	; 0x38
 80041ec:	e76f      	b.n	80040ce <_dtoa_r+0x126>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e7b3      	b.n	800415a <_dtoa_r+0x1b2>
 80041f2:	900c      	str	r0, [sp, #48]	; 0x30
 80041f4:	e7b2      	b.n	800415c <_dtoa_r+0x1b4>
 80041f6:	9b05      	ldr	r3, [sp, #20]
 80041f8:	eba3 030b 	sub.w	r3, r3, fp
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	f1cb 0300 	rsb	r3, fp, #0
 8004202:	9308      	str	r3, [sp, #32]
 8004204:	2300      	movs	r3, #0
 8004206:	930b      	str	r3, [sp, #44]	; 0x2c
 8004208:	e7bf      	b.n	800418a <_dtoa_r+0x1e2>
 800420a:	2300      	movs	r3, #0
 800420c:	9309      	str	r3, [sp, #36]	; 0x24
 800420e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	dc52      	bgt.n	80042ba <_dtoa_r+0x312>
 8004214:	2301      	movs	r3, #1
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	461a      	mov	r2, r3
 800421c:	920a      	str	r2, [sp, #40]	; 0x28
 800421e:	e00b      	b.n	8004238 <_dtoa_r+0x290>
 8004220:	2301      	movs	r3, #1
 8004222:	e7f3      	b.n	800420c <_dtoa_r+0x264>
 8004224:	2300      	movs	r3, #0
 8004226:	9309      	str	r3, [sp, #36]	; 0x24
 8004228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800422a:	445b      	add	r3, fp
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	3301      	adds	r3, #1
 8004230:	2b01      	cmp	r3, #1
 8004232:	9304      	str	r3, [sp, #16]
 8004234:	bfb8      	it	lt
 8004236:	2301      	movlt	r3, #1
 8004238:	69e0      	ldr	r0, [r4, #28]
 800423a:	2100      	movs	r1, #0
 800423c:	2204      	movs	r2, #4
 800423e:	f102 0614 	add.w	r6, r2, #20
 8004242:	429e      	cmp	r6, r3
 8004244:	d93d      	bls.n	80042c2 <_dtoa_r+0x31a>
 8004246:	6041      	str	r1, [r0, #4]
 8004248:	4620      	mov	r0, r4
 800424a:	f000 fd9f 	bl	8004d8c <_Balloc>
 800424e:	9000      	str	r0, [sp, #0]
 8004250:	2800      	cmp	r0, #0
 8004252:	d139      	bne.n	80042c8 <_dtoa_r+0x320>
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <_dtoa_r+0x308>)
 8004256:	4602      	mov	r2, r0
 8004258:	f240 11af 	movw	r1, #431	; 0x1af
 800425c:	e6bd      	b.n	8003fda <_dtoa_r+0x32>
 800425e:	2301      	movs	r3, #1
 8004260:	e7e1      	b.n	8004226 <_dtoa_r+0x27e>
 8004262:	2501      	movs	r5, #1
 8004264:	2300      	movs	r3, #0
 8004266:	9307      	str	r3, [sp, #28]
 8004268:	9509      	str	r5, [sp, #36]	; 0x24
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	9304      	str	r3, [sp, #16]
 8004272:	2200      	movs	r2, #0
 8004274:	2312      	movs	r3, #18
 8004276:	e7d1      	b.n	800421c <_dtoa_r+0x274>
 8004278:	636f4361 	.word	0x636f4361
 800427c:	3fd287a7 	.word	0x3fd287a7
 8004280:	8b60c8b3 	.word	0x8b60c8b3
 8004284:	3fc68a28 	.word	0x3fc68a28
 8004288:	509f79fb 	.word	0x509f79fb
 800428c:	3fd34413 	.word	0x3fd34413
 8004290:	08006018 	.word	0x08006018
 8004294:	0800602f 	.word	0x0800602f
 8004298:	7ff00000 	.word	0x7ff00000
 800429c:	08006014 	.word	0x08006014
 80042a0:	0800600b 	.word	0x0800600b
 80042a4:	08005fe8 	.word	0x08005fe8
 80042a8:	3ff80000 	.word	0x3ff80000
 80042ac:	08006120 	.word	0x08006120
 80042b0:	08006087 	.word	0x08006087
 80042b4:	2301      	movs	r3, #1
 80042b6:	9309      	str	r3, [sp, #36]	; 0x24
 80042b8:	e7d7      	b.n	800426a <_dtoa_r+0x2c2>
 80042ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	e7ba      	b.n	8004238 <_dtoa_r+0x290>
 80042c2:	3101      	adds	r1, #1
 80042c4:	0052      	lsls	r2, r2, #1
 80042c6:	e7ba      	b.n	800423e <_dtoa_r+0x296>
 80042c8:	69e3      	ldr	r3, [r4, #28]
 80042ca:	9a00      	ldr	r2, [sp, #0]
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	9b04      	ldr	r3, [sp, #16]
 80042d0:	2b0e      	cmp	r3, #14
 80042d2:	f200 80a8 	bhi.w	8004426 <_dtoa_r+0x47e>
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	f000 80a5 	beq.w	8004426 <_dtoa_r+0x47e>
 80042dc:	f1bb 0f00 	cmp.w	fp, #0
 80042e0:	dd38      	ble.n	8004354 <_dtoa_r+0x3ac>
 80042e2:	4bc0      	ldr	r3, [pc, #768]	; (80045e4 <_dtoa_r+0x63c>)
 80042e4:	f00b 020f 	and.w	r2, fp, #15
 80042e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80042f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80042f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80042f8:	d019      	beq.n	800432e <_dtoa_r+0x386>
 80042fa:	4bbb      	ldr	r3, [pc, #748]	; (80045e8 <_dtoa_r+0x640>)
 80042fc:	ec51 0b18 	vmov	r0, r1, d8
 8004300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004304:	f7fc faa2 	bl	800084c <__aeabi_ddiv>
 8004308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800430c:	f008 080f 	and.w	r8, r8, #15
 8004310:	2503      	movs	r5, #3
 8004312:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80045e8 <_dtoa_r+0x640>
 8004316:	f1b8 0f00 	cmp.w	r8, #0
 800431a:	d10a      	bne.n	8004332 <_dtoa_r+0x38a>
 800431c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004320:	4632      	mov	r2, r6
 8004322:	463b      	mov	r3, r7
 8004324:	f7fc fa92 	bl	800084c <__aeabi_ddiv>
 8004328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800432c:	e02b      	b.n	8004386 <_dtoa_r+0x3de>
 800432e:	2502      	movs	r5, #2
 8004330:	e7ef      	b.n	8004312 <_dtoa_r+0x36a>
 8004332:	f018 0f01 	tst.w	r8, #1
 8004336:	d008      	beq.n	800434a <_dtoa_r+0x3a2>
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004340:	f7fc f95a 	bl	80005f8 <__aeabi_dmul>
 8004344:	3501      	adds	r5, #1
 8004346:	4606      	mov	r6, r0
 8004348:	460f      	mov	r7, r1
 800434a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800434e:	f109 0908 	add.w	r9, r9, #8
 8004352:	e7e0      	b.n	8004316 <_dtoa_r+0x36e>
 8004354:	f000 809f 	beq.w	8004496 <_dtoa_r+0x4ee>
 8004358:	f1cb 0600 	rsb	r6, fp, #0
 800435c:	4ba1      	ldr	r3, [pc, #644]	; (80045e4 <_dtoa_r+0x63c>)
 800435e:	4fa2      	ldr	r7, [pc, #648]	; (80045e8 <_dtoa_r+0x640>)
 8004360:	f006 020f 	and.w	r2, r6, #15
 8004364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	ec51 0b18 	vmov	r0, r1, d8
 8004370:	f7fc f942 	bl	80005f8 <__aeabi_dmul>
 8004374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004378:	1136      	asrs	r6, r6, #4
 800437a:	2300      	movs	r3, #0
 800437c:	2502      	movs	r5, #2
 800437e:	2e00      	cmp	r6, #0
 8004380:	d17e      	bne.n	8004480 <_dtoa_r+0x4d8>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1d0      	bne.n	8004328 <_dtoa_r+0x380>
 8004386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004388:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8084 	beq.w	800449a <_dtoa_r+0x4f2>
 8004392:	4b96      	ldr	r3, [pc, #600]	; (80045ec <_dtoa_r+0x644>)
 8004394:	2200      	movs	r2, #0
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	f7fc fb9f 	bl	8000adc <__aeabi_dcmplt>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d07b      	beq.n	800449a <_dtoa_r+0x4f2>
 80043a2:	9b04      	ldr	r3, [sp, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d078      	beq.n	800449a <_dtoa_r+0x4f2>
 80043a8:	9b01      	ldr	r3, [sp, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dd39      	ble.n	8004422 <_dtoa_r+0x47a>
 80043ae:	4b90      	ldr	r3, [pc, #576]	; (80045f0 <_dtoa_r+0x648>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	4640      	mov	r0, r8
 80043b4:	4649      	mov	r1, r9
 80043b6:	f7fc f91f 	bl	80005f8 <__aeabi_dmul>
 80043ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043be:	9e01      	ldr	r6, [sp, #4]
 80043c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80043c4:	3501      	adds	r5, #1
 80043c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80043ca:	4628      	mov	r0, r5
 80043cc:	f7fc f8aa 	bl	8000524 <__aeabi_i2d>
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	f7fc f910 	bl	80005f8 <__aeabi_dmul>
 80043d8:	4b86      	ldr	r3, [pc, #536]	; (80045f4 <_dtoa_r+0x64c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	f7fb ff56 	bl	800028c <__adddf3>
 80043e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80043e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e8:	9303      	str	r3, [sp, #12]
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	d158      	bne.n	80044a0 <_dtoa_r+0x4f8>
 80043ee:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <_dtoa_r+0x650>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	4640      	mov	r0, r8
 80043f4:	4649      	mov	r1, r9
 80043f6:	f7fb ff47 	bl	8000288 <__aeabi_dsub>
 80043fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043fe:	4680      	mov	r8, r0
 8004400:	4689      	mov	r9, r1
 8004402:	f7fc fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8004406:	2800      	cmp	r0, #0
 8004408:	f040 8296 	bne.w	8004938 <_dtoa_r+0x990>
 800440c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004410:	4640      	mov	r0, r8
 8004412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004416:	4649      	mov	r1, r9
 8004418:	f7fc fb60 	bl	8000adc <__aeabi_dcmplt>
 800441c:	2800      	cmp	r0, #0
 800441e:	f040 8289 	bne.w	8004934 <_dtoa_r+0x98c>
 8004422:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004428:	2b00      	cmp	r3, #0
 800442a:	f2c0 814e 	blt.w	80046ca <_dtoa_r+0x722>
 800442e:	f1bb 0f0e 	cmp.w	fp, #14
 8004432:	f300 814a 	bgt.w	80046ca <_dtoa_r+0x722>
 8004436:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <_dtoa_r+0x63c>)
 8004438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800443c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	f280 80dc 	bge.w	8004600 <_dtoa_r+0x658>
 8004448:	9b04      	ldr	r3, [sp, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f300 80d8 	bgt.w	8004600 <_dtoa_r+0x658>
 8004450:	f040 826f 	bne.w	8004932 <_dtoa_r+0x98a>
 8004454:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <_dtoa_r+0x650>)
 8004456:	2200      	movs	r2, #0
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc f8cc 	bl	80005f8 <__aeabi_dmul>
 8004460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004464:	f7fc fb4e 	bl	8000b04 <__aeabi_dcmpge>
 8004468:	9e04      	ldr	r6, [sp, #16]
 800446a:	4637      	mov	r7, r6
 800446c:	2800      	cmp	r0, #0
 800446e:	f040 8245 	bne.w	80048fc <_dtoa_r+0x954>
 8004472:	9d00      	ldr	r5, [sp, #0]
 8004474:	2331      	movs	r3, #49	; 0x31
 8004476:	f805 3b01 	strb.w	r3, [r5], #1
 800447a:	f10b 0b01 	add.w	fp, fp, #1
 800447e:	e241      	b.n	8004904 <_dtoa_r+0x95c>
 8004480:	07f2      	lsls	r2, r6, #31
 8004482:	d505      	bpl.n	8004490 <_dtoa_r+0x4e8>
 8004484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004488:	f7fc f8b6 	bl	80005f8 <__aeabi_dmul>
 800448c:	3501      	adds	r5, #1
 800448e:	2301      	movs	r3, #1
 8004490:	1076      	asrs	r6, r6, #1
 8004492:	3708      	adds	r7, #8
 8004494:	e773      	b.n	800437e <_dtoa_r+0x3d6>
 8004496:	2502      	movs	r5, #2
 8004498:	e775      	b.n	8004386 <_dtoa_r+0x3de>
 800449a:	9e04      	ldr	r6, [sp, #16]
 800449c:	465f      	mov	r7, fp
 800449e:	e792      	b.n	80043c6 <_dtoa_r+0x41e>
 80044a0:	9900      	ldr	r1, [sp, #0]
 80044a2:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <_dtoa_r+0x63c>)
 80044a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044a8:	4431      	add	r1, r6
 80044aa:	9102      	str	r1, [sp, #8]
 80044ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ae:	eeb0 9a47 	vmov.f32	s18, s14
 80044b2:	eef0 9a67 	vmov.f32	s19, s15
 80044b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80044ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044be:	2900      	cmp	r1, #0
 80044c0:	d044      	beq.n	800454c <_dtoa_r+0x5a4>
 80044c2:	494e      	ldr	r1, [pc, #312]	; (80045fc <_dtoa_r+0x654>)
 80044c4:	2000      	movs	r0, #0
 80044c6:	f7fc f9c1 	bl	800084c <__aeabi_ddiv>
 80044ca:	ec53 2b19 	vmov	r2, r3, d9
 80044ce:	f7fb fedb 	bl	8000288 <__aeabi_dsub>
 80044d2:	9d00      	ldr	r5, [sp, #0]
 80044d4:	ec41 0b19 	vmov	d9, r0, r1
 80044d8:	4649      	mov	r1, r9
 80044da:	4640      	mov	r0, r8
 80044dc:	f7fc fb3c 	bl	8000b58 <__aeabi_d2iz>
 80044e0:	4606      	mov	r6, r0
 80044e2:	f7fc f81f 	bl	8000524 <__aeabi_i2d>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4640      	mov	r0, r8
 80044ec:	4649      	mov	r1, r9
 80044ee:	f7fb fecb 	bl	8000288 <__aeabi_dsub>
 80044f2:	3630      	adds	r6, #48	; 0x30
 80044f4:	f805 6b01 	strb.w	r6, [r5], #1
 80044f8:	ec53 2b19 	vmov	r2, r3, d9
 80044fc:	4680      	mov	r8, r0
 80044fe:	4689      	mov	r9, r1
 8004500:	f7fc faec 	bl	8000adc <__aeabi_dcmplt>
 8004504:	2800      	cmp	r0, #0
 8004506:	d164      	bne.n	80045d2 <_dtoa_r+0x62a>
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	4937      	ldr	r1, [pc, #220]	; (80045ec <_dtoa_r+0x644>)
 800450e:	2000      	movs	r0, #0
 8004510:	f7fb feba 	bl	8000288 <__aeabi_dsub>
 8004514:	ec53 2b19 	vmov	r2, r3, d9
 8004518:	f7fc fae0 	bl	8000adc <__aeabi_dcmplt>
 800451c:	2800      	cmp	r0, #0
 800451e:	f040 80b6 	bne.w	800468e <_dtoa_r+0x6e6>
 8004522:	9b02      	ldr	r3, [sp, #8]
 8004524:	429d      	cmp	r5, r3
 8004526:	f43f af7c 	beq.w	8004422 <_dtoa_r+0x47a>
 800452a:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <_dtoa_r+0x648>)
 800452c:	ec51 0b19 	vmov	r0, r1, d9
 8004530:	2200      	movs	r2, #0
 8004532:	f7fc f861 	bl	80005f8 <__aeabi_dmul>
 8004536:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <_dtoa_r+0x648>)
 8004538:	ec41 0b19 	vmov	d9, r0, r1
 800453c:	2200      	movs	r2, #0
 800453e:	4640      	mov	r0, r8
 8004540:	4649      	mov	r1, r9
 8004542:	f7fc f859 	bl	80005f8 <__aeabi_dmul>
 8004546:	4680      	mov	r8, r0
 8004548:	4689      	mov	r9, r1
 800454a:	e7c5      	b.n	80044d8 <_dtoa_r+0x530>
 800454c:	ec51 0b17 	vmov	r0, r1, d7
 8004550:	f7fc f852 	bl	80005f8 <__aeabi_dmul>
 8004554:	9b02      	ldr	r3, [sp, #8]
 8004556:	9d00      	ldr	r5, [sp, #0]
 8004558:	930f      	str	r3, [sp, #60]	; 0x3c
 800455a:	ec41 0b19 	vmov	d9, r0, r1
 800455e:	4649      	mov	r1, r9
 8004560:	4640      	mov	r0, r8
 8004562:	f7fc faf9 	bl	8000b58 <__aeabi_d2iz>
 8004566:	4606      	mov	r6, r0
 8004568:	f7fb ffdc 	bl	8000524 <__aeabi_i2d>
 800456c:	3630      	adds	r6, #48	; 0x30
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4640      	mov	r0, r8
 8004574:	4649      	mov	r1, r9
 8004576:	f7fb fe87 	bl	8000288 <__aeabi_dsub>
 800457a:	f805 6b01 	strb.w	r6, [r5], #1
 800457e:	9b02      	ldr	r3, [sp, #8]
 8004580:	429d      	cmp	r5, r3
 8004582:	4680      	mov	r8, r0
 8004584:	4689      	mov	r9, r1
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	d124      	bne.n	80045d6 <_dtoa_r+0x62e>
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <_dtoa_r+0x654>)
 800458e:	ec51 0b19 	vmov	r0, r1, d9
 8004592:	f7fb fe7b 	bl	800028c <__adddf3>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f7fc fabb 	bl	8000b18 <__aeabi_dcmpgt>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d173      	bne.n	800468e <_dtoa_r+0x6e6>
 80045a6:	ec53 2b19 	vmov	r2, r3, d9
 80045aa:	4914      	ldr	r1, [pc, #80]	; (80045fc <_dtoa_r+0x654>)
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7fb fe6b 	bl	8000288 <__aeabi_dsub>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4640      	mov	r0, r8
 80045b8:	4649      	mov	r1, r9
 80045ba:	f7fc fa8f 	bl	8000adc <__aeabi_dcmplt>
 80045be:	2800      	cmp	r0, #0
 80045c0:	f43f af2f 	beq.w	8004422 <_dtoa_r+0x47a>
 80045c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80045c6:	1e6b      	subs	r3, r5, #1
 80045c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80045ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d0f8      	beq.n	80045c4 <_dtoa_r+0x61c>
 80045d2:	46bb      	mov	fp, r7
 80045d4:	e04a      	b.n	800466c <_dtoa_r+0x6c4>
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <_dtoa_r+0x648>)
 80045d8:	f7fc f80e 	bl	80005f8 <__aeabi_dmul>
 80045dc:	4680      	mov	r8, r0
 80045de:	4689      	mov	r9, r1
 80045e0:	e7bd      	b.n	800455e <_dtoa_r+0x5b6>
 80045e2:	bf00      	nop
 80045e4:	08006120 	.word	0x08006120
 80045e8:	080060f8 	.word	0x080060f8
 80045ec:	3ff00000 	.word	0x3ff00000
 80045f0:	40240000 	.word	0x40240000
 80045f4:	401c0000 	.word	0x401c0000
 80045f8:	40140000 	.word	0x40140000
 80045fc:	3fe00000 	.word	0x3fe00000
 8004600:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004604:	9d00      	ldr	r5, [sp, #0]
 8004606:	4642      	mov	r2, r8
 8004608:	464b      	mov	r3, r9
 800460a:	4630      	mov	r0, r6
 800460c:	4639      	mov	r1, r7
 800460e:	f7fc f91d 	bl	800084c <__aeabi_ddiv>
 8004612:	f7fc faa1 	bl	8000b58 <__aeabi_d2iz>
 8004616:	9001      	str	r0, [sp, #4]
 8004618:	f7fb ff84 	bl	8000524 <__aeabi_i2d>
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	f7fb ffea 	bl	80005f8 <__aeabi_dmul>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4630      	mov	r0, r6
 800462a:	4639      	mov	r1, r7
 800462c:	f7fb fe2c 	bl	8000288 <__aeabi_dsub>
 8004630:	9e01      	ldr	r6, [sp, #4]
 8004632:	9f04      	ldr	r7, [sp, #16]
 8004634:	3630      	adds	r6, #48	; 0x30
 8004636:	f805 6b01 	strb.w	r6, [r5], #1
 800463a:	9e00      	ldr	r6, [sp, #0]
 800463c:	1bae      	subs	r6, r5, r6
 800463e:	42b7      	cmp	r7, r6
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	d134      	bne.n	80046b0 <_dtoa_r+0x708>
 8004646:	f7fb fe21 	bl	800028c <__adddf3>
 800464a:	4642      	mov	r2, r8
 800464c:	464b      	mov	r3, r9
 800464e:	4606      	mov	r6, r0
 8004650:	460f      	mov	r7, r1
 8004652:	f7fc fa61 	bl	8000b18 <__aeabi_dcmpgt>
 8004656:	b9c8      	cbnz	r0, 800468c <_dtoa_r+0x6e4>
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	4630      	mov	r0, r6
 800465e:	4639      	mov	r1, r7
 8004660:	f7fc fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004664:	b110      	cbz	r0, 800466c <_dtoa_r+0x6c4>
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	07db      	lsls	r3, r3, #31
 800466a:	d40f      	bmi.n	800468c <_dtoa_r+0x6e4>
 800466c:	4651      	mov	r1, sl
 800466e:	4620      	mov	r0, r4
 8004670:	f000 fbcc 	bl	8004e0c <_Bfree>
 8004674:	2300      	movs	r3, #0
 8004676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004678:	702b      	strb	r3, [r5, #0]
 800467a:	f10b 0301 	add.w	r3, fp, #1
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004682:	2b00      	cmp	r3, #0
 8004684:	f43f ace2 	beq.w	800404c <_dtoa_r+0xa4>
 8004688:	601d      	str	r5, [r3, #0]
 800468a:	e4df      	b.n	800404c <_dtoa_r+0xa4>
 800468c:	465f      	mov	r7, fp
 800468e:	462b      	mov	r3, r5
 8004690:	461d      	mov	r5, r3
 8004692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004696:	2a39      	cmp	r2, #57	; 0x39
 8004698:	d106      	bne.n	80046a8 <_dtoa_r+0x700>
 800469a:	9a00      	ldr	r2, [sp, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d1f7      	bne.n	8004690 <_dtoa_r+0x6e8>
 80046a0:	9900      	ldr	r1, [sp, #0]
 80046a2:	2230      	movs	r2, #48	; 0x30
 80046a4:	3701      	adds	r7, #1
 80046a6:	700a      	strb	r2, [r1, #0]
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	3201      	adds	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e790      	b.n	80045d2 <_dtoa_r+0x62a>
 80046b0:	4ba3      	ldr	r3, [pc, #652]	; (8004940 <_dtoa_r+0x998>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	f7fb ffa0 	bl	80005f8 <__aeabi_dmul>
 80046b8:	2200      	movs	r2, #0
 80046ba:	2300      	movs	r3, #0
 80046bc:	4606      	mov	r6, r0
 80046be:	460f      	mov	r7, r1
 80046c0:	f7fc fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d09e      	beq.n	8004606 <_dtoa_r+0x65e>
 80046c8:	e7d0      	b.n	800466c <_dtoa_r+0x6c4>
 80046ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046cc:	2a00      	cmp	r2, #0
 80046ce:	f000 80ca 	beq.w	8004866 <_dtoa_r+0x8be>
 80046d2:	9a07      	ldr	r2, [sp, #28]
 80046d4:	2a01      	cmp	r2, #1
 80046d6:	f300 80ad 	bgt.w	8004834 <_dtoa_r+0x88c>
 80046da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046dc:	2a00      	cmp	r2, #0
 80046de:	f000 80a5 	beq.w	800482c <_dtoa_r+0x884>
 80046e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046e6:	9e08      	ldr	r6, [sp, #32]
 80046e8:	9d05      	ldr	r5, [sp, #20]
 80046ea:	9a05      	ldr	r2, [sp, #20]
 80046ec:	441a      	add	r2, r3
 80046ee:	9205      	str	r2, [sp, #20]
 80046f0:	9a06      	ldr	r2, [sp, #24]
 80046f2:	2101      	movs	r1, #1
 80046f4:	441a      	add	r2, r3
 80046f6:	4620      	mov	r0, r4
 80046f8:	9206      	str	r2, [sp, #24]
 80046fa:	f000 fc3d 	bl	8004f78 <__i2b>
 80046fe:	4607      	mov	r7, r0
 8004700:	b165      	cbz	r5, 800471c <_dtoa_r+0x774>
 8004702:	9b06      	ldr	r3, [sp, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	dd09      	ble.n	800471c <_dtoa_r+0x774>
 8004708:	42ab      	cmp	r3, r5
 800470a:	9a05      	ldr	r2, [sp, #20]
 800470c:	bfa8      	it	ge
 800470e:	462b      	movge	r3, r5
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	9205      	str	r2, [sp, #20]
 8004714:	9a06      	ldr	r2, [sp, #24]
 8004716:	1aed      	subs	r5, r5, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	9306      	str	r3, [sp, #24]
 800471c:	9b08      	ldr	r3, [sp, #32]
 800471e:	b1f3      	cbz	r3, 800475e <_dtoa_r+0x7b6>
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80a3 	beq.w	800486e <_dtoa_r+0x8c6>
 8004728:	2e00      	cmp	r6, #0
 800472a:	dd10      	ble.n	800474e <_dtoa_r+0x7a6>
 800472c:	4639      	mov	r1, r7
 800472e:	4632      	mov	r2, r6
 8004730:	4620      	mov	r0, r4
 8004732:	f000 fce1 	bl	80050f8 <__pow5mult>
 8004736:	4652      	mov	r2, sl
 8004738:	4601      	mov	r1, r0
 800473a:	4607      	mov	r7, r0
 800473c:	4620      	mov	r0, r4
 800473e:	f000 fc31 	bl	8004fa4 <__multiply>
 8004742:	4651      	mov	r1, sl
 8004744:	4680      	mov	r8, r0
 8004746:	4620      	mov	r0, r4
 8004748:	f000 fb60 	bl	8004e0c <_Bfree>
 800474c:	46c2      	mov	sl, r8
 800474e:	9b08      	ldr	r3, [sp, #32]
 8004750:	1b9a      	subs	r2, r3, r6
 8004752:	d004      	beq.n	800475e <_dtoa_r+0x7b6>
 8004754:	4651      	mov	r1, sl
 8004756:	4620      	mov	r0, r4
 8004758:	f000 fcce 	bl	80050f8 <__pow5mult>
 800475c:	4682      	mov	sl, r0
 800475e:	2101      	movs	r1, #1
 8004760:	4620      	mov	r0, r4
 8004762:	f000 fc09 	bl	8004f78 <__i2b>
 8004766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	4606      	mov	r6, r0
 800476c:	f340 8081 	ble.w	8004872 <_dtoa_r+0x8ca>
 8004770:	461a      	mov	r2, r3
 8004772:	4601      	mov	r1, r0
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fcbf 	bl	80050f8 <__pow5mult>
 800477a:	9b07      	ldr	r3, [sp, #28]
 800477c:	2b01      	cmp	r3, #1
 800477e:	4606      	mov	r6, r0
 8004780:	dd7a      	ble.n	8004878 <_dtoa_r+0x8d0>
 8004782:	f04f 0800 	mov.w	r8, #0
 8004786:	6933      	ldr	r3, [r6, #16]
 8004788:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800478c:	6918      	ldr	r0, [r3, #16]
 800478e:	f000 fba5 	bl	8004edc <__hi0bits>
 8004792:	f1c0 0020 	rsb	r0, r0, #32
 8004796:	9b06      	ldr	r3, [sp, #24]
 8004798:	4418      	add	r0, r3
 800479a:	f010 001f 	ands.w	r0, r0, #31
 800479e:	f000 8094 	beq.w	80048ca <_dtoa_r+0x922>
 80047a2:	f1c0 0320 	rsb	r3, r0, #32
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	f340 8085 	ble.w	80048b6 <_dtoa_r+0x90e>
 80047ac:	9b05      	ldr	r3, [sp, #20]
 80047ae:	f1c0 001c 	rsb	r0, r0, #28
 80047b2:	4403      	add	r3, r0
 80047b4:	9305      	str	r3, [sp, #20]
 80047b6:	9b06      	ldr	r3, [sp, #24]
 80047b8:	4403      	add	r3, r0
 80047ba:	4405      	add	r5, r0
 80047bc:	9306      	str	r3, [sp, #24]
 80047be:	9b05      	ldr	r3, [sp, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dd05      	ble.n	80047d0 <_dtoa_r+0x828>
 80047c4:	4651      	mov	r1, sl
 80047c6:	461a      	mov	r2, r3
 80047c8:	4620      	mov	r0, r4
 80047ca:	f000 fcef 	bl	80051ac <__lshift>
 80047ce:	4682      	mov	sl, r0
 80047d0:	9b06      	ldr	r3, [sp, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dd05      	ble.n	80047e2 <_dtoa_r+0x83a>
 80047d6:	4631      	mov	r1, r6
 80047d8:	461a      	mov	r2, r3
 80047da:	4620      	mov	r0, r4
 80047dc:	f000 fce6 	bl	80051ac <__lshift>
 80047e0:	4606      	mov	r6, r0
 80047e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d072      	beq.n	80048ce <_dtoa_r+0x926>
 80047e8:	4631      	mov	r1, r6
 80047ea:	4650      	mov	r0, sl
 80047ec:	f000 fd4a 	bl	8005284 <__mcmp>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	da6c      	bge.n	80048ce <_dtoa_r+0x926>
 80047f4:	2300      	movs	r3, #0
 80047f6:	4651      	mov	r1, sl
 80047f8:	220a      	movs	r2, #10
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fb28 	bl	8004e50 <__multadd>
 8004800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004806:	4682      	mov	sl, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 81b0 	beq.w	8004b6e <_dtoa_r+0xbc6>
 800480e:	2300      	movs	r3, #0
 8004810:	4639      	mov	r1, r7
 8004812:	220a      	movs	r2, #10
 8004814:	4620      	mov	r0, r4
 8004816:	f000 fb1b 	bl	8004e50 <__multadd>
 800481a:	9b01      	ldr	r3, [sp, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	4607      	mov	r7, r0
 8004820:	f300 8096 	bgt.w	8004950 <_dtoa_r+0x9a8>
 8004824:	9b07      	ldr	r3, [sp, #28]
 8004826:	2b02      	cmp	r3, #2
 8004828:	dc59      	bgt.n	80048de <_dtoa_r+0x936>
 800482a:	e091      	b.n	8004950 <_dtoa_r+0x9a8>
 800482c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800482e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004832:	e758      	b.n	80046e6 <_dtoa_r+0x73e>
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	1e5e      	subs	r6, r3, #1
 8004838:	9b08      	ldr	r3, [sp, #32]
 800483a:	42b3      	cmp	r3, r6
 800483c:	bfbf      	itttt	lt
 800483e:	9b08      	ldrlt	r3, [sp, #32]
 8004840:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004842:	9608      	strlt	r6, [sp, #32]
 8004844:	1af3      	sublt	r3, r6, r3
 8004846:	bfb4      	ite	lt
 8004848:	18d2      	addlt	r2, r2, r3
 800484a:	1b9e      	subge	r6, r3, r6
 800484c:	9b04      	ldr	r3, [sp, #16]
 800484e:	bfbc      	itt	lt
 8004850:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004852:	2600      	movlt	r6, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	bfb7      	itett	lt
 8004858:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800485c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004860:	1a9d      	sublt	r5, r3, r2
 8004862:	2300      	movlt	r3, #0
 8004864:	e741      	b.n	80046ea <_dtoa_r+0x742>
 8004866:	9e08      	ldr	r6, [sp, #32]
 8004868:	9d05      	ldr	r5, [sp, #20]
 800486a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800486c:	e748      	b.n	8004700 <_dtoa_r+0x758>
 800486e:	9a08      	ldr	r2, [sp, #32]
 8004870:	e770      	b.n	8004754 <_dtoa_r+0x7ac>
 8004872:	9b07      	ldr	r3, [sp, #28]
 8004874:	2b01      	cmp	r3, #1
 8004876:	dc19      	bgt.n	80048ac <_dtoa_r+0x904>
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	b9bb      	cbnz	r3, 80048ac <_dtoa_r+0x904>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004882:	b99b      	cbnz	r3, 80048ac <_dtoa_r+0x904>
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800488a:	0d1b      	lsrs	r3, r3, #20
 800488c:	051b      	lsls	r3, r3, #20
 800488e:	b183      	cbz	r3, 80048b2 <_dtoa_r+0x90a>
 8004890:	9b05      	ldr	r3, [sp, #20]
 8004892:	3301      	adds	r3, #1
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	9b06      	ldr	r3, [sp, #24]
 8004898:	3301      	adds	r3, #1
 800489a:	9306      	str	r3, [sp, #24]
 800489c:	f04f 0801 	mov.w	r8, #1
 80048a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f47f af6f 	bne.w	8004786 <_dtoa_r+0x7de>
 80048a8:	2001      	movs	r0, #1
 80048aa:	e774      	b.n	8004796 <_dtoa_r+0x7ee>
 80048ac:	f04f 0800 	mov.w	r8, #0
 80048b0:	e7f6      	b.n	80048a0 <_dtoa_r+0x8f8>
 80048b2:	4698      	mov	r8, r3
 80048b4:	e7f4      	b.n	80048a0 <_dtoa_r+0x8f8>
 80048b6:	d082      	beq.n	80047be <_dtoa_r+0x816>
 80048b8:	9a05      	ldr	r2, [sp, #20]
 80048ba:	331c      	adds	r3, #28
 80048bc:	441a      	add	r2, r3
 80048be:	9205      	str	r2, [sp, #20]
 80048c0:	9a06      	ldr	r2, [sp, #24]
 80048c2:	441a      	add	r2, r3
 80048c4:	441d      	add	r5, r3
 80048c6:	9206      	str	r2, [sp, #24]
 80048c8:	e779      	b.n	80047be <_dtoa_r+0x816>
 80048ca:	4603      	mov	r3, r0
 80048cc:	e7f4      	b.n	80048b8 <_dtoa_r+0x910>
 80048ce:	9b04      	ldr	r3, [sp, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dc37      	bgt.n	8004944 <_dtoa_r+0x99c>
 80048d4:	9b07      	ldr	r3, [sp, #28]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	dd34      	ble.n	8004944 <_dtoa_r+0x99c>
 80048da:	9b04      	ldr	r3, [sp, #16]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	b963      	cbnz	r3, 80048fc <_dtoa_r+0x954>
 80048e2:	4631      	mov	r1, r6
 80048e4:	2205      	movs	r2, #5
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 fab2 	bl	8004e50 <__multadd>
 80048ec:	4601      	mov	r1, r0
 80048ee:	4606      	mov	r6, r0
 80048f0:	4650      	mov	r0, sl
 80048f2:	f000 fcc7 	bl	8005284 <__mcmp>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f73f adbb 	bgt.w	8004472 <_dtoa_r+0x4ca>
 80048fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fe:	9d00      	ldr	r5, [sp, #0]
 8004900:	ea6f 0b03 	mvn.w	fp, r3
 8004904:	f04f 0800 	mov.w	r8, #0
 8004908:	4631      	mov	r1, r6
 800490a:	4620      	mov	r0, r4
 800490c:	f000 fa7e 	bl	8004e0c <_Bfree>
 8004910:	2f00      	cmp	r7, #0
 8004912:	f43f aeab 	beq.w	800466c <_dtoa_r+0x6c4>
 8004916:	f1b8 0f00 	cmp.w	r8, #0
 800491a:	d005      	beq.n	8004928 <_dtoa_r+0x980>
 800491c:	45b8      	cmp	r8, r7
 800491e:	d003      	beq.n	8004928 <_dtoa_r+0x980>
 8004920:	4641      	mov	r1, r8
 8004922:	4620      	mov	r0, r4
 8004924:	f000 fa72 	bl	8004e0c <_Bfree>
 8004928:	4639      	mov	r1, r7
 800492a:	4620      	mov	r0, r4
 800492c:	f000 fa6e 	bl	8004e0c <_Bfree>
 8004930:	e69c      	b.n	800466c <_dtoa_r+0x6c4>
 8004932:	2600      	movs	r6, #0
 8004934:	4637      	mov	r7, r6
 8004936:	e7e1      	b.n	80048fc <_dtoa_r+0x954>
 8004938:	46bb      	mov	fp, r7
 800493a:	4637      	mov	r7, r6
 800493c:	e599      	b.n	8004472 <_dtoa_r+0x4ca>
 800493e:	bf00      	nop
 8004940:	40240000 	.word	0x40240000
 8004944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 80c8 	beq.w	8004adc <_dtoa_r+0xb34>
 800494c:	9b04      	ldr	r3, [sp, #16]
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	2d00      	cmp	r5, #0
 8004952:	dd05      	ble.n	8004960 <_dtoa_r+0x9b8>
 8004954:	4639      	mov	r1, r7
 8004956:	462a      	mov	r2, r5
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fc27 	bl	80051ac <__lshift>
 800495e:	4607      	mov	r7, r0
 8004960:	f1b8 0f00 	cmp.w	r8, #0
 8004964:	d05b      	beq.n	8004a1e <_dtoa_r+0xa76>
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4620      	mov	r0, r4
 800496a:	f000 fa0f 	bl	8004d8c <_Balloc>
 800496e:	4605      	mov	r5, r0
 8004970:	b928      	cbnz	r0, 800497e <_dtoa_r+0x9d6>
 8004972:	4b83      	ldr	r3, [pc, #524]	; (8004b80 <_dtoa_r+0xbd8>)
 8004974:	4602      	mov	r2, r0
 8004976:	f240 21ef 	movw	r1, #751	; 0x2ef
 800497a:	f7ff bb2e 	b.w	8003fda <_dtoa_r+0x32>
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	3202      	adds	r2, #2
 8004982:	0092      	lsls	r2, r2, #2
 8004984:	f107 010c 	add.w	r1, r7, #12
 8004988:	300c      	adds	r0, #12
 800498a:	f000 ffab 	bl	80058e4 <memcpy>
 800498e:	2201      	movs	r2, #1
 8004990:	4629      	mov	r1, r5
 8004992:	4620      	mov	r0, r4
 8004994:	f000 fc0a 	bl	80051ac <__lshift>
 8004998:	9b00      	ldr	r3, [sp, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049a2:	4413      	add	r3, r2
 80049a4:	9308      	str	r3, [sp, #32]
 80049a6:	9b02      	ldr	r3, [sp, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	46b8      	mov	r8, r7
 80049ae:	9306      	str	r3, [sp, #24]
 80049b0:	4607      	mov	r7, r0
 80049b2:	9b04      	ldr	r3, [sp, #16]
 80049b4:	4631      	mov	r1, r6
 80049b6:	3b01      	subs	r3, #1
 80049b8:	4650      	mov	r0, sl
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	f7ff fa6b 	bl	8003e96 <quorem>
 80049c0:	4641      	mov	r1, r8
 80049c2:	9002      	str	r0, [sp, #8]
 80049c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049c8:	4650      	mov	r0, sl
 80049ca:	f000 fc5b 	bl	8005284 <__mcmp>
 80049ce:	463a      	mov	r2, r7
 80049d0:	9005      	str	r0, [sp, #20]
 80049d2:	4631      	mov	r1, r6
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 fc71 	bl	80052bc <__mdiff>
 80049da:	68c2      	ldr	r2, [r0, #12]
 80049dc:	4605      	mov	r5, r0
 80049de:	bb02      	cbnz	r2, 8004a22 <_dtoa_r+0xa7a>
 80049e0:	4601      	mov	r1, r0
 80049e2:	4650      	mov	r0, sl
 80049e4:	f000 fc4e 	bl	8005284 <__mcmp>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4629      	mov	r1, r5
 80049ec:	4620      	mov	r0, r4
 80049ee:	9209      	str	r2, [sp, #36]	; 0x24
 80049f0:	f000 fa0c 	bl	8004e0c <_Bfree>
 80049f4:	9b07      	ldr	r3, [sp, #28]
 80049f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049f8:	9d04      	ldr	r5, [sp, #16]
 80049fa:	ea43 0102 	orr.w	r1, r3, r2
 80049fe:	9b06      	ldr	r3, [sp, #24]
 8004a00:	4319      	orrs	r1, r3
 8004a02:	d110      	bne.n	8004a26 <_dtoa_r+0xa7e>
 8004a04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a08:	d029      	beq.n	8004a5e <_dtoa_r+0xab6>
 8004a0a:	9b05      	ldr	r3, [sp, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dd02      	ble.n	8004a16 <_dtoa_r+0xa6e>
 8004a10:	9b02      	ldr	r3, [sp, #8]
 8004a12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004a16:	9b01      	ldr	r3, [sp, #4]
 8004a18:	f883 9000 	strb.w	r9, [r3]
 8004a1c:	e774      	b.n	8004908 <_dtoa_r+0x960>
 8004a1e:	4638      	mov	r0, r7
 8004a20:	e7ba      	b.n	8004998 <_dtoa_r+0x9f0>
 8004a22:	2201      	movs	r2, #1
 8004a24:	e7e1      	b.n	80049ea <_dtoa_r+0xa42>
 8004a26:	9b05      	ldr	r3, [sp, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	db04      	blt.n	8004a36 <_dtoa_r+0xa8e>
 8004a2c:	9907      	ldr	r1, [sp, #28]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	9906      	ldr	r1, [sp, #24]
 8004a32:	430b      	orrs	r3, r1
 8004a34:	d120      	bne.n	8004a78 <_dtoa_r+0xad0>
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	dded      	ble.n	8004a16 <_dtoa_r+0xa6e>
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f000 fbb4 	bl	80051ac <__lshift>
 8004a44:	4631      	mov	r1, r6
 8004a46:	4682      	mov	sl, r0
 8004a48:	f000 fc1c 	bl	8005284 <__mcmp>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	dc03      	bgt.n	8004a58 <_dtoa_r+0xab0>
 8004a50:	d1e1      	bne.n	8004a16 <_dtoa_r+0xa6e>
 8004a52:	f019 0f01 	tst.w	r9, #1
 8004a56:	d0de      	beq.n	8004a16 <_dtoa_r+0xa6e>
 8004a58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a5c:	d1d8      	bne.n	8004a10 <_dtoa_r+0xa68>
 8004a5e:	9a01      	ldr	r2, [sp, #4]
 8004a60:	2339      	movs	r3, #57	; 0x39
 8004a62:	7013      	strb	r3, [r2, #0]
 8004a64:	462b      	mov	r3, r5
 8004a66:	461d      	mov	r5, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a6e:	2a39      	cmp	r2, #57	; 0x39
 8004a70:	d06c      	beq.n	8004b4c <_dtoa_r+0xba4>
 8004a72:	3201      	adds	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e747      	b.n	8004908 <_dtoa_r+0x960>
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	dd07      	ble.n	8004a8c <_dtoa_r+0xae4>
 8004a7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a80:	d0ed      	beq.n	8004a5e <_dtoa_r+0xab6>
 8004a82:	9a01      	ldr	r2, [sp, #4]
 8004a84:	f109 0301 	add.w	r3, r9, #1
 8004a88:	7013      	strb	r3, [r2, #0]
 8004a8a:	e73d      	b.n	8004908 <_dtoa_r+0x960>
 8004a8c:	9b04      	ldr	r3, [sp, #16]
 8004a8e:	9a08      	ldr	r2, [sp, #32]
 8004a90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d043      	beq.n	8004b20 <_dtoa_r+0xb78>
 8004a98:	4651      	mov	r1, sl
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	220a      	movs	r2, #10
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 f9d6 	bl	8004e50 <__multadd>
 8004aa4:	45b8      	cmp	r8, r7
 8004aa6:	4682      	mov	sl, r0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	f04f 020a 	mov.w	r2, #10
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	d107      	bne.n	8004ac6 <_dtoa_r+0xb1e>
 8004ab6:	f000 f9cb 	bl	8004e50 <__multadd>
 8004aba:	4680      	mov	r8, r0
 8004abc:	4607      	mov	r7, r0
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	e775      	b.n	80049b2 <_dtoa_r+0xa0a>
 8004ac6:	f000 f9c3 	bl	8004e50 <__multadd>
 8004aca:	4639      	mov	r1, r7
 8004acc:	4680      	mov	r8, r0
 8004ace:	2300      	movs	r3, #0
 8004ad0:	220a      	movs	r2, #10
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 f9bc 	bl	8004e50 <__multadd>
 8004ad8:	4607      	mov	r7, r0
 8004ada:	e7f0      	b.n	8004abe <_dtoa_r+0xb16>
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	9301      	str	r3, [sp, #4]
 8004ae0:	9d00      	ldr	r5, [sp, #0]
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	f7ff f9d6 	bl	8003e96 <quorem>
 8004aea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	f805 9b01 	strb.w	r9, [r5], #1
 8004af4:	1aea      	subs	r2, r5, r3
 8004af6:	9b01      	ldr	r3, [sp, #4]
 8004af8:	4293      	cmp	r3, r2
 8004afa:	dd07      	ble.n	8004b0c <_dtoa_r+0xb64>
 8004afc:	4651      	mov	r1, sl
 8004afe:	2300      	movs	r3, #0
 8004b00:	220a      	movs	r2, #10
 8004b02:	4620      	mov	r0, r4
 8004b04:	f000 f9a4 	bl	8004e50 <__multadd>
 8004b08:	4682      	mov	sl, r0
 8004b0a:	e7ea      	b.n	8004ae2 <_dtoa_r+0xb3a>
 8004b0c:	9b01      	ldr	r3, [sp, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfc8      	it	gt
 8004b12:	461d      	movgt	r5, r3
 8004b14:	9b00      	ldr	r3, [sp, #0]
 8004b16:	bfd8      	it	le
 8004b18:	2501      	movle	r5, #1
 8004b1a:	441d      	add	r5, r3
 8004b1c:	f04f 0800 	mov.w	r8, #0
 8004b20:	4651      	mov	r1, sl
 8004b22:	2201      	movs	r2, #1
 8004b24:	4620      	mov	r0, r4
 8004b26:	f000 fb41 	bl	80051ac <__lshift>
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4682      	mov	sl, r0
 8004b2e:	f000 fba9 	bl	8005284 <__mcmp>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	dc96      	bgt.n	8004a64 <_dtoa_r+0xabc>
 8004b36:	d102      	bne.n	8004b3e <_dtoa_r+0xb96>
 8004b38:	f019 0f01 	tst.w	r9, #1
 8004b3c:	d192      	bne.n	8004a64 <_dtoa_r+0xabc>
 8004b3e:	462b      	mov	r3, r5
 8004b40:	461d      	mov	r5, r3
 8004b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b46:	2a30      	cmp	r2, #48	; 0x30
 8004b48:	d0fa      	beq.n	8004b40 <_dtoa_r+0xb98>
 8004b4a:	e6dd      	b.n	8004908 <_dtoa_r+0x960>
 8004b4c:	9a00      	ldr	r2, [sp, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d189      	bne.n	8004a66 <_dtoa_r+0xabe>
 8004b52:	f10b 0b01 	add.w	fp, fp, #1
 8004b56:	2331      	movs	r3, #49	; 0x31
 8004b58:	e796      	b.n	8004a88 <_dtoa_r+0xae0>
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <_dtoa_r+0xbdc>)
 8004b5c:	f7ff ba99 	b.w	8004092 <_dtoa_r+0xea>
 8004b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f47f aa6d 	bne.w	8004042 <_dtoa_r+0x9a>
 8004b68:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <_dtoa_r+0xbe0>)
 8004b6a:	f7ff ba92 	b.w	8004092 <_dtoa_r+0xea>
 8004b6e:	9b01      	ldr	r3, [sp, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	dcb5      	bgt.n	8004ae0 <_dtoa_r+0xb38>
 8004b74:	9b07      	ldr	r3, [sp, #28]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	f73f aeb1 	bgt.w	80048de <_dtoa_r+0x936>
 8004b7c:	e7b0      	b.n	8004ae0 <_dtoa_r+0xb38>
 8004b7e:	bf00      	nop
 8004b80:	08006087 	.word	0x08006087
 8004b84:	08005fe7 	.word	0x08005fe7
 8004b88:	0800600b 	.word	0x0800600b

08004b8c <_free_r>:
 8004b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	d044      	beq.n	8004c1c <_free_r+0x90>
 8004b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b96:	9001      	str	r0, [sp, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b9e:	bfb8      	it	lt
 8004ba0:	18e4      	addlt	r4, r4, r3
 8004ba2:	f000 f8e7 	bl	8004d74 <__malloc_lock>
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <_free_r+0x94>)
 8004ba8:	9801      	ldr	r0, [sp, #4]
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	b933      	cbnz	r3, 8004bbc <_free_r+0x30>
 8004bae:	6063      	str	r3, [r4, #4]
 8004bb0:	6014      	str	r4, [r2, #0]
 8004bb2:	b003      	add	sp, #12
 8004bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb8:	f000 b8e2 	b.w	8004d80 <__malloc_unlock>
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	d908      	bls.n	8004bd2 <_free_r+0x46>
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	1961      	adds	r1, r4, r5
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	bf01      	itttt	eq
 8004bc8:	6819      	ldreq	r1, [r3, #0]
 8004bca:	685b      	ldreq	r3, [r3, #4]
 8004bcc:	1949      	addeq	r1, r1, r5
 8004bce:	6021      	streq	r1, [r4, #0]
 8004bd0:	e7ed      	b.n	8004bae <_free_r+0x22>
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b10b      	cbz	r3, 8004bdc <_free_r+0x50>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d9fa      	bls.n	8004bd2 <_free_r+0x46>
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	1855      	adds	r5, r2, r1
 8004be0:	42a5      	cmp	r5, r4
 8004be2:	d10b      	bne.n	8004bfc <_free_r+0x70>
 8004be4:	6824      	ldr	r4, [r4, #0]
 8004be6:	4421      	add	r1, r4
 8004be8:	1854      	adds	r4, r2, r1
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	d1e0      	bne.n	8004bb2 <_free_r+0x26>
 8004bf0:	681c      	ldr	r4, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	6053      	str	r3, [r2, #4]
 8004bf6:	440c      	add	r4, r1
 8004bf8:	6014      	str	r4, [r2, #0]
 8004bfa:	e7da      	b.n	8004bb2 <_free_r+0x26>
 8004bfc:	d902      	bls.n	8004c04 <_free_r+0x78>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	6003      	str	r3, [r0, #0]
 8004c02:	e7d6      	b.n	8004bb2 <_free_r+0x26>
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1961      	adds	r1, r4, r5
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	bf04      	itt	eq
 8004c0c:	6819      	ldreq	r1, [r3, #0]
 8004c0e:	685b      	ldreq	r3, [r3, #4]
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	bf04      	itt	eq
 8004c14:	1949      	addeq	r1, r1, r5
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	6054      	str	r4, [r2, #4]
 8004c1a:	e7ca      	b.n	8004bb2 <_free_r+0x26>
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bd30      	pop	{r4, r5, pc}
 8004c20:	20000340 	.word	0x20000340

08004c24 <malloc>:
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <malloc+0xc>)
 8004c26:	4601      	mov	r1, r0
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	f000 b823 	b.w	8004c74 <_malloc_r>
 8004c2e:	bf00      	nop
 8004c30:	20000060 	.word	0x20000060

08004c34 <sbrk_aligned>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	4e0e      	ldr	r6, [pc, #56]	; (8004c70 <sbrk_aligned+0x3c>)
 8004c38:	460c      	mov	r4, r1
 8004c3a:	6831      	ldr	r1, [r6, #0]
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b911      	cbnz	r1, 8004c46 <sbrk_aligned+0x12>
 8004c40:	f000 fe40 	bl	80058c4 <_sbrk_r>
 8004c44:	6030      	str	r0, [r6, #0]
 8004c46:	4621      	mov	r1, r4
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f000 fe3b 	bl	80058c4 <_sbrk_r>
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	d00a      	beq.n	8004c68 <sbrk_aligned+0x34>
 8004c52:	1cc4      	adds	r4, r0, #3
 8004c54:	f024 0403 	bic.w	r4, r4, #3
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	d007      	beq.n	8004c6c <sbrk_aligned+0x38>
 8004c5c:	1a21      	subs	r1, r4, r0
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 fe30 	bl	80058c4 <_sbrk_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d101      	bne.n	8004c6c <sbrk_aligned+0x38>
 8004c68:	f04f 34ff 	mov.w	r4, #4294967295
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	20000344 	.word	0x20000344

08004c74 <_malloc_r>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	1ccd      	adds	r5, r1, #3
 8004c7a:	f025 0503 	bic.w	r5, r5, #3
 8004c7e:	3508      	adds	r5, #8
 8004c80:	2d0c      	cmp	r5, #12
 8004c82:	bf38      	it	cc
 8004c84:	250c      	movcc	r5, #12
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	4607      	mov	r7, r0
 8004c8a:	db01      	blt.n	8004c90 <_malloc_r+0x1c>
 8004c8c:	42a9      	cmp	r1, r5
 8004c8e:	d905      	bls.n	8004c9c <_malloc_r+0x28>
 8004c90:	230c      	movs	r3, #12
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	2600      	movs	r6, #0
 8004c96:	4630      	mov	r0, r6
 8004c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d70 <_malloc_r+0xfc>
 8004ca0:	f000 f868 	bl	8004d74 <__malloc_lock>
 8004ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca8:	461c      	mov	r4, r3
 8004caa:	bb5c      	cbnz	r4, 8004d04 <_malloc_r+0x90>
 8004cac:	4629      	mov	r1, r5
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f7ff ffc0 	bl	8004c34 <sbrk_aligned>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	d155      	bne.n	8004d66 <_malloc_r+0xf2>
 8004cba:	f8d8 4000 	ldr.w	r4, [r8]
 8004cbe:	4626      	mov	r6, r4
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	d145      	bne.n	8004d50 <_malloc_r+0xdc>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d048      	beq.n	8004d5a <_malloc_r+0xe6>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4638      	mov	r0, r7
 8004cce:	eb04 0903 	add.w	r9, r4, r3
 8004cd2:	f000 fdf7 	bl	80058c4 <_sbrk_r>
 8004cd6:	4581      	cmp	r9, r0
 8004cd8:	d13f      	bne.n	8004d5a <_malloc_r+0xe6>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	1a6d      	subs	r5, r5, r1
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f7ff ffa7 	bl	8004c34 <sbrk_aligned>
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d037      	beq.n	8004d5a <_malloc_r+0xe6>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	442b      	add	r3, r5
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d038      	beq.n	8004d6a <_malloc_r+0xf6>
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	42a2      	cmp	r2, r4
 8004cfc:	d12b      	bne.n	8004d56 <_malloc_r+0xe2>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	e00f      	b.n	8004d24 <_malloc_r+0xb0>
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	1b52      	subs	r2, r2, r5
 8004d08:	d41f      	bmi.n	8004d4a <_malloc_r+0xd6>
 8004d0a:	2a0b      	cmp	r2, #11
 8004d0c:	d917      	bls.n	8004d3e <_malloc_r+0xca>
 8004d0e:	1961      	adds	r1, r4, r5
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	6025      	str	r5, [r4, #0]
 8004d14:	bf18      	it	ne
 8004d16:	6059      	strne	r1, [r3, #4]
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	bf08      	it	eq
 8004d1c:	f8c8 1000 	streq.w	r1, [r8]
 8004d20:	5162      	str	r2, [r4, r5]
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	4638      	mov	r0, r7
 8004d26:	f104 060b 	add.w	r6, r4, #11
 8004d2a:	f000 f829 	bl	8004d80 <__malloc_unlock>
 8004d2e:	f026 0607 	bic.w	r6, r6, #7
 8004d32:	1d23      	adds	r3, r4, #4
 8004d34:	1af2      	subs	r2, r6, r3
 8004d36:	d0ae      	beq.n	8004c96 <_malloc_r+0x22>
 8004d38:	1b9b      	subs	r3, r3, r6
 8004d3a:	50a3      	str	r3, [r4, r2]
 8004d3c:	e7ab      	b.n	8004c96 <_malloc_r+0x22>
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6862      	ldr	r2, [r4, #4]
 8004d42:	d1dd      	bne.n	8004d00 <_malloc_r+0x8c>
 8004d44:	f8c8 2000 	str.w	r2, [r8]
 8004d48:	e7ec      	b.n	8004d24 <_malloc_r+0xb0>
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	6864      	ldr	r4, [r4, #4]
 8004d4e:	e7ac      	b.n	8004caa <_malloc_r+0x36>
 8004d50:	4634      	mov	r4, r6
 8004d52:	6876      	ldr	r6, [r6, #4]
 8004d54:	e7b4      	b.n	8004cc0 <_malloc_r+0x4c>
 8004d56:	4613      	mov	r3, r2
 8004d58:	e7cc      	b.n	8004cf4 <_malloc_r+0x80>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f000 f80e 	bl	8004d80 <__malloc_unlock>
 8004d64:	e797      	b.n	8004c96 <_malloc_r+0x22>
 8004d66:	6025      	str	r5, [r4, #0]
 8004d68:	e7dc      	b.n	8004d24 <_malloc_r+0xb0>
 8004d6a:	605b      	str	r3, [r3, #4]
 8004d6c:	deff      	udf	#255	; 0xff
 8004d6e:	bf00      	nop
 8004d70:	20000340 	.word	0x20000340

08004d74 <__malloc_lock>:
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <__malloc_lock+0x8>)
 8004d76:	f7ff b88c 	b.w	8003e92 <__retarget_lock_acquire_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	2000033c 	.word	0x2000033c

08004d80 <__malloc_unlock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <__malloc_unlock+0x8>)
 8004d82:	f7ff b887 	b.w	8003e94 <__retarget_lock_release_recursive>
 8004d86:	bf00      	nop
 8004d88:	2000033c 	.word	0x2000033c

08004d8c <_Balloc>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	69c6      	ldr	r6, [r0, #28]
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	b976      	cbnz	r6, 8004db4 <_Balloc+0x28>
 8004d96:	2010      	movs	r0, #16
 8004d98:	f7ff ff44 	bl	8004c24 <malloc>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	61e0      	str	r0, [r4, #28]
 8004da0:	b920      	cbnz	r0, 8004dac <_Balloc+0x20>
 8004da2:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <_Balloc+0x78>)
 8004da4:	4818      	ldr	r0, [pc, #96]	; (8004e08 <_Balloc+0x7c>)
 8004da6:	216b      	movs	r1, #107	; 0x6b
 8004da8:	f000 fdaa 	bl	8005900 <__assert_func>
 8004dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004db0:	6006      	str	r6, [r0, #0]
 8004db2:	60c6      	str	r6, [r0, #12]
 8004db4:	69e6      	ldr	r6, [r4, #28]
 8004db6:	68f3      	ldr	r3, [r6, #12]
 8004db8:	b183      	cbz	r3, 8004ddc <_Balloc+0x50>
 8004dba:	69e3      	ldr	r3, [r4, #28]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dc2:	b9b8      	cbnz	r0, 8004df4 <_Balloc+0x68>
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8004dca:	1d72      	adds	r2, r6, #5
 8004dcc:	0092      	lsls	r2, r2, #2
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f000 fdb4 	bl	800593c <_calloc_r>
 8004dd4:	b160      	cbz	r0, 8004df0 <_Balloc+0x64>
 8004dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dda:	e00e      	b.n	8004dfa <_Balloc+0x6e>
 8004ddc:	2221      	movs	r2, #33	; 0x21
 8004dde:	2104      	movs	r1, #4
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fdab 	bl	800593c <_calloc_r>
 8004de6:	69e3      	ldr	r3, [r4, #28]
 8004de8:	60f0      	str	r0, [r6, #12]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e4      	bne.n	8004dba <_Balloc+0x2e>
 8004df0:	2000      	movs	r0, #0
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	6802      	ldr	r2, [r0, #0]
 8004df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e00:	e7f7      	b.n	8004df2 <_Balloc+0x66>
 8004e02:	bf00      	nop
 8004e04:	08006018 	.word	0x08006018
 8004e08:	08006098 	.word	0x08006098

08004e0c <_Bfree>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	69c6      	ldr	r6, [r0, #28]
 8004e10:	4605      	mov	r5, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	b976      	cbnz	r6, 8004e34 <_Bfree+0x28>
 8004e16:	2010      	movs	r0, #16
 8004e18:	f7ff ff04 	bl	8004c24 <malloc>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	61e8      	str	r0, [r5, #28]
 8004e20:	b920      	cbnz	r0, 8004e2c <_Bfree+0x20>
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <_Bfree+0x3c>)
 8004e24:	4809      	ldr	r0, [pc, #36]	; (8004e4c <_Bfree+0x40>)
 8004e26:	218f      	movs	r1, #143	; 0x8f
 8004e28:	f000 fd6a 	bl	8005900 <__assert_func>
 8004e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e30:	6006      	str	r6, [r0, #0]
 8004e32:	60c6      	str	r6, [r0, #12]
 8004e34:	b13c      	cbz	r4, 8004e46 <_Bfree+0x3a>
 8004e36:	69eb      	ldr	r3, [r5, #28]
 8004e38:	6862      	ldr	r2, [r4, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e40:	6021      	str	r1, [r4, #0]
 8004e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	08006018 	.word	0x08006018
 8004e4c:	08006098 	.word	0x08006098

08004e50 <__multadd>:
 8004e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e54:	690d      	ldr	r5, [r1, #16]
 8004e56:	4607      	mov	r7, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	461e      	mov	r6, r3
 8004e5c:	f101 0c14 	add.w	ip, r1, #20
 8004e60:	2000      	movs	r0, #0
 8004e62:	f8dc 3000 	ldr.w	r3, [ip]
 8004e66:	b299      	uxth	r1, r3
 8004e68:	fb02 6101 	mla	r1, r2, r1, r6
 8004e6c:	0c1e      	lsrs	r6, r3, #16
 8004e6e:	0c0b      	lsrs	r3, r1, #16
 8004e70:	fb02 3306 	mla	r3, r2, r6, r3
 8004e74:	b289      	uxth	r1, r1
 8004e76:	3001      	adds	r0, #1
 8004e78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e7c:	4285      	cmp	r5, r0
 8004e7e:	f84c 1b04 	str.w	r1, [ip], #4
 8004e82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e86:	dcec      	bgt.n	8004e62 <__multadd+0x12>
 8004e88:	b30e      	cbz	r6, 8004ece <__multadd+0x7e>
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	42ab      	cmp	r3, r5
 8004e8e:	dc19      	bgt.n	8004ec4 <__multadd+0x74>
 8004e90:	6861      	ldr	r1, [r4, #4]
 8004e92:	4638      	mov	r0, r7
 8004e94:	3101      	adds	r1, #1
 8004e96:	f7ff ff79 	bl	8004d8c <_Balloc>
 8004e9a:	4680      	mov	r8, r0
 8004e9c:	b928      	cbnz	r0, 8004eaa <__multadd+0x5a>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <__multadd+0x84>)
 8004ea2:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <__multadd+0x88>)
 8004ea4:	21ba      	movs	r1, #186	; 0xba
 8004ea6:	f000 fd2b 	bl	8005900 <__assert_func>
 8004eaa:	6922      	ldr	r2, [r4, #16]
 8004eac:	3202      	adds	r2, #2
 8004eae:	f104 010c 	add.w	r1, r4, #12
 8004eb2:	0092      	lsls	r2, r2, #2
 8004eb4:	300c      	adds	r0, #12
 8004eb6:	f000 fd15 	bl	80058e4 <memcpy>
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f7ff ffa5 	bl	8004e0c <_Bfree>
 8004ec2:	4644      	mov	r4, r8
 8004ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ec8:	3501      	adds	r5, #1
 8004eca:	615e      	str	r6, [r3, #20]
 8004ecc:	6125      	str	r5, [r4, #16]
 8004ece:	4620      	mov	r0, r4
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	08006087 	.word	0x08006087
 8004ed8:	08006098 	.word	0x08006098

08004edc <__hi0bits>:
 8004edc:	0c03      	lsrs	r3, r0, #16
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	b9d3      	cbnz	r3, 8004f18 <__hi0bits+0x3c>
 8004ee2:	0400      	lsls	r0, r0, #16
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004eea:	bf04      	itt	eq
 8004eec:	0200      	lsleq	r0, r0, #8
 8004eee:	3308      	addeq	r3, #8
 8004ef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004ef4:	bf04      	itt	eq
 8004ef6:	0100      	lsleq	r0, r0, #4
 8004ef8:	3304      	addeq	r3, #4
 8004efa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004efe:	bf04      	itt	eq
 8004f00:	0080      	lsleq	r0, r0, #2
 8004f02:	3302      	addeq	r3, #2
 8004f04:	2800      	cmp	r0, #0
 8004f06:	db05      	blt.n	8004f14 <__hi0bits+0x38>
 8004f08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f0c:	f103 0301 	add.w	r3, r3, #1
 8004f10:	bf08      	it	eq
 8004f12:	2320      	moveq	r3, #32
 8004f14:	4618      	mov	r0, r3
 8004f16:	4770      	bx	lr
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e7e4      	b.n	8004ee6 <__hi0bits+0xa>

08004f1c <__lo0bits>:
 8004f1c:	6803      	ldr	r3, [r0, #0]
 8004f1e:	f013 0207 	ands.w	r2, r3, #7
 8004f22:	d00c      	beq.n	8004f3e <__lo0bits+0x22>
 8004f24:	07d9      	lsls	r1, r3, #31
 8004f26:	d422      	bmi.n	8004f6e <__lo0bits+0x52>
 8004f28:	079a      	lsls	r2, r3, #30
 8004f2a:	bf49      	itett	mi
 8004f2c:	085b      	lsrmi	r3, r3, #1
 8004f2e:	089b      	lsrpl	r3, r3, #2
 8004f30:	6003      	strmi	r3, [r0, #0]
 8004f32:	2201      	movmi	r2, #1
 8004f34:	bf5c      	itt	pl
 8004f36:	6003      	strpl	r3, [r0, #0]
 8004f38:	2202      	movpl	r2, #2
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4770      	bx	lr
 8004f3e:	b299      	uxth	r1, r3
 8004f40:	b909      	cbnz	r1, 8004f46 <__lo0bits+0x2a>
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	2210      	movs	r2, #16
 8004f46:	b2d9      	uxtb	r1, r3
 8004f48:	b909      	cbnz	r1, 8004f4e <__lo0bits+0x32>
 8004f4a:	3208      	adds	r2, #8
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	0719      	lsls	r1, r3, #28
 8004f50:	bf04      	itt	eq
 8004f52:	091b      	lsreq	r3, r3, #4
 8004f54:	3204      	addeq	r2, #4
 8004f56:	0799      	lsls	r1, r3, #30
 8004f58:	bf04      	itt	eq
 8004f5a:	089b      	lsreq	r3, r3, #2
 8004f5c:	3202      	addeq	r2, #2
 8004f5e:	07d9      	lsls	r1, r3, #31
 8004f60:	d403      	bmi.n	8004f6a <__lo0bits+0x4e>
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	f102 0201 	add.w	r2, r2, #1
 8004f68:	d003      	beq.n	8004f72 <__lo0bits+0x56>
 8004f6a:	6003      	str	r3, [r0, #0]
 8004f6c:	e7e5      	b.n	8004f3a <__lo0bits+0x1e>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	e7e3      	b.n	8004f3a <__lo0bits+0x1e>
 8004f72:	2220      	movs	r2, #32
 8004f74:	e7e1      	b.n	8004f3a <__lo0bits+0x1e>
	...

08004f78 <__i2b>:
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	f7ff ff05 	bl	8004d8c <_Balloc>
 8004f82:	4602      	mov	r2, r0
 8004f84:	b928      	cbnz	r0, 8004f92 <__i2b+0x1a>
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <__i2b+0x24>)
 8004f88:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <__i2b+0x28>)
 8004f8a:	f240 1145 	movw	r1, #325	; 0x145
 8004f8e:	f000 fcb7 	bl	8005900 <__assert_func>
 8004f92:	2301      	movs	r3, #1
 8004f94:	6144      	str	r4, [r0, #20]
 8004f96:	6103      	str	r3, [r0, #16]
 8004f98:	bd10      	pop	{r4, pc}
 8004f9a:	bf00      	nop
 8004f9c:	08006087 	.word	0x08006087
 8004fa0:	08006098 	.word	0x08006098

08004fa4 <__multiply>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	4691      	mov	r9, r2
 8004faa:	690a      	ldr	r2, [r1, #16]
 8004fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	bfb8      	it	lt
 8004fb4:	460b      	movlt	r3, r1
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	bfbc      	itt	lt
 8004fba:	464c      	movlt	r4, r9
 8004fbc:	4699      	movlt	r9, r3
 8004fbe:	6927      	ldr	r7, [r4, #16]
 8004fc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	6861      	ldr	r1, [r4, #4]
 8004fc8:	eb07 060a 	add.w	r6, r7, sl
 8004fcc:	42b3      	cmp	r3, r6
 8004fce:	b085      	sub	sp, #20
 8004fd0:	bfb8      	it	lt
 8004fd2:	3101      	addlt	r1, #1
 8004fd4:	f7ff feda 	bl	8004d8c <_Balloc>
 8004fd8:	b930      	cbnz	r0, 8004fe8 <__multiply+0x44>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	4b44      	ldr	r3, [pc, #272]	; (80050f0 <__multiply+0x14c>)
 8004fde:	4845      	ldr	r0, [pc, #276]	; (80050f4 <__multiply+0x150>)
 8004fe0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004fe4:	f000 fc8c 	bl	8005900 <__assert_func>
 8004fe8:	f100 0514 	add.w	r5, r0, #20
 8004fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4543      	cmp	r3, r8
 8004ff6:	d321      	bcc.n	800503c <__multiply+0x98>
 8004ff8:	f104 0314 	add.w	r3, r4, #20
 8004ffc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005000:	f109 0314 	add.w	r3, r9, #20
 8005004:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005008:	9202      	str	r2, [sp, #8]
 800500a:	1b3a      	subs	r2, r7, r4
 800500c:	3a15      	subs	r2, #21
 800500e:	f022 0203 	bic.w	r2, r2, #3
 8005012:	3204      	adds	r2, #4
 8005014:	f104 0115 	add.w	r1, r4, #21
 8005018:	428f      	cmp	r7, r1
 800501a:	bf38      	it	cc
 800501c:	2204      	movcc	r2, #4
 800501e:	9201      	str	r2, [sp, #4]
 8005020:	9a02      	ldr	r2, [sp, #8]
 8005022:	9303      	str	r3, [sp, #12]
 8005024:	429a      	cmp	r2, r3
 8005026:	d80c      	bhi.n	8005042 <__multiply+0x9e>
 8005028:	2e00      	cmp	r6, #0
 800502a:	dd03      	ble.n	8005034 <__multiply+0x90>
 800502c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05b      	beq.n	80050ec <__multiply+0x148>
 8005034:	6106      	str	r6, [r0, #16]
 8005036:	b005      	add	sp, #20
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	f843 2b04 	str.w	r2, [r3], #4
 8005040:	e7d8      	b.n	8004ff4 <__multiply+0x50>
 8005042:	f8b3 a000 	ldrh.w	sl, [r3]
 8005046:	f1ba 0f00 	cmp.w	sl, #0
 800504a:	d024      	beq.n	8005096 <__multiply+0xf2>
 800504c:	f104 0e14 	add.w	lr, r4, #20
 8005050:	46a9      	mov	r9, r5
 8005052:	f04f 0c00 	mov.w	ip, #0
 8005056:	f85e 2b04 	ldr.w	r2, [lr], #4
 800505a:	f8d9 1000 	ldr.w	r1, [r9]
 800505e:	fa1f fb82 	uxth.w	fp, r2
 8005062:	b289      	uxth	r1, r1
 8005064:	fb0a 110b 	mla	r1, sl, fp, r1
 8005068:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800506c:	f8d9 2000 	ldr.w	r2, [r9]
 8005070:	4461      	add	r1, ip
 8005072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005076:	fb0a c20b 	mla	r2, sl, fp, ip
 800507a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800507e:	b289      	uxth	r1, r1
 8005080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005084:	4577      	cmp	r7, lr
 8005086:	f849 1b04 	str.w	r1, [r9], #4
 800508a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800508e:	d8e2      	bhi.n	8005056 <__multiply+0xb2>
 8005090:	9a01      	ldr	r2, [sp, #4]
 8005092:	f845 c002 	str.w	ip, [r5, r2]
 8005096:	9a03      	ldr	r2, [sp, #12]
 8005098:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800509c:	3304      	adds	r3, #4
 800509e:	f1b9 0f00 	cmp.w	r9, #0
 80050a2:	d021      	beq.n	80050e8 <__multiply+0x144>
 80050a4:	6829      	ldr	r1, [r5, #0]
 80050a6:	f104 0c14 	add.w	ip, r4, #20
 80050aa:	46ae      	mov	lr, r5
 80050ac:	f04f 0a00 	mov.w	sl, #0
 80050b0:	f8bc b000 	ldrh.w	fp, [ip]
 80050b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050b8:	fb09 220b 	mla	r2, r9, fp, r2
 80050bc:	4452      	add	r2, sl
 80050be:	b289      	uxth	r1, r1
 80050c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050c4:	f84e 1b04 	str.w	r1, [lr], #4
 80050c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80050cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050d0:	f8be 1000 	ldrh.w	r1, [lr]
 80050d4:	fb09 110a 	mla	r1, r9, sl, r1
 80050d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80050dc:	4567      	cmp	r7, ip
 80050de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050e2:	d8e5      	bhi.n	80050b0 <__multiply+0x10c>
 80050e4:	9a01      	ldr	r2, [sp, #4]
 80050e6:	50a9      	str	r1, [r5, r2]
 80050e8:	3504      	adds	r5, #4
 80050ea:	e799      	b.n	8005020 <__multiply+0x7c>
 80050ec:	3e01      	subs	r6, #1
 80050ee:	e79b      	b.n	8005028 <__multiply+0x84>
 80050f0:	08006087 	.word	0x08006087
 80050f4:	08006098 	.word	0x08006098

080050f8 <__pow5mult>:
 80050f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050fc:	4615      	mov	r5, r2
 80050fe:	f012 0203 	ands.w	r2, r2, #3
 8005102:	4606      	mov	r6, r0
 8005104:	460f      	mov	r7, r1
 8005106:	d007      	beq.n	8005118 <__pow5mult+0x20>
 8005108:	4c25      	ldr	r4, [pc, #148]	; (80051a0 <__pow5mult+0xa8>)
 800510a:	3a01      	subs	r2, #1
 800510c:	2300      	movs	r3, #0
 800510e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005112:	f7ff fe9d 	bl	8004e50 <__multadd>
 8005116:	4607      	mov	r7, r0
 8005118:	10ad      	asrs	r5, r5, #2
 800511a:	d03d      	beq.n	8005198 <__pow5mult+0xa0>
 800511c:	69f4      	ldr	r4, [r6, #28]
 800511e:	b97c      	cbnz	r4, 8005140 <__pow5mult+0x48>
 8005120:	2010      	movs	r0, #16
 8005122:	f7ff fd7f 	bl	8004c24 <malloc>
 8005126:	4602      	mov	r2, r0
 8005128:	61f0      	str	r0, [r6, #28]
 800512a:	b928      	cbnz	r0, 8005138 <__pow5mult+0x40>
 800512c:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <__pow5mult+0xac>)
 800512e:	481e      	ldr	r0, [pc, #120]	; (80051a8 <__pow5mult+0xb0>)
 8005130:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005134:	f000 fbe4 	bl	8005900 <__assert_func>
 8005138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800513c:	6004      	str	r4, [r0, #0]
 800513e:	60c4      	str	r4, [r0, #12]
 8005140:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005148:	b94c      	cbnz	r4, 800515e <__pow5mult+0x66>
 800514a:	f240 2171 	movw	r1, #625	; 0x271
 800514e:	4630      	mov	r0, r6
 8005150:	f7ff ff12 	bl	8004f78 <__i2b>
 8005154:	2300      	movs	r3, #0
 8005156:	f8c8 0008 	str.w	r0, [r8, #8]
 800515a:	4604      	mov	r4, r0
 800515c:	6003      	str	r3, [r0, #0]
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	07eb      	lsls	r3, r5, #31
 8005164:	d50a      	bpl.n	800517c <__pow5mult+0x84>
 8005166:	4639      	mov	r1, r7
 8005168:	4622      	mov	r2, r4
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff ff1a 	bl	8004fa4 <__multiply>
 8005170:	4639      	mov	r1, r7
 8005172:	4680      	mov	r8, r0
 8005174:	4630      	mov	r0, r6
 8005176:	f7ff fe49 	bl	8004e0c <_Bfree>
 800517a:	4647      	mov	r7, r8
 800517c:	106d      	asrs	r5, r5, #1
 800517e:	d00b      	beq.n	8005198 <__pow5mult+0xa0>
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	b938      	cbnz	r0, 8005194 <__pow5mult+0x9c>
 8005184:	4622      	mov	r2, r4
 8005186:	4621      	mov	r1, r4
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff ff0b 	bl	8004fa4 <__multiply>
 800518e:	6020      	str	r0, [r4, #0]
 8005190:	f8c0 9000 	str.w	r9, [r0]
 8005194:	4604      	mov	r4, r0
 8005196:	e7e4      	b.n	8005162 <__pow5mult+0x6a>
 8005198:	4638      	mov	r0, r7
 800519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800519e:	bf00      	nop
 80051a0:	080061e8 	.word	0x080061e8
 80051a4:	08006018 	.word	0x08006018
 80051a8:	08006098 	.word	0x08006098

080051ac <__lshift>:
 80051ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	460c      	mov	r4, r1
 80051b2:	6849      	ldr	r1, [r1, #4]
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	4607      	mov	r7, r0
 80051be:	4691      	mov	r9, r2
 80051c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051c4:	f108 0601 	add.w	r6, r8, #1
 80051c8:	42b3      	cmp	r3, r6
 80051ca:	db0b      	blt.n	80051e4 <__lshift+0x38>
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff fddd 	bl	8004d8c <_Balloc>
 80051d2:	4605      	mov	r5, r0
 80051d4:	b948      	cbnz	r0, 80051ea <__lshift+0x3e>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b28      	ldr	r3, [pc, #160]	; (800527c <__lshift+0xd0>)
 80051da:	4829      	ldr	r0, [pc, #164]	; (8005280 <__lshift+0xd4>)
 80051dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80051e0:	f000 fb8e 	bl	8005900 <__assert_func>
 80051e4:	3101      	adds	r1, #1
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	e7ee      	b.n	80051c8 <__lshift+0x1c>
 80051ea:	2300      	movs	r3, #0
 80051ec:	f100 0114 	add.w	r1, r0, #20
 80051f0:	f100 0210 	add.w	r2, r0, #16
 80051f4:	4618      	mov	r0, r3
 80051f6:	4553      	cmp	r3, sl
 80051f8:	db33      	blt.n	8005262 <__lshift+0xb6>
 80051fa:	6920      	ldr	r0, [r4, #16]
 80051fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005200:	f104 0314 	add.w	r3, r4, #20
 8005204:	f019 091f 	ands.w	r9, r9, #31
 8005208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800520c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005210:	d02b      	beq.n	800526a <__lshift+0xbe>
 8005212:	f1c9 0e20 	rsb	lr, r9, #32
 8005216:	468a      	mov	sl, r1
 8005218:	2200      	movs	r2, #0
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	fa00 f009 	lsl.w	r0, r0, r9
 8005220:	4310      	orrs	r0, r2
 8005222:	f84a 0b04 	str.w	r0, [sl], #4
 8005226:	f853 2b04 	ldr.w	r2, [r3], #4
 800522a:	459c      	cmp	ip, r3
 800522c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005230:	d8f3      	bhi.n	800521a <__lshift+0x6e>
 8005232:	ebac 0304 	sub.w	r3, ip, r4
 8005236:	3b15      	subs	r3, #21
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	3304      	adds	r3, #4
 800523e:	f104 0015 	add.w	r0, r4, #21
 8005242:	4584      	cmp	ip, r0
 8005244:	bf38      	it	cc
 8005246:	2304      	movcc	r3, #4
 8005248:	50ca      	str	r2, [r1, r3]
 800524a:	b10a      	cbz	r2, 8005250 <__lshift+0xa4>
 800524c:	f108 0602 	add.w	r6, r8, #2
 8005250:	3e01      	subs	r6, #1
 8005252:	4638      	mov	r0, r7
 8005254:	612e      	str	r6, [r5, #16]
 8005256:	4621      	mov	r1, r4
 8005258:	f7ff fdd8 	bl	8004e0c <_Bfree>
 800525c:	4628      	mov	r0, r5
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	f842 0f04 	str.w	r0, [r2, #4]!
 8005266:	3301      	adds	r3, #1
 8005268:	e7c5      	b.n	80051f6 <__lshift+0x4a>
 800526a:	3904      	subs	r1, #4
 800526c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005270:	f841 2f04 	str.w	r2, [r1, #4]!
 8005274:	459c      	cmp	ip, r3
 8005276:	d8f9      	bhi.n	800526c <__lshift+0xc0>
 8005278:	e7ea      	b.n	8005250 <__lshift+0xa4>
 800527a:	bf00      	nop
 800527c:	08006087 	.word	0x08006087
 8005280:	08006098 	.word	0x08006098

08005284 <__mcmp>:
 8005284:	b530      	push	{r4, r5, lr}
 8005286:	6902      	ldr	r2, [r0, #16]
 8005288:	690c      	ldr	r4, [r1, #16]
 800528a:	1b12      	subs	r2, r2, r4
 800528c:	d10e      	bne.n	80052ac <__mcmp+0x28>
 800528e:	f100 0314 	add.w	r3, r0, #20
 8005292:	3114      	adds	r1, #20
 8005294:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005298:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800529c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052a4:	42a5      	cmp	r5, r4
 80052a6:	d003      	beq.n	80052b0 <__mcmp+0x2c>
 80052a8:	d305      	bcc.n	80052b6 <__mcmp+0x32>
 80052aa:	2201      	movs	r2, #1
 80052ac:	4610      	mov	r0, r2
 80052ae:	bd30      	pop	{r4, r5, pc}
 80052b0:	4283      	cmp	r3, r0
 80052b2:	d3f3      	bcc.n	800529c <__mcmp+0x18>
 80052b4:	e7fa      	b.n	80052ac <__mcmp+0x28>
 80052b6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ba:	e7f7      	b.n	80052ac <__mcmp+0x28>

080052bc <__mdiff>:
 80052bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c0:	460c      	mov	r4, r1
 80052c2:	4606      	mov	r6, r0
 80052c4:	4611      	mov	r1, r2
 80052c6:	4620      	mov	r0, r4
 80052c8:	4690      	mov	r8, r2
 80052ca:	f7ff ffdb 	bl	8005284 <__mcmp>
 80052ce:	1e05      	subs	r5, r0, #0
 80052d0:	d110      	bne.n	80052f4 <__mdiff+0x38>
 80052d2:	4629      	mov	r1, r5
 80052d4:	4630      	mov	r0, r6
 80052d6:	f7ff fd59 	bl	8004d8c <_Balloc>
 80052da:	b930      	cbnz	r0, 80052ea <__mdiff+0x2e>
 80052dc:	4b3a      	ldr	r3, [pc, #232]	; (80053c8 <__mdiff+0x10c>)
 80052de:	4602      	mov	r2, r0
 80052e0:	f240 2137 	movw	r1, #567	; 0x237
 80052e4:	4839      	ldr	r0, [pc, #228]	; (80053cc <__mdiff+0x110>)
 80052e6:	f000 fb0b 	bl	8005900 <__assert_func>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	bfa4      	itt	ge
 80052f6:	4643      	movge	r3, r8
 80052f8:	46a0      	movge	r8, r4
 80052fa:	4630      	mov	r0, r6
 80052fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005300:	bfa6      	itte	ge
 8005302:	461c      	movge	r4, r3
 8005304:	2500      	movge	r5, #0
 8005306:	2501      	movlt	r5, #1
 8005308:	f7ff fd40 	bl	8004d8c <_Balloc>
 800530c:	b920      	cbnz	r0, 8005318 <__mdiff+0x5c>
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <__mdiff+0x10c>)
 8005310:	4602      	mov	r2, r0
 8005312:	f240 2145 	movw	r1, #581	; 0x245
 8005316:	e7e5      	b.n	80052e4 <__mdiff+0x28>
 8005318:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800531c:	6926      	ldr	r6, [r4, #16]
 800531e:	60c5      	str	r5, [r0, #12]
 8005320:	f104 0914 	add.w	r9, r4, #20
 8005324:	f108 0514 	add.w	r5, r8, #20
 8005328:	f100 0e14 	add.w	lr, r0, #20
 800532c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005330:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005334:	f108 0210 	add.w	r2, r8, #16
 8005338:	46f2      	mov	sl, lr
 800533a:	2100      	movs	r1, #0
 800533c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005340:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005344:	fa11 f88b 	uxtah	r8, r1, fp
 8005348:	b299      	uxth	r1, r3
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	eba8 0801 	sub.w	r8, r8, r1
 8005350:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005354:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005358:	fa1f f888 	uxth.w	r8, r8
 800535c:	1419      	asrs	r1, r3, #16
 800535e:	454e      	cmp	r6, r9
 8005360:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005364:	f84a 3b04 	str.w	r3, [sl], #4
 8005368:	d8e8      	bhi.n	800533c <__mdiff+0x80>
 800536a:	1b33      	subs	r3, r6, r4
 800536c:	3b15      	subs	r3, #21
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	3304      	adds	r3, #4
 8005374:	3415      	adds	r4, #21
 8005376:	42a6      	cmp	r6, r4
 8005378:	bf38      	it	cc
 800537a:	2304      	movcc	r3, #4
 800537c:	441d      	add	r5, r3
 800537e:	4473      	add	r3, lr
 8005380:	469e      	mov	lr, r3
 8005382:	462e      	mov	r6, r5
 8005384:	4566      	cmp	r6, ip
 8005386:	d30e      	bcc.n	80053a6 <__mdiff+0xea>
 8005388:	f10c 0203 	add.w	r2, ip, #3
 800538c:	1b52      	subs	r2, r2, r5
 800538e:	f022 0203 	bic.w	r2, r2, #3
 8005392:	3d03      	subs	r5, #3
 8005394:	45ac      	cmp	ip, r5
 8005396:	bf38      	it	cc
 8005398:	2200      	movcc	r2, #0
 800539a:	4413      	add	r3, r2
 800539c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80053a0:	b17a      	cbz	r2, 80053c2 <__mdiff+0x106>
 80053a2:	6107      	str	r7, [r0, #16]
 80053a4:	e7a4      	b.n	80052f0 <__mdiff+0x34>
 80053a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80053aa:	fa11 f288 	uxtah	r2, r1, r8
 80053ae:	1414      	asrs	r4, r2, #16
 80053b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053b4:	b292      	uxth	r2, r2
 80053b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80053ba:	f84e 2b04 	str.w	r2, [lr], #4
 80053be:	1421      	asrs	r1, r4, #16
 80053c0:	e7e0      	b.n	8005384 <__mdiff+0xc8>
 80053c2:	3f01      	subs	r7, #1
 80053c4:	e7ea      	b.n	800539c <__mdiff+0xe0>
 80053c6:	bf00      	nop
 80053c8:	08006087 	.word	0x08006087
 80053cc:	08006098 	.word	0x08006098

080053d0 <__d2b>:
 80053d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	460f      	mov	r7, r1
 80053d6:	2101      	movs	r1, #1
 80053d8:	ec59 8b10 	vmov	r8, r9, d0
 80053dc:	4616      	mov	r6, r2
 80053de:	f7ff fcd5 	bl	8004d8c <_Balloc>
 80053e2:	4604      	mov	r4, r0
 80053e4:	b930      	cbnz	r0, 80053f4 <__d2b+0x24>
 80053e6:	4602      	mov	r2, r0
 80053e8:	4b24      	ldr	r3, [pc, #144]	; (800547c <__d2b+0xac>)
 80053ea:	4825      	ldr	r0, [pc, #148]	; (8005480 <__d2b+0xb0>)
 80053ec:	f240 310f 	movw	r1, #783	; 0x30f
 80053f0:	f000 fa86 	bl	8005900 <__assert_func>
 80053f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053fc:	bb2d      	cbnz	r5, 800544a <__d2b+0x7a>
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	f1b8 0300 	subs.w	r3, r8, #0
 8005404:	d026      	beq.n	8005454 <__d2b+0x84>
 8005406:	4668      	mov	r0, sp
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	f7ff fd87 	bl	8004f1c <__lo0bits>
 800540e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005412:	b1e8      	cbz	r0, 8005450 <__d2b+0x80>
 8005414:	f1c0 0320 	rsb	r3, r0, #32
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	430b      	orrs	r3, r1
 800541e:	40c2      	lsrs	r2, r0
 8005420:	6163      	str	r3, [r4, #20]
 8005422:	9201      	str	r2, [sp, #4]
 8005424:	9b01      	ldr	r3, [sp, #4]
 8005426:	61a3      	str	r3, [r4, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf14      	ite	ne
 800542c:	2202      	movne	r2, #2
 800542e:	2201      	moveq	r2, #1
 8005430:	6122      	str	r2, [r4, #16]
 8005432:	b1bd      	cbz	r5, 8005464 <__d2b+0x94>
 8005434:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005438:	4405      	add	r5, r0
 800543a:	603d      	str	r5, [r7, #0]
 800543c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005440:	6030      	str	r0, [r6, #0]
 8005442:	4620      	mov	r0, r4
 8005444:	b003      	add	sp, #12
 8005446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544e:	e7d6      	b.n	80053fe <__d2b+0x2e>
 8005450:	6161      	str	r1, [r4, #20]
 8005452:	e7e7      	b.n	8005424 <__d2b+0x54>
 8005454:	a801      	add	r0, sp, #4
 8005456:	f7ff fd61 	bl	8004f1c <__lo0bits>
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	6163      	str	r3, [r4, #20]
 800545e:	3020      	adds	r0, #32
 8005460:	2201      	movs	r2, #1
 8005462:	e7e5      	b.n	8005430 <__d2b+0x60>
 8005464:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005468:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800546c:	6038      	str	r0, [r7, #0]
 800546e:	6918      	ldr	r0, [r3, #16]
 8005470:	f7ff fd34 	bl	8004edc <__hi0bits>
 8005474:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005478:	e7e2      	b.n	8005440 <__d2b+0x70>
 800547a:	bf00      	nop
 800547c:	08006087 	.word	0x08006087
 8005480:	08006098 	.word	0x08006098

08005484 <__ssputs_r>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	688e      	ldr	r6, [r1, #8]
 800548a:	461f      	mov	r7, r3
 800548c:	42be      	cmp	r6, r7
 800548e:	680b      	ldr	r3, [r1, #0]
 8005490:	4682      	mov	sl, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4690      	mov	r8, r2
 8005496:	d82c      	bhi.n	80054f2 <__ssputs_r+0x6e>
 8005498:	898a      	ldrh	r2, [r1, #12]
 800549a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800549e:	d026      	beq.n	80054ee <__ssputs_r+0x6a>
 80054a0:	6965      	ldr	r5, [r4, #20]
 80054a2:	6909      	ldr	r1, [r1, #16]
 80054a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054a8:	eba3 0901 	sub.w	r9, r3, r1
 80054ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054b0:	1c7b      	adds	r3, r7, #1
 80054b2:	444b      	add	r3, r9
 80054b4:	106d      	asrs	r5, r5, #1
 80054b6:	429d      	cmp	r5, r3
 80054b8:	bf38      	it	cc
 80054ba:	461d      	movcc	r5, r3
 80054bc:	0553      	lsls	r3, r2, #21
 80054be:	d527      	bpl.n	8005510 <__ssputs_r+0x8c>
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7ff fbd7 	bl	8004c74 <_malloc_r>
 80054c6:	4606      	mov	r6, r0
 80054c8:	b360      	cbz	r0, 8005524 <__ssputs_r+0xa0>
 80054ca:	6921      	ldr	r1, [r4, #16]
 80054cc:	464a      	mov	r2, r9
 80054ce:	f000 fa09 	bl	80058e4 <memcpy>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	6126      	str	r6, [r4, #16]
 80054e0:	6165      	str	r5, [r4, #20]
 80054e2:	444e      	add	r6, r9
 80054e4:	eba5 0509 	sub.w	r5, r5, r9
 80054e8:	6026      	str	r6, [r4, #0]
 80054ea:	60a5      	str	r5, [r4, #8]
 80054ec:	463e      	mov	r6, r7
 80054ee:	42be      	cmp	r6, r7
 80054f0:	d900      	bls.n	80054f4 <__ssputs_r+0x70>
 80054f2:	463e      	mov	r6, r7
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4641      	mov	r1, r8
 80054fa:	f000 f9c9 	bl	8005890 <memmove>
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	1b9b      	subs	r3, r3, r6
 8005502:	60a3      	str	r3, [r4, #8]
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	4433      	add	r3, r6
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	2000      	movs	r0, #0
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	462a      	mov	r2, r5
 8005512:	f000 fa3b 	bl	800598c <_realloc_r>
 8005516:	4606      	mov	r6, r0
 8005518:	2800      	cmp	r0, #0
 800551a:	d1e0      	bne.n	80054de <__ssputs_r+0x5a>
 800551c:	6921      	ldr	r1, [r4, #16]
 800551e:	4650      	mov	r0, sl
 8005520:	f7ff fb34 	bl	8004b8c <_free_r>
 8005524:	230c      	movs	r3, #12
 8005526:	f8ca 3000 	str.w	r3, [sl]
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	f04f 30ff 	mov.w	r0, #4294967295
 8005536:	e7e9      	b.n	800550c <__ssputs_r+0x88>

08005538 <_svfiprintf_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	4698      	mov	r8, r3
 800553e:	898b      	ldrh	r3, [r1, #12]
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	b09d      	sub	sp, #116	; 0x74
 8005544:	4607      	mov	r7, r0
 8005546:	460d      	mov	r5, r1
 8005548:	4614      	mov	r4, r2
 800554a:	d50e      	bpl.n	800556a <_svfiprintf_r+0x32>
 800554c:	690b      	ldr	r3, [r1, #16]
 800554e:	b963      	cbnz	r3, 800556a <_svfiprintf_r+0x32>
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	f7ff fb8f 	bl	8004c74 <_malloc_r>
 8005556:	6028      	str	r0, [r5, #0]
 8005558:	6128      	str	r0, [r5, #16]
 800555a:	b920      	cbnz	r0, 8005566 <_svfiprintf_r+0x2e>
 800555c:	230c      	movs	r3, #12
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	e0d0      	b.n	8005708 <_svfiprintf_r+0x1d0>
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	616b      	str	r3, [r5, #20]
 800556a:	2300      	movs	r3, #0
 800556c:	9309      	str	r3, [sp, #36]	; 0x24
 800556e:	2320      	movs	r3, #32
 8005570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005574:	f8cd 800c 	str.w	r8, [sp, #12]
 8005578:	2330      	movs	r3, #48	; 0x30
 800557a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005720 <_svfiprintf_r+0x1e8>
 800557e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005582:	f04f 0901 	mov.w	r9, #1
 8005586:	4623      	mov	r3, r4
 8005588:	469a      	mov	sl, r3
 800558a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800558e:	b10a      	cbz	r2, 8005594 <_svfiprintf_r+0x5c>
 8005590:	2a25      	cmp	r2, #37	; 0x25
 8005592:	d1f9      	bne.n	8005588 <_svfiprintf_r+0x50>
 8005594:	ebba 0b04 	subs.w	fp, sl, r4
 8005598:	d00b      	beq.n	80055b2 <_svfiprintf_r+0x7a>
 800559a:	465b      	mov	r3, fp
 800559c:	4622      	mov	r2, r4
 800559e:	4629      	mov	r1, r5
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7ff ff6f 	bl	8005484 <__ssputs_r>
 80055a6:	3001      	adds	r0, #1
 80055a8:	f000 80a9 	beq.w	80056fe <_svfiprintf_r+0x1c6>
 80055ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ae:	445a      	add	r2, fp
 80055b0:	9209      	str	r2, [sp, #36]	; 0x24
 80055b2:	f89a 3000 	ldrb.w	r3, [sl]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80a1 	beq.w	80056fe <_svfiprintf_r+0x1c6>
 80055bc:	2300      	movs	r3, #0
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c6:	f10a 0a01 	add.w	sl, sl, #1
 80055ca:	9304      	str	r3, [sp, #16]
 80055cc:	9307      	str	r3, [sp, #28]
 80055ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d2:	931a      	str	r3, [sp, #104]	; 0x68
 80055d4:	4654      	mov	r4, sl
 80055d6:	2205      	movs	r2, #5
 80055d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055dc:	4850      	ldr	r0, [pc, #320]	; (8005720 <_svfiprintf_r+0x1e8>)
 80055de:	f7fa fdf7 	bl	80001d0 <memchr>
 80055e2:	9a04      	ldr	r2, [sp, #16]
 80055e4:	b9d8      	cbnz	r0, 800561e <_svfiprintf_r+0xe6>
 80055e6:	06d0      	lsls	r0, r2, #27
 80055e8:	bf44      	itt	mi
 80055ea:	2320      	movmi	r3, #32
 80055ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f0:	0711      	lsls	r1, r2, #28
 80055f2:	bf44      	itt	mi
 80055f4:	232b      	movmi	r3, #43	; 0x2b
 80055f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055fa:	f89a 3000 	ldrb.w	r3, [sl]
 80055fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005600:	d015      	beq.n	800562e <_svfiprintf_r+0xf6>
 8005602:	9a07      	ldr	r2, [sp, #28]
 8005604:	4654      	mov	r4, sl
 8005606:	2000      	movs	r0, #0
 8005608:	f04f 0c0a 	mov.w	ip, #10
 800560c:	4621      	mov	r1, r4
 800560e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005612:	3b30      	subs	r3, #48	; 0x30
 8005614:	2b09      	cmp	r3, #9
 8005616:	d94d      	bls.n	80056b4 <_svfiprintf_r+0x17c>
 8005618:	b1b0      	cbz	r0, 8005648 <_svfiprintf_r+0x110>
 800561a:	9207      	str	r2, [sp, #28]
 800561c:	e014      	b.n	8005648 <_svfiprintf_r+0x110>
 800561e:	eba0 0308 	sub.w	r3, r0, r8
 8005622:	fa09 f303 	lsl.w	r3, r9, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	9304      	str	r3, [sp, #16]
 800562a:	46a2      	mov	sl, r4
 800562c:	e7d2      	b.n	80055d4 <_svfiprintf_r+0x9c>
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	9103      	str	r1, [sp, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfbb      	ittet	lt
 800563a:	425b      	neglt	r3, r3
 800563c:	f042 0202 	orrlt.w	r2, r2, #2
 8005640:	9307      	strge	r3, [sp, #28]
 8005642:	9307      	strlt	r3, [sp, #28]
 8005644:	bfb8      	it	lt
 8005646:	9204      	strlt	r2, [sp, #16]
 8005648:	7823      	ldrb	r3, [r4, #0]
 800564a:	2b2e      	cmp	r3, #46	; 0x2e
 800564c:	d10c      	bne.n	8005668 <_svfiprintf_r+0x130>
 800564e:	7863      	ldrb	r3, [r4, #1]
 8005650:	2b2a      	cmp	r3, #42	; 0x2a
 8005652:	d134      	bne.n	80056be <_svfiprintf_r+0x186>
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	9203      	str	r2, [sp, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	bfb8      	it	lt
 8005660:	f04f 33ff 	movlt.w	r3, #4294967295
 8005664:	3402      	adds	r4, #2
 8005666:	9305      	str	r3, [sp, #20]
 8005668:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005730 <_svfiprintf_r+0x1f8>
 800566c:	7821      	ldrb	r1, [r4, #0]
 800566e:	2203      	movs	r2, #3
 8005670:	4650      	mov	r0, sl
 8005672:	f7fa fdad 	bl	80001d0 <memchr>
 8005676:	b138      	cbz	r0, 8005688 <_svfiprintf_r+0x150>
 8005678:	9b04      	ldr	r3, [sp, #16]
 800567a:	eba0 000a 	sub.w	r0, r0, sl
 800567e:	2240      	movs	r2, #64	; 0x40
 8005680:	4082      	lsls	r2, r0
 8005682:	4313      	orrs	r3, r2
 8005684:	3401      	adds	r4, #1
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568c:	4825      	ldr	r0, [pc, #148]	; (8005724 <_svfiprintf_r+0x1ec>)
 800568e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005692:	2206      	movs	r2, #6
 8005694:	f7fa fd9c 	bl	80001d0 <memchr>
 8005698:	2800      	cmp	r0, #0
 800569a:	d038      	beq.n	800570e <_svfiprintf_r+0x1d6>
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <_svfiprintf_r+0x1f0>)
 800569e:	bb1b      	cbnz	r3, 80056e8 <_svfiprintf_r+0x1b0>
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	3307      	adds	r3, #7
 80056a4:	f023 0307 	bic.w	r3, r3, #7
 80056a8:	3308      	adds	r3, #8
 80056aa:	9303      	str	r3, [sp, #12]
 80056ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ae:	4433      	add	r3, r6
 80056b0:	9309      	str	r3, [sp, #36]	; 0x24
 80056b2:	e768      	b.n	8005586 <_svfiprintf_r+0x4e>
 80056b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b8:	460c      	mov	r4, r1
 80056ba:	2001      	movs	r0, #1
 80056bc:	e7a6      	b.n	800560c <_svfiprintf_r+0xd4>
 80056be:	2300      	movs	r3, #0
 80056c0:	3401      	adds	r4, #1
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	4619      	mov	r1, r3
 80056c6:	f04f 0c0a 	mov.w	ip, #10
 80056ca:	4620      	mov	r0, r4
 80056cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d0:	3a30      	subs	r2, #48	; 0x30
 80056d2:	2a09      	cmp	r2, #9
 80056d4:	d903      	bls.n	80056de <_svfiprintf_r+0x1a6>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0c6      	beq.n	8005668 <_svfiprintf_r+0x130>
 80056da:	9105      	str	r1, [sp, #20]
 80056dc:	e7c4      	b.n	8005668 <_svfiprintf_r+0x130>
 80056de:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e2:	4604      	mov	r4, r0
 80056e4:	2301      	movs	r3, #1
 80056e6:	e7f0      	b.n	80056ca <_svfiprintf_r+0x192>
 80056e8:	ab03      	add	r3, sp, #12
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	462a      	mov	r2, r5
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <_svfiprintf_r+0x1f4>)
 80056f0:	a904      	add	r1, sp, #16
 80056f2:	4638      	mov	r0, r7
 80056f4:	f7fd fe64 	bl	80033c0 <_printf_float>
 80056f8:	1c42      	adds	r2, r0, #1
 80056fa:	4606      	mov	r6, r0
 80056fc:	d1d6      	bne.n	80056ac <_svfiprintf_r+0x174>
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	065b      	lsls	r3, r3, #25
 8005702:	f53f af2d 	bmi.w	8005560 <_svfiprintf_r+0x28>
 8005706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005708:	b01d      	add	sp, #116	; 0x74
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	ab03      	add	r3, sp, #12
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	462a      	mov	r2, r5
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <_svfiprintf_r+0x1f4>)
 8005716:	a904      	add	r1, sp, #16
 8005718:	4638      	mov	r0, r7
 800571a:	f7fe f8f5 	bl	8003908 <_printf_i>
 800571e:	e7eb      	b.n	80056f8 <_svfiprintf_r+0x1c0>
 8005720:	080061f4 	.word	0x080061f4
 8005724:	080061fe 	.word	0x080061fe
 8005728:	080033c1 	.word	0x080033c1
 800572c:	08005485 	.word	0x08005485
 8005730:	080061fa 	.word	0x080061fa

08005734 <__sflush_r>:
 8005734:	898a      	ldrh	r2, [r1, #12]
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	0710      	lsls	r0, r2, #28
 800573e:	460c      	mov	r4, r1
 8005740:	d458      	bmi.n	80057f4 <__sflush_r+0xc0>
 8005742:	684b      	ldr	r3, [r1, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dc05      	bgt.n	8005754 <__sflush_r+0x20>
 8005748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	dc02      	bgt.n	8005754 <__sflush_r+0x20>
 800574e:	2000      	movs	r0, #0
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005756:	2e00      	cmp	r6, #0
 8005758:	d0f9      	beq.n	800574e <__sflush_r+0x1a>
 800575a:	2300      	movs	r3, #0
 800575c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005760:	682f      	ldr	r7, [r5, #0]
 8005762:	6a21      	ldr	r1, [r4, #32]
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	d032      	beq.n	80057ce <__sflush_r+0x9a>
 8005768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	075a      	lsls	r2, r3, #29
 800576e:	d505      	bpl.n	800577c <__sflush_r+0x48>
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	1ac0      	subs	r0, r0, r3
 8005774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005776:	b10b      	cbz	r3, 800577c <__sflush_r+0x48>
 8005778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800577a:	1ac0      	subs	r0, r0, r3
 800577c:	2300      	movs	r3, #0
 800577e:	4602      	mov	r2, r0
 8005780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005782:	6a21      	ldr	r1, [r4, #32]
 8005784:	4628      	mov	r0, r5
 8005786:	47b0      	blx	r6
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	d106      	bne.n	800579c <__sflush_r+0x68>
 800578e:	6829      	ldr	r1, [r5, #0]
 8005790:	291d      	cmp	r1, #29
 8005792:	d82b      	bhi.n	80057ec <__sflush_r+0xb8>
 8005794:	4a29      	ldr	r2, [pc, #164]	; (800583c <__sflush_r+0x108>)
 8005796:	410a      	asrs	r2, r1
 8005798:	07d6      	lsls	r6, r2, #31
 800579a:	d427      	bmi.n	80057ec <__sflush_r+0xb8>
 800579c:	2200      	movs	r2, #0
 800579e:	6062      	str	r2, [r4, #4]
 80057a0:	04d9      	lsls	r1, r3, #19
 80057a2:	6922      	ldr	r2, [r4, #16]
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	d504      	bpl.n	80057b2 <__sflush_r+0x7e>
 80057a8:	1c42      	adds	r2, r0, #1
 80057aa:	d101      	bne.n	80057b0 <__sflush_r+0x7c>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b903      	cbnz	r3, 80057b2 <__sflush_r+0x7e>
 80057b0:	6560      	str	r0, [r4, #84]	; 0x54
 80057b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b4:	602f      	str	r7, [r5, #0]
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d0c9      	beq.n	800574e <__sflush_r+0x1a>
 80057ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057be:	4299      	cmp	r1, r3
 80057c0:	d002      	beq.n	80057c8 <__sflush_r+0x94>
 80057c2:	4628      	mov	r0, r5
 80057c4:	f7ff f9e2 	bl	8004b8c <_free_r>
 80057c8:	2000      	movs	r0, #0
 80057ca:	6360      	str	r0, [r4, #52]	; 0x34
 80057cc:	e7c0      	b.n	8005750 <__sflush_r+0x1c>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b0      	blx	r6
 80057d4:	1c41      	adds	r1, r0, #1
 80057d6:	d1c8      	bne.n	800576a <__sflush_r+0x36>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0c5      	beq.n	800576a <__sflush_r+0x36>
 80057de:	2b1d      	cmp	r3, #29
 80057e0:	d001      	beq.n	80057e6 <__sflush_r+0xb2>
 80057e2:	2b16      	cmp	r3, #22
 80057e4:	d101      	bne.n	80057ea <__sflush_r+0xb6>
 80057e6:	602f      	str	r7, [r5, #0]
 80057e8:	e7b1      	b.n	800574e <__sflush_r+0x1a>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	e7ad      	b.n	8005750 <__sflush_r+0x1c>
 80057f4:	690f      	ldr	r7, [r1, #16]
 80057f6:	2f00      	cmp	r7, #0
 80057f8:	d0a9      	beq.n	800574e <__sflush_r+0x1a>
 80057fa:	0793      	lsls	r3, r2, #30
 80057fc:	680e      	ldr	r6, [r1, #0]
 80057fe:	bf08      	it	eq
 8005800:	694b      	ldreq	r3, [r1, #20]
 8005802:	600f      	str	r7, [r1, #0]
 8005804:	bf18      	it	ne
 8005806:	2300      	movne	r3, #0
 8005808:	eba6 0807 	sub.w	r8, r6, r7
 800580c:	608b      	str	r3, [r1, #8]
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	dd9c      	ble.n	800574e <__sflush_r+0x1a>
 8005814:	6a21      	ldr	r1, [r4, #32]
 8005816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005818:	4643      	mov	r3, r8
 800581a:	463a      	mov	r2, r7
 800581c:	4628      	mov	r0, r5
 800581e:	47b0      	blx	r6
 8005820:	2800      	cmp	r0, #0
 8005822:	dc06      	bgt.n	8005832 <__sflush_r+0xfe>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	e78e      	b.n	8005750 <__sflush_r+0x1c>
 8005832:	4407      	add	r7, r0
 8005834:	eba8 0800 	sub.w	r8, r8, r0
 8005838:	e7e9      	b.n	800580e <__sflush_r+0xda>
 800583a:	bf00      	nop
 800583c:	dfbffffe 	.word	0xdfbffffe

08005840 <_fflush_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	690b      	ldr	r3, [r1, #16]
 8005844:	4605      	mov	r5, r0
 8005846:	460c      	mov	r4, r1
 8005848:	b913      	cbnz	r3, 8005850 <_fflush_r+0x10>
 800584a:	2500      	movs	r5, #0
 800584c:	4628      	mov	r0, r5
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	b118      	cbz	r0, 800585a <_fflush_r+0x1a>
 8005852:	6a03      	ldr	r3, [r0, #32]
 8005854:	b90b      	cbnz	r3, 800585a <_fflush_r+0x1a>
 8005856:	f7fe fa05 	bl	8003c64 <__sinit>
 800585a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f3      	beq.n	800584a <_fflush_r+0xa>
 8005862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005864:	07d0      	lsls	r0, r2, #31
 8005866:	d404      	bmi.n	8005872 <_fflush_r+0x32>
 8005868:	0599      	lsls	r1, r3, #22
 800586a:	d402      	bmi.n	8005872 <_fflush_r+0x32>
 800586c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586e:	f7fe fb10 	bl	8003e92 <__retarget_lock_acquire_recursive>
 8005872:	4628      	mov	r0, r5
 8005874:	4621      	mov	r1, r4
 8005876:	f7ff ff5d 	bl	8005734 <__sflush_r>
 800587a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800587c:	07da      	lsls	r2, r3, #31
 800587e:	4605      	mov	r5, r0
 8005880:	d4e4      	bmi.n	800584c <_fflush_r+0xc>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	d4e1      	bmi.n	800584c <_fflush_r+0xc>
 8005888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588a:	f7fe fb03 	bl	8003e94 <__retarget_lock_release_recursive>
 800588e:	e7dd      	b.n	800584c <_fflush_r+0xc>

08005890 <memmove>:
 8005890:	4288      	cmp	r0, r1
 8005892:	b510      	push	{r4, lr}
 8005894:	eb01 0402 	add.w	r4, r1, r2
 8005898:	d902      	bls.n	80058a0 <memmove+0x10>
 800589a:	4284      	cmp	r4, r0
 800589c:	4623      	mov	r3, r4
 800589e:	d807      	bhi.n	80058b0 <memmove+0x20>
 80058a0:	1e43      	subs	r3, r0, #1
 80058a2:	42a1      	cmp	r1, r4
 80058a4:	d008      	beq.n	80058b8 <memmove+0x28>
 80058a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ae:	e7f8      	b.n	80058a2 <memmove+0x12>
 80058b0:	4402      	add	r2, r0
 80058b2:	4601      	mov	r1, r0
 80058b4:	428a      	cmp	r2, r1
 80058b6:	d100      	bne.n	80058ba <memmove+0x2a>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058c2:	e7f7      	b.n	80058b4 <memmove+0x24>

080058c4 <_sbrk_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d06      	ldr	r5, [pc, #24]	; (80058e0 <_sbrk_r+0x1c>)
 80058c8:	2300      	movs	r3, #0
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	602b      	str	r3, [r5, #0]
 80058d0:	f7fc f90e 	bl	8001af0 <_sbrk>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_sbrk_r+0x1a>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_sbrk_r+0x1a>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000338 	.word	0x20000338

080058e4 <memcpy>:
 80058e4:	440a      	add	r2, r1
 80058e6:	4291      	cmp	r1, r2
 80058e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058ec:	d100      	bne.n	80058f0 <memcpy+0xc>
 80058ee:	4770      	bx	lr
 80058f0:	b510      	push	{r4, lr}
 80058f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058fa:	4291      	cmp	r1, r2
 80058fc:	d1f9      	bne.n	80058f2 <memcpy+0xe>
 80058fe:	bd10      	pop	{r4, pc}

08005900 <__assert_func>:
 8005900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005902:	4614      	mov	r4, r2
 8005904:	461a      	mov	r2, r3
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <__assert_func+0x2c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4605      	mov	r5, r0
 800590c:	68d8      	ldr	r0, [r3, #12]
 800590e:	b14c      	cbz	r4, 8005924 <__assert_func+0x24>
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <__assert_func+0x30>)
 8005912:	9100      	str	r1, [sp, #0]
 8005914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005918:	4906      	ldr	r1, [pc, #24]	; (8005934 <__assert_func+0x34>)
 800591a:	462b      	mov	r3, r5
 800591c:	f000 f872 	bl	8005a04 <fiprintf>
 8005920:	f000 f882 	bl	8005a28 <abort>
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <__assert_func+0x38>)
 8005926:	461c      	mov	r4, r3
 8005928:	e7f3      	b.n	8005912 <__assert_func+0x12>
 800592a:	bf00      	nop
 800592c:	20000060 	.word	0x20000060
 8005930:	0800620f 	.word	0x0800620f
 8005934:	0800621c 	.word	0x0800621c
 8005938:	0800624a 	.word	0x0800624a

0800593c <_calloc_r>:
 800593c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800593e:	fba1 2402 	umull	r2, r4, r1, r2
 8005942:	b94c      	cbnz	r4, 8005958 <_calloc_r+0x1c>
 8005944:	4611      	mov	r1, r2
 8005946:	9201      	str	r2, [sp, #4]
 8005948:	f7ff f994 	bl	8004c74 <_malloc_r>
 800594c:	9a01      	ldr	r2, [sp, #4]
 800594e:	4605      	mov	r5, r0
 8005950:	b930      	cbnz	r0, 8005960 <_calloc_r+0x24>
 8005952:	4628      	mov	r0, r5
 8005954:	b003      	add	sp, #12
 8005956:	bd30      	pop	{r4, r5, pc}
 8005958:	220c      	movs	r2, #12
 800595a:	6002      	str	r2, [r0, #0]
 800595c:	2500      	movs	r5, #0
 800595e:	e7f8      	b.n	8005952 <_calloc_r+0x16>
 8005960:	4621      	mov	r1, r4
 8005962:	f7fe fa18 	bl	8003d96 <memset>
 8005966:	e7f4      	b.n	8005952 <_calloc_r+0x16>

08005968 <__ascii_mbtowc>:
 8005968:	b082      	sub	sp, #8
 800596a:	b901      	cbnz	r1, 800596e <__ascii_mbtowc+0x6>
 800596c:	a901      	add	r1, sp, #4
 800596e:	b142      	cbz	r2, 8005982 <__ascii_mbtowc+0x1a>
 8005970:	b14b      	cbz	r3, 8005986 <__ascii_mbtowc+0x1e>
 8005972:	7813      	ldrb	r3, [r2, #0]
 8005974:	600b      	str	r3, [r1, #0]
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	1e10      	subs	r0, r2, #0
 800597a:	bf18      	it	ne
 800597c:	2001      	movne	r0, #1
 800597e:	b002      	add	sp, #8
 8005980:	4770      	bx	lr
 8005982:	4610      	mov	r0, r2
 8005984:	e7fb      	b.n	800597e <__ascii_mbtowc+0x16>
 8005986:	f06f 0001 	mvn.w	r0, #1
 800598a:	e7f8      	b.n	800597e <__ascii_mbtowc+0x16>

0800598c <_realloc_r>:
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	4680      	mov	r8, r0
 8005992:	4614      	mov	r4, r2
 8005994:	460e      	mov	r6, r1
 8005996:	b921      	cbnz	r1, 80059a2 <_realloc_r+0x16>
 8005998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	4611      	mov	r1, r2
 800599e:	f7ff b969 	b.w	8004c74 <_malloc_r>
 80059a2:	b92a      	cbnz	r2, 80059b0 <_realloc_r+0x24>
 80059a4:	f7ff f8f2 	bl	8004b8c <_free_r>
 80059a8:	4625      	mov	r5, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	f000 f841 	bl	8005a36 <_malloc_usable_size_r>
 80059b4:	4284      	cmp	r4, r0
 80059b6:	4607      	mov	r7, r0
 80059b8:	d802      	bhi.n	80059c0 <_realloc_r+0x34>
 80059ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059be:	d812      	bhi.n	80059e6 <_realloc_r+0x5a>
 80059c0:	4621      	mov	r1, r4
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7ff f956 	bl	8004c74 <_malloc_r>
 80059c8:	4605      	mov	r5, r0
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d0ed      	beq.n	80059aa <_realloc_r+0x1e>
 80059ce:	42bc      	cmp	r4, r7
 80059d0:	4622      	mov	r2, r4
 80059d2:	4631      	mov	r1, r6
 80059d4:	bf28      	it	cs
 80059d6:	463a      	movcs	r2, r7
 80059d8:	f7ff ff84 	bl	80058e4 <memcpy>
 80059dc:	4631      	mov	r1, r6
 80059de:	4640      	mov	r0, r8
 80059e0:	f7ff f8d4 	bl	8004b8c <_free_r>
 80059e4:	e7e1      	b.n	80059aa <_realloc_r+0x1e>
 80059e6:	4635      	mov	r5, r6
 80059e8:	e7df      	b.n	80059aa <_realloc_r+0x1e>

080059ea <__ascii_wctomb>:
 80059ea:	b149      	cbz	r1, 8005a00 <__ascii_wctomb+0x16>
 80059ec:	2aff      	cmp	r2, #255	; 0xff
 80059ee:	bf85      	ittet	hi
 80059f0:	238a      	movhi	r3, #138	; 0x8a
 80059f2:	6003      	strhi	r3, [r0, #0]
 80059f4:	700a      	strbls	r2, [r1, #0]
 80059f6:	f04f 30ff 	movhi.w	r0, #4294967295
 80059fa:	bf98      	it	ls
 80059fc:	2001      	movls	r0, #1
 80059fe:	4770      	bx	lr
 8005a00:	4608      	mov	r0, r1
 8005a02:	4770      	bx	lr

08005a04 <fiprintf>:
 8005a04:	b40e      	push	{r1, r2, r3}
 8005a06:	b503      	push	{r0, r1, lr}
 8005a08:	4601      	mov	r1, r0
 8005a0a:	ab03      	add	r3, sp, #12
 8005a0c:	4805      	ldr	r0, [pc, #20]	; (8005a24 <fiprintf+0x20>)
 8005a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a12:	6800      	ldr	r0, [r0, #0]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	f000 f83f 	bl	8005a98 <_vfiprintf_r>
 8005a1a:	b002      	add	sp, #8
 8005a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a20:	b003      	add	sp, #12
 8005a22:	4770      	bx	lr
 8005a24:	20000060 	.word	0x20000060

08005a28 <abort>:
 8005a28:	b508      	push	{r3, lr}
 8005a2a:	2006      	movs	r0, #6
 8005a2c:	f000 fa0c 	bl	8005e48 <raise>
 8005a30:	2001      	movs	r0, #1
 8005a32:	f7fb ffe5 	bl	8001a00 <_exit>

08005a36 <_malloc_usable_size_r>:
 8005a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3a:	1f18      	subs	r0, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfbc      	itt	lt
 8005a40:	580b      	ldrlt	r3, [r1, r0]
 8005a42:	18c0      	addlt	r0, r0, r3
 8005a44:	4770      	bx	lr

08005a46 <__sfputc_r>:
 8005a46:	6893      	ldr	r3, [r2, #8]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	b410      	push	{r4}
 8005a4e:	6093      	str	r3, [r2, #8]
 8005a50:	da08      	bge.n	8005a64 <__sfputc_r+0x1e>
 8005a52:	6994      	ldr	r4, [r2, #24]
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	db01      	blt.n	8005a5c <__sfputc_r+0x16>
 8005a58:	290a      	cmp	r1, #10
 8005a5a:	d103      	bne.n	8005a64 <__sfputc_r+0x1e>
 8005a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a60:	f000 b934 	b.w	8005ccc <__swbuf_r>
 8005a64:	6813      	ldr	r3, [r2, #0]
 8005a66:	1c58      	adds	r0, r3, #1
 8005a68:	6010      	str	r0, [r2, #0]
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <__sfputs_r>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	4606      	mov	r6, r0
 8005a78:	460f      	mov	r7, r1
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	18d5      	adds	r5, r2, r3
 8005a7e:	42ac      	cmp	r4, r5
 8005a80:	d101      	bne.n	8005a86 <__sfputs_r+0x12>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e007      	b.n	8005a96 <__sfputs_r+0x22>
 8005a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8a:	463a      	mov	r2, r7
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff ffda 	bl	8005a46 <__sfputc_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d1f3      	bne.n	8005a7e <__sfputs_r+0xa>
 8005a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a98 <_vfiprintf_r>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	b09d      	sub	sp, #116	; 0x74
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	4698      	mov	r8, r3
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	b118      	cbz	r0, 8005ab0 <_vfiprintf_r+0x18>
 8005aa8:	6a03      	ldr	r3, [r0, #32]
 8005aaa:	b90b      	cbnz	r3, 8005ab0 <_vfiprintf_r+0x18>
 8005aac:	f7fe f8da 	bl	8003c64 <__sinit>
 8005ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d405      	bmi.n	8005ac2 <_vfiprintf_r+0x2a>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_vfiprintf_r+0x2a>
 8005abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005abe:	f7fe f9e8 	bl	8003e92 <__retarget_lock_acquire_recursive>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	071b      	lsls	r3, r3, #28
 8005ac6:	d501      	bpl.n	8005acc <_vfiprintf_r+0x34>
 8005ac8:	692b      	ldr	r3, [r5, #16]
 8005aca:	b99b      	cbnz	r3, 8005af4 <_vfiprintf_r+0x5c>
 8005acc:	4629      	mov	r1, r5
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 f93a 	bl	8005d48 <__swsetup_r>
 8005ad4:	b170      	cbz	r0, 8005af4 <_vfiprintf_r+0x5c>
 8005ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad8:	07dc      	lsls	r4, r3, #31
 8005ada:	d504      	bpl.n	8005ae6 <_vfiprintf_r+0x4e>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	b01d      	add	sp, #116	; 0x74
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	0598      	lsls	r0, r3, #22
 8005aea:	d4f7      	bmi.n	8005adc <_vfiprintf_r+0x44>
 8005aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aee:	f7fe f9d1 	bl	8003e94 <__retarget_lock_release_recursive>
 8005af2:	e7f3      	b.n	8005adc <_vfiprintf_r+0x44>
 8005af4:	2300      	movs	r3, #0
 8005af6:	9309      	str	r3, [sp, #36]	; 0x24
 8005af8:	2320      	movs	r3, #32
 8005afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b02:	2330      	movs	r3, #48	; 0x30
 8005b04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005cb8 <_vfiprintf_r+0x220>
 8005b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b0c:	f04f 0901 	mov.w	r9, #1
 8005b10:	4623      	mov	r3, r4
 8005b12:	469a      	mov	sl, r3
 8005b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b18:	b10a      	cbz	r2, 8005b1e <_vfiprintf_r+0x86>
 8005b1a:	2a25      	cmp	r2, #37	; 0x25
 8005b1c:	d1f9      	bne.n	8005b12 <_vfiprintf_r+0x7a>
 8005b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b22:	d00b      	beq.n	8005b3c <_vfiprintf_r+0xa4>
 8005b24:	465b      	mov	r3, fp
 8005b26:	4622      	mov	r2, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7ff ffa2 	bl	8005a74 <__sfputs_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	f000 80a9 	beq.w	8005c88 <_vfiprintf_r+0x1f0>
 8005b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b38:	445a      	add	r2, fp
 8005b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80a1 	beq.w	8005c88 <_vfiprintf_r+0x1f0>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b50:	f10a 0a01 	add.w	sl, sl, #1
 8005b54:	9304      	str	r3, [sp, #16]
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b5e:	4654      	mov	r4, sl
 8005b60:	2205      	movs	r2, #5
 8005b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b66:	4854      	ldr	r0, [pc, #336]	; (8005cb8 <_vfiprintf_r+0x220>)
 8005b68:	f7fa fb32 	bl	80001d0 <memchr>
 8005b6c:	9a04      	ldr	r2, [sp, #16]
 8005b6e:	b9d8      	cbnz	r0, 8005ba8 <_vfiprintf_r+0x110>
 8005b70:	06d1      	lsls	r1, r2, #27
 8005b72:	bf44      	itt	mi
 8005b74:	2320      	movmi	r3, #32
 8005b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7a:	0713      	lsls	r3, r2, #28
 8005b7c:	bf44      	itt	mi
 8005b7e:	232b      	movmi	r3, #43	; 0x2b
 8005b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b84:	f89a 3000 	ldrb.w	r3, [sl]
 8005b88:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8a:	d015      	beq.n	8005bb8 <_vfiprintf_r+0x120>
 8005b8c:	9a07      	ldr	r2, [sp, #28]
 8005b8e:	4654      	mov	r4, sl
 8005b90:	2000      	movs	r0, #0
 8005b92:	f04f 0c0a 	mov.w	ip, #10
 8005b96:	4621      	mov	r1, r4
 8005b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9c:	3b30      	subs	r3, #48	; 0x30
 8005b9e:	2b09      	cmp	r3, #9
 8005ba0:	d94d      	bls.n	8005c3e <_vfiprintf_r+0x1a6>
 8005ba2:	b1b0      	cbz	r0, 8005bd2 <_vfiprintf_r+0x13a>
 8005ba4:	9207      	str	r2, [sp, #28]
 8005ba6:	e014      	b.n	8005bd2 <_vfiprintf_r+0x13a>
 8005ba8:	eba0 0308 	sub.w	r3, r0, r8
 8005bac:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	46a2      	mov	sl, r4
 8005bb6:	e7d2      	b.n	8005b5e <_vfiprintf_r+0xc6>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	1d19      	adds	r1, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	9103      	str	r1, [sp, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfbb      	ittet	lt
 8005bc4:	425b      	neglt	r3, r3
 8005bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8005bca:	9307      	strge	r3, [sp, #28]
 8005bcc:	9307      	strlt	r3, [sp, #28]
 8005bce:	bfb8      	it	lt
 8005bd0:	9204      	strlt	r2, [sp, #16]
 8005bd2:	7823      	ldrb	r3, [r4, #0]
 8005bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8005bd6:	d10c      	bne.n	8005bf2 <_vfiprintf_r+0x15a>
 8005bd8:	7863      	ldrb	r3, [r4, #1]
 8005bda:	2b2a      	cmp	r3, #42	; 0x2a
 8005bdc:	d134      	bne.n	8005c48 <_vfiprintf_r+0x1b0>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	9203      	str	r2, [sp, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfb8      	it	lt
 8005bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bee:	3402      	adds	r4, #2
 8005bf0:	9305      	str	r3, [sp, #20]
 8005bf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005cc8 <_vfiprintf_r+0x230>
 8005bf6:	7821      	ldrb	r1, [r4, #0]
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	f7fa fae8 	bl	80001d0 <memchr>
 8005c00:	b138      	cbz	r0, 8005c12 <_vfiprintf_r+0x17a>
 8005c02:	9b04      	ldr	r3, [sp, #16]
 8005c04:	eba0 000a 	sub.w	r0, r0, sl
 8005c08:	2240      	movs	r2, #64	; 0x40
 8005c0a:	4082      	lsls	r2, r0
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	3401      	adds	r4, #1
 8005c10:	9304      	str	r3, [sp, #16]
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	4829      	ldr	r0, [pc, #164]	; (8005cbc <_vfiprintf_r+0x224>)
 8005c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c1c:	2206      	movs	r2, #6
 8005c1e:	f7fa fad7 	bl	80001d0 <memchr>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d03f      	beq.n	8005ca6 <_vfiprintf_r+0x20e>
 8005c26:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <_vfiprintf_r+0x228>)
 8005c28:	bb1b      	cbnz	r3, 8005c72 <_vfiprintf_r+0x1da>
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	3307      	adds	r3, #7
 8005c2e:	f023 0307 	bic.w	r3, r3, #7
 8005c32:	3308      	adds	r3, #8
 8005c34:	9303      	str	r3, [sp, #12]
 8005c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c38:	443b      	add	r3, r7
 8005c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c3c:	e768      	b.n	8005b10 <_vfiprintf_r+0x78>
 8005c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c42:	460c      	mov	r4, r1
 8005c44:	2001      	movs	r0, #1
 8005c46:	e7a6      	b.n	8005b96 <_vfiprintf_r+0xfe>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	9305      	str	r3, [sp, #20]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f04f 0c0a 	mov.w	ip, #10
 8005c54:	4620      	mov	r0, r4
 8005c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c5a:	3a30      	subs	r2, #48	; 0x30
 8005c5c:	2a09      	cmp	r2, #9
 8005c5e:	d903      	bls.n	8005c68 <_vfiprintf_r+0x1d0>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0c6      	beq.n	8005bf2 <_vfiprintf_r+0x15a>
 8005c64:	9105      	str	r1, [sp, #20]
 8005c66:	e7c4      	b.n	8005bf2 <_vfiprintf_r+0x15a>
 8005c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e7f0      	b.n	8005c54 <_vfiprintf_r+0x1bc>
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	462a      	mov	r2, r5
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <_vfiprintf_r+0x22c>)
 8005c7a:	a904      	add	r1, sp, #16
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7fd fb9f 	bl	80033c0 <_printf_float>
 8005c82:	4607      	mov	r7, r0
 8005c84:	1c78      	adds	r0, r7, #1
 8005c86:	d1d6      	bne.n	8005c36 <_vfiprintf_r+0x19e>
 8005c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	d405      	bmi.n	8005c9a <_vfiprintf_r+0x202>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	059a      	lsls	r2, r3, #22
 8005c92:	d402      	bmi.n	8005c9a <_vfiprintf_r+0x202>
 8005c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c96:	f7fe f8fd 	bl	8003e94 <__retarget_lock_release_recursive>
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	065b      	lsls	r3, r3, #25
 8005c9e:	f53f af1d 	bmi.w	8005adc <_vfiprintf_r+0x44>
 8005ca2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ca4:	e71c      	b.n	8005ae0 <_vfiprintf_r+0x48>
 8005ca6:	ab03      	add	r3, sp, #12
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	462a      	mov	r2, r5
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <_vfiprintf_r+0x22c>)
 8005cae:	a904      	add	r1, sp, #16
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f7fd fe29 	bl	8003908 <_printf_i>
 8005cb6:	e7e4      	b.n	8005c82 <_vfiprintf_r+0x1ea>
 8005cb8:	080061f4 	.word	0x080061f4
 8005cbc:	080061fe 	.word	0x080061fe
 8005cc0:	080033c1 	.word	0x080033c1
 8005cc4:	08005a75 	.word	0x08005a75
 8005cc8:	080061fa 	.word	0x080061fa

08005ccc <__swbuf_r>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	460e      	mov	r6, r1
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	b118      	cbz	r0, 8005cde <__swbuf_r+0x12>
 8005cd6:	6a03      	ldr	r3, [r0, #32]
 8005cd8:	b90b      	cbnz	r3, 8005cde <__swbuf_r+0x12>
 8005cda:	f7fd ffc3 	bl	8003c64 <__sinit>
 8005cde:	69a3      	ldr	r3, [r4, #24]
 8005ce0:	60a3      	str	r3, [r4, #8]
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	071a      	lsls	r2, r3, #28
 8005ce6:	d525      	bpl.n	8005d34 <__swbuf_r+0x68>
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	b31b      	cbz	r3, 8005d34 <__swbuf_r+0x68>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	6922      	ldr	r2, [r4, #16]
 8005cf0:	1a98      	subs	r0, r3, r2
 8005cf2:	6963      	ldr	r3, [r4, #20]
 8005cf4:	b2f6      	uxtb	r6, r6
 8005cf6:	4283      	cmp	r3, r0
 8005cf8:	4637      	mov	r7, r6
 8005cfa:	dc04      	bgt.n	8005d06 <__swbuf_r+0x3a>
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f7ff fd9e 	bl	8005840 <_fflush_r>
 8005d04:	b9e0      	cbnz	r0, 8005d40 <__swbuf_r+0x74>
 8005d06:	68a3      	ldr	r3, [r4, #8]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	60a3      	str	r3, [r4, #8]
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	701e      	strb	r6, [r3, #0]
 8005d14:	6962      	ldr	r2, [r4, #20]
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d004      	beq.n	8005d26 <__swbuf_r+0x5a>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	07db      	lsls	r3, r3, #31
 8005d20:	d506      	bpl.n	8005d30 <__swbuf_r+0x64>
 8005d22:	2e0a      	cmp	r6, #10
 8005d24:	d104      	bne.n	8005d30 <__swbuf_r+0x64>
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fd89 	bl	8005840 <_fflush_r>
 8005d2e:	b938      	cbnz	r0, 8005d40 <__swbuf_r+0x74>
 8005d30:	4638      	mov	r0, r7
 8005d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d34:	4621      	mov	r1, r4
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 f806 	bl	8005d48 <__swsetup_r>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d0d5      	beq.n	8005cec <__swbuf_r+0x20>
 8005d40:	f04f 37ff 	mov.w	r7, #4294967295
 8005d44:	e7f4      	b.n	8005d30 <__swbuf_r+0x64>
	...

08005d48 <__swsetup_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <__swsetup_r+0xac>)
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	460c      	mov	r4, r1
 8005d52:	b118      	cbz	r0, 8005d5c <__swsetup_r+0x14>
 8005d54:	6a03      	ldr	r3, [r0, #32]
 8005d56:	b90b      	cbnz	r3, 8005d5c <__swsetup_r+0x14>
 8005d58:	f7fd ff84 	bl	8003c64 <__sinit>
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d62:	0718      	lsls	r0, r3, #28
 8005d64:	d422      	bmi.n	8005dac <__swsetup_r+0x64>
 8005d66:	06d9      	lsls	r1, r3, #27
 8005d68:	d407      	bmi.n	8005d7a <__swsetup_r+0x32>
 8005d6a:	2309      	movs	r3, #9
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e034      	b.n	8005de4 <__swsetup_r+0x9c>
 8005d7a:	0758      	lsls	r0, r3, #29
 8005d7c:	d512      	bpl.n	8005da4 <__swsetup_r+0x5c>
 8005d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d80:	b141      	cbz	r1, 8005d94 <__swsetup_r+0x4c>
 8005d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d002      	beq.n	8005d90 <__swsetup_r+0x48>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7fe fefe 	bl	8004b8c <_free_r>
 8005d90:	2300      	movs	r3, #0
 8005d92:	6363      	str	r3, [r4, #52]	; 0x34
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	f043 0308 	orr.w	r3, r3, #8
 8005daa:	81a3      	strh	r3, [r4, #12]
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	b94b      	cbnz	r3, 8005dc4 <__swsetup_r+0x7c>
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dba:	d003      	beq.n	8005dc4 <__swsetup_r+0x7c>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 f884 	bl	8005ecc <__smakebuf_r>
 8005dc4:	89a0      	ldrh	r0, [r4, #12]
 8005dc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dca:	f010 0301 	ands.w	r3, r0, #1
 8005dce:	d00a      	beq.n	8005de6 <__swsetup_r+0x9e>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60a3      	str	r3, [r4, #8]
 8005dd4:	6963      	ldr	r3, [r4, #20]
 8005dd6:	425b      	negs	r3, r3
 8005dd8:	61a3      	str	r3, [r4, #24]
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	b943      	cbnz	r3, 8005df0 <__swsetup_r+0xa8>
 8005dde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005de2:	d1c4      	bne.n	8005d6e <__swsetup_r+0x26>
 8005de4:	bd38      	pop	{r3, r4, r5, pc}
 8005de6:	0781      	lsls	r1, r0, #30
 8005de8:	bf58      	it	pl
 8005dea:	6963      	ldrpl	r3, [r4, #20]
 8005dec:	60a3      	str	r3, [r4, #8]
 8005dee:	e7f4      	b.n	8005dda <__swsetup_r+0x92>
 8005df0:	2000      	movs	r0, #0
 8005df2:	e7f7      	b.n	8005de4 <__swsetup_r+0x9c>
 8005df4:	20000060 	.word	0x20000060

08005df8 <_raise_r>:
 8005df8:	291f      	cmp	r1, #31
 8005dfa:	b538      	push	{r3, r4, r5, lr}
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	d904      	bls.n	8005e0c <_raise_r+0x14>
 8005e02:	2316      	movs	r3, #22
 8005e04:	6003      	str	r3, [r0, #0]
 8005e06:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e0e:	b112      	cbz	r2, 8005e16 <_raise_r+0x1e>
 8005e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e14:	b94b      	cbnz	r3, 8005e2a <_raise_r+0x32>
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 f830 	bl	8005e7c <_getpid_r>
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	4601      	mov	r1, r0
 8005e20:	4620      	mov	r0, r4
 8005e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e26:	f000 b817 	b.w	8005e58 <_kill_r>
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d00a      	beq.n	8005e44 <_raise_r+0x4c>
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	d103      	bne.n	8005e3a <_raise_r+0x42>
 8005e32:	2316      	movs	r3, #22
 8005e34:	6003      	str	r3, [r0, #0]
 8005e36:	2001      	movs	r0, #1
 8005e38:	e7e7      	b.n	8005e0a <_raise_r+0x12>
 8005e3a:	2400      	movs	r4, #0
 8005e3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e40:	4628      	mov	r0, r5
 8005e42:	4798      	blx	r3
 8005e44:	2000      	movs	r0, #0
 8005e46:	e7e0      	b.n	8005e0a <_raise_r+0x12>

08005e48 <raise>:
 8005e48:	4b02      	ldr	r3, [pc, #8]	; (8005e54 <raise+0xc>)
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	f7ff bfd3 	b.w	8005df8 <_raise_r>
 8005e52:	bf00      	nop
 8005e54:	20000060 	.word	0x20000060

08005e58 <_kill_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d07      	ldr	r5, [pc, #28]	; (8005e78 <_kill_r+0x20>)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4608      	mov	r0, r1
 8005e62:	4611      	mov	r1, r2
 8005e64:	602b      	str	r3, [r5, #0]
 8005e66:	f7fb fdbb 	bl	80019e0 <_kill>
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	d102      	bne.n	8005e74 <_kill_r+0x1c>
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	b103      	cbz	r3, 8005e74 <_kill_r+0x1c>
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
 8005e76:	bf00      	nop
 8005e78:	20000338 	.word	0x20000338

08005e7c <_getpid_r>:
 8005e7c:	f7fb bda8 	b.w	80019d0 <_getpid>

08005e80 <__swhatbuf_r>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	460c      	mov	r4, r1
 8005e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	b096      	sub	sp, #88	; 0x58
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	461e      	mov	r6, r3
 8005e90:	da0d      	bge.n	8005eae <__swhatbuf_r+0x2e>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e98:	f04f 0100 	mov.w	r1, #0
 8005e9c:	bf0c      	ite	eq
 8005e9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ea2:	2340      	movne	r3, #64	; 0x40
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	6031      	str	r1, [r6, #0]
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	b016      	add	sp, #88	; 0x58
 8005eac:	bd70      	pop	{r4, r5, r6, pc}
 8005eae:	466a      	mov	r2, sp
 8005eb0:	f000 f848 	bl	8005f44 <_fstat_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	dbec      	blt.n	8005e92 <__swhatbuf_r+0x12>
 8005eb8:	9901      	ldr	r1, [sp, #4]
 8005eba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005ebe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ec2:	4259      	negs	r1, r3
 8005ec4:	4159      	adcs	r1, r3
 8005ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eca:	e7eb      	b.n	8005ea4 <__swhatbuf_r+0x24>

08005ecc <__smakebuf_r>:
 8005ecc:	898b      	ldrh	r3, [r1, #12]
 8005ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ed0:	079d      	lsls	r5, r3, #30
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	d507      	bpl.n	8005ee8 <__smakebuf_r+0x1c>
 8005ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	6163      	str	r3, [r4, #20]
 8005ee4:	b002      	add	sp, #8
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	ab01      	add	r3, sp, #4
 8005eea:	466a      	mov	r2, sp
 8005eec:	f7ff ffc8 	bl	8005e80 <__swhatbuf_r>
 8005ef0:	9900      	ldr	r1, [sp, #0]
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f7fe febd 	bl	8004c74 <_malloc_r>
 8005efa:	b948      	cbnz	r0, 8005f10 <__smakebuf_r+0x44>
 8005efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f00:	059a      	lsls	r2, r3, #22
 8005f02:	d4ef      	bmi.n	8005ee4 <__smakebuf_r+0x18>
 8005f04:	f023 0303 	bic.w	r3, r3, #3
 8005f08:	f043 0302 	orr.w	r3, r3, #2
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	e7e3      	b.n	8005ed8 <__smakebuf_r+0xc>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	6020      	str	r0, [r4, #0]
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	81a3      	strh	r3, [r4, #12]
 8005f1a:	9b00      	ldr	r3, [sp, #0]
 8005f1c:	6163      	str	r3, [r4, #20]
 8005f1e:	9b01      	ldr	r3, [sp, #4]
 8005f20:	6120      	str	r0, [r4, #16]
 8005f22:	b15b      	cbz	r3, 8005f3c <__smakebuf_r+0x70>
 8005f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f000 f81d 	bl	8005f68 <_isatty_r>
 8005f2e:	b128      	cbz	r0, 8005f3c <__smakebuf_r+0x70>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	431d      	orrs	r5, r3
 8005f40:	81a5      	strh	r5, [r4, #12]
 8005f42:	e7cf      	b.n	8005ee4 <__smakebuf_r+0x18>

08005f44 <_fstat_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d07      	ldr	r5, [pc, #28]	; (8005f64 <_fstat_r+0x20>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	f7fb fda4 	bl	8001a9e <_fstat>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d102      	bne.n	8005f60 <_fstat_r+0x1c>
 8005f5a:	682b      	ldr	r3, [r5, #0]
 8005f5c:	b103      	cbz	r3, 8005f60 <_fstat_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20000338 	.word	0x20000338

08005f68 <_isatty_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d06      	ldr	r5, [pc, #24]	; (8005f84 <_isatty_r+0x1c>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fb fda3 	bl	8001abe <_isatty>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_isatty_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_isatty_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20000338 	.word	0x20000338

08005f88 <_init>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr

08005f94 <_fini>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr
